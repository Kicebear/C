#头文件
#define _CRT_SECURE_NO_WARNINGS ;目的是scanf不会报错
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<time.h>
#include<stdbool.h>
//经典编程99乘法表-------------------------------------------------------
/*void main()
{
	int i, j;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= i; j++)
		{
			printf("%d*%d=%d ",j,i,i*j);
		}
		printf("\n");
	}
}*/
//菲波那锲数列
/*void main()
{
	int a[20] = { 1,1 };
	int i, j;
	for (i = 2; i < 20; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	for (i = 0; i < 20; i++)
		printf("%d,",a[i]);
}*/
//求素数
/*void main()
{
	int n,i;
	scanf("%d",&n);
	int flag = 1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	}
	if (flag == 1)
		printf("素数");
	else
		printf("非素数");
}*/
//求a+aa+aaa+aaaa。。。
/*int fun(int n, int a)
{
	int i, sum = 0,temp=0;
	for (i = 1; i <= n; i++)
	{
		temp = temp *10 + a;
		sum += temp;
	}
	printf("%d ",sum); 
}
void main()
{
	int n, a;
	scanf("%d%d",&n,&a);
	fun(n, a);
}
*/
//求完数
/*void main()
{
	int n,i,j,k=0;
	//scanf("%d",&n);
	for (i = 1; i <= 100; i++)
	{
		int sum = 0;
		//判别
		for (j = 1; j <= (i / 2); j++)
		{

			if (i % j == 0)
			{
				sum += j;
			}
		}
		//确定值后
		if (i == sum)
		{
			printf("%d=\n", i);
			for (j = 1; j <= (i / 2); j++)
			{
				if (i % j == 0)
					printf("%d ",j);
			}
			printf("\n");
		}
		
	}
}*/
//递归猴子吃桃第10天省1个
/*int fun(int n)
{
	int sum = 0;
	//已知n=10。sum=1;
	if (n == 10)
		sum = 1;
	else
	{
		sum = (fun(n+1)+1)*2;//fun(?)？是n经过?才能到目标数，对fun进行以目标函数为基础转到n的操作
		//解析: n等于1 1+1+1+1+...到10,把fun()当作fun(10)进行特定操作得到目标fun(1);
		//10-》9-》8 ->...->1!= 1->..->8->9->10
		//起始10转1            起始1转10；注意起始
	}
	//fun(n+1)是前一天,比如第一天只有加一才能到10;
	return sum;
}
void main()
{
	//求第一天;
	int age = 1;
	fun(1);
	printf("%d",fun(1));
}*/
//分子求和
/*void main()
{
	int i, t;
	float fenzi=1, fenmu=2, fensi, sum = 0;;
	for (i = 1; i <= 20; i++)
	{
		fensi = fenmu / fenzi;
		t = fenmu;
		fenmu = fenzi + fenmu;
		fenzi = t;
		sum += fensi;
	}
	printf("%.6f",sum);
}*/
//递归求5！
/*int fun(int n)
{
	int sum = 0;
	if (n == 1)
		sum= 1;
	else
	{
		sum = fun(n - 1) * (n);//5-->1；fun()
		
	}
	return sum;
}
void main()
{
	int n = 5;
	for (int i = 1; i <= 5; i++)
		printf("%d!=%d\n",i,fun(i));
}*/
//递归调用方式,输入5个字符,以相反的顺序打印出来 
/*char fun(int num)
 {
	char next;
	if (num == 1)
	{
		next = getchar();
		putchar(next);
	}
	else
	{
		next = getchar();
		fun(num - 1);
		putchar(next);
	}

}
void main()
{
	int num = 5;
	fun(num);
}*/
//求年龄
/*int fun(int n)
{
	int age = 1;
	if (age == 1)
		age = 10;
	else
	{
		age = fun(n - 1) + 2;
	}
	return age;
}
void main()
{
	int age;
	age = 5;
	fun(5);
	printf("%d",fun(5));
}
*/
//给一个整数,求它是几位数,逆序输出
/**oid main()
{
	int i=0;
	int n,m;
	scanf("%d",&n);
	while (n)
	{
		m = n % 10;
		n = n / 10;
		i++;
		printf("%d",m);
	}
	printf("\n是%d位数",i);
}*/
//判断回文数
/*void main()
{
	//法1
	int i,j;
	int flag = 1;
	char a[10];char b[10];
	scanf("%s", a);
	for (i = 0; a[i] != '\0'; i++);
	for (j=0,i = i - 1; i >= 0;j++, i--)
	{
		b[j] = a[i];
	}
	for (i = 0; a[i] != '\0'; i++)
	{
		if (a[i] != b[i])
		{
			flag = 0;
			break;
		}
	}
	if (flag == 0)
		printf("非");
	else
		printf("是");
}*/
//插入
/*void main()//数组不满
{
	int a[10] = { 0,1,2,3,4,5,6 };//7g个数
	int i, j, k;
	scanf("%d",&k);
	//比较7个数6次
	for (i = 0; i < 6; i++)
	{
		if (a[i] > k)
			break;
	}
	//倒2放 因为数字数组没\0
	for(j=8;j>=i;j--)
	{
		a[j + 1] = a[j];
	}
	//赋插入值
	a[i] = k;
	//遍历输出
	for (i = 0; i < 10; i++)
		printf("%d",a[i]);
}*/
/*void main()//数组满
{
	int a[7] = { 0,1,2,3,4,5,6 };//7g个数
	int i, j, k;
	scanf("%d", &k);
	//比较7个数6次
	for (i = 0; i < 6; i++)
	{
		if (a[i] > k)
			break;
	}
	//倒2放 因为数字数组没\0
	for (j = 5; j >= i; j--)
	{
		a[j + 1] = a[j];
	}
	//赋插入值
	a[i] = k;
	//遍历输出
	for (i = 0; i < 7; i++)
		printf("%d", a[i]);
}*/
//删除
/*void main()//数组满
{
	int a[10] = { 0,1,2,3,4,5,6,7,8,9 };
	int i, j, k;
	scanf("%d", &k);
	//遍历10个数10次
	for (i = 0; i < 10; i++)
	{
		if (a[i] == k)
			break;
	}
	//删除
	for (j = i; j < 10; j++)
		a[j] = a[j + 1];
	//输出
	for (i = 0; i < 9; i++)
		printf("%d", a[i]);
}*/
/*void main()数组不满
{
	int a[10] = { 0,1,2,5,6,7,8,9 };//8个数字
	int i, j, k;
	scanf("%d", &k);
	//遍历找出要删除的数
	for (i = 0; i < 8; i++)
	{
		if (a[i] == k)
			break;
	}
	//根据要删除的数从这个要删的数后开始删数字
	for (j = i; j <= 7; j++)
		a[j] = a[j + 1];

	//删除后剩下7个数
	for (i = 0; i < 7; i++)
	{
		printf("%d,", a[i]);
	}
}*/
//字符串删除y
/*void main()
{
	char s[20] = { "I lovye Chiyyna！" };
	int i, n, j;
	char ch;
	//计算s的长度
	n = strlen(s);
	//要删除的字符
	scanf("%c", &ch);
	//判别
	for (i = 0; i < 20; i++)
	{
	    //删除功能
		for (i = 0; i < 20; i++)
			if (s[i] == ch)
			{
				break;
			}
		for (j = i; j<18; j++)//a[19]代表'\0'
		{
			s[j] = s[j + 1];
		}
	}
	puts(s);
}*/
//判断质数1和它本身
/*void main()
{
	int n,i;
	scanf("%d",&n);
	for (i = 2; i * i <= n; i++)
	{
		if(n%i==0)
			break;
	}
	if (i * i > n)
		printf("yes");
	else
		printf("no");
}*/
//一个偶数分2素数
/*void main()
{
	int n = 18, i, n1, n2;
	//int flag = 1;
	for (n1 = 3; n1 <= (n / 2); n1++)
	{
		for (i = 2; i < n1; i++)
		{
			if (n1 % i == 0)
			{
				//flag = 0;
				break;
			}
		}
		n2 = n - n1;
		for (i = 2; i < n2; i++)
		{
			if (n2 % i == 0)
			{
				//flag = 0;
				break;
			}
		}
		if (i == n2)
			break;//不会跳上去进行n1++；
	}
	printf("%d,%d",n1,n2);
}*/
//咖啡哥字母金字塔--------------------------------------------------------------------
/*char fun(int n)
{
	int i, j, k;
	for (i = 1; i <= n; i++)
	{
		//输出左半部分
		for (j = 1; j <= n - i; j++)
			printf(" ");
		for (k = 1; k <= ((2 * i - 1)+1)/2; k++)
			printf("%c",64+k);
		//输出右半部分
		for (k = i-1; k > 0; k--)
			printf("%c",64+k);
		printf("\n");
	}
}
void main()
{
	int n;
	scanf("%d",&n);
	fun(n);
}*/
//带符号数逆序
/*void main()
{
	char a[100];
	gets(a);
	int i = strlen(a);
	for (i = i - 1; i >= 0; i--)
		printf("%c",a[i]);
}*/
//10进制转n进制最好的
/*int fun(int n)
{
	int i;
	if ((i=n/2) > 0)
		fun(n / 2);
	printf("%d",n%2);
}
void main()
{
	int n=8;
	scanf("%d",&n);
	fun(n);
}*/
//n进制转10进制
/*void main()
{
	char* p, s[10];
	int n;
	p = s;
	gets(s);
	n = *p - '0';
	while (*(++p) != '\0')
		n = n * 2 + (*p) - '0';//关键
	printf("%d",n);
}*/
//10进制转n进制常用
/*int fun(int n)
{
	//10进制转16位进制
	int i, m;
	if ((i = n / 16) > 0)
	{
		fun(n / 16);	
	}
	m = n % 16;
	if (m > 9)
		printf("%c", m-10+65);
	else
		printf("%d",m);
	//printf("%d", n % 16);
}
int main()
{
	int n;
	scanf("%d",&n);
	fun(n);
}*/
//计算1的1次方+2的2次方+..n的n次方
/*int fun(int n)
{
	int i, sum = 1;
	for (i = 1; i <= n; i++)
	{
		sum  *= n;
	}
	return sum;
}
void main()
{
	int n,i;
	int sum = 0;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		sum += fun(i);
	}
	printf("%d",sum);
}*/
/*void main() {
	int i, j, n, sum = 0;
	for (i = 1; i <= 5; i++) {
		n = 1;
		for (j = 1; j <= i; j++)
			n *= i;
		sum = sum + n;
		//printf("sum=%d", sum);
	}
	printf("sum=%d", sum);
}*/
//字符串统计0-9个数
/*void main()
{
	char a[20], count[10] = {0};
	gets(a);
	int i;
	//挨个判别
	for (i = 0; a[i] != '\0'; i++)
	{
		if (a[i] >= '0' && a[i] <= '9')
		{
			count[a[i] - 48]++;//count[?]++
		}
	}
	for (i = 0; i < 10; i++)
		printf("%d:%d\n",i,count[i]);
	printf("%s",&a[0]);//全部输出
	printf("%c", a[0]);//%d 输入0出48,%s输入0出0
}*/
//前导*号移到尾部 ***abcd*c->abcd*c***
/*void main()
{
	char a[20];
	gets(a);
	int i;
	int j = 0;

	int h = 0;
	char b[100];
	int k = 0;
	char c[100];
	//计算前面有几颗星
	for (i = 0,h=0; a[i] == '*';h++, i++)
	{
		b[h] = a[i];
	}
	b[h] = '\0';
	//puts(b);检测
	for (k=0,j = i; a[j] != '\0';k++, j++)
		c[k] = a[j];
	c[k] = '\0';
	strcat(c, b);
	puts(c);
}*/
//数组大的与第一个交换,小的与最后一个交换
/*void main()
{
	int a[10] = { 2,1,3,4,5,6,7,8,9,0 };
	int i,j;
	int max=a[0];
	int min;
	for (i = 0; i < 10; i++)
	{
		if (max < a[i])
		{
			max = a[i];
			j = i;
		}
	}
	//交换max值
	int temp;
	temp = a[0];
	a[0] = a[j];
	a[j] = temp;

	min = a[0];
	for (i = 0; i < 10; i++)
	{
		if (min > a[i])
		{
			min = a[i];
			j = i;
		}
	}
	temp = a[9];
	a[9] = a[j];
	a[j] = temp;
	for (i = 0; i < 10; i++)
		printf("%d ",a[i]);
}*/
//字符串的连接
/*void main()
{
	char a[20] = {"I love "};
	char b[20] = {"china"};
	int i,j;
	for (i = 0; a[i] != '\0'; i++);
	for (j = 0; b[j] != '\0'; j++, i++)
	{
		a[i] = b[j];
	}
	a[i] = '\0';
	puts(a);
}*/
//字符串连接
/*void main()
{
	char a[20] = { "china" };
	char b[20];
	int i, j;
	for (i = 0; a[i] != '\0'; i++)
	{
		b[i] = a[i];
	}
	b[i] = '\0';
	puts(b);
}*/
//字符串逆序后与原字符串连接
/*void main()
{
	char s[81], * p, * q;
	gets(s);
	for (q = s; *q != '\0'; q++);
	p = q - 1;
	while (p >= s)
	{
		*q++ = *p--;
	}
	*q = '\0';
	puts(s);
}*
//指针字符串逆序/
/*void main()
{
	char s[80],*p;
	gets(s);
	p = s;
	for (; *p != '\0'; p++);
	while(p>=s)
	{
		printf("%c",*p);
		p--;
	}
}*/
//数字去重复
/*void main()
{
	int a[20] = { 1,1,1,2,2,3,3,4 },i,k,j=1;
	k = a[0];
	for (i = 1; i < 20;i++)
	{
		if (k != a[i])
		{
			a[j++] = a[i];
			k = a[i];
		}
		else//有无均可
			continue;
	}
	for (i = 0; i < j; i++)
		printf("%d ",a[i]);
}*/
//拜课输入半径求周长和面积---------------------------------------------------------
/*#define pi 3.14159
void main()
{
	int r;
	//输入半径
	printf("input r:\n");
	scanf("%d",&r);
	double mianji, zhou;
	mianji = pi*r*r;
	zhou = 2 * pi * r;
	printf("周长:%.2f,面积:%.2f",mianji,zhou);
}*/
//计算表达式的值
/*void main()
{
	float x = 2.5, y = 4.7;
	int a = 7;
	printf("%f",x + a % 3 * (int)(x + y) % 2 / 4);
}*/
//输入年份判断是否为闰年
/*void main()
{
	int year;
	printf("输入年份:\n");
	scanf("%d",&year);
	if (((year % 4 == 0) && (year % 100 != 0)) || ((year % 400) == 0))
		printf("闰年");
	else
		printf("非闰年");
}*/
//交换两个变量并输出
/*void main()
{
	int a, b, temp;
	scanf("%d%d",&a,&b);
	printf("交换前:a:%d,b:%d\n",a,b);
	temp = a;
	a = b;
	b = temp;
	printf("交换后:a:%d,b:%d\n",a,b);
}*/
//数组第一项1,第二项2计算到20项,以逆序的形式输出没五行换行
/*void main()
{
	int a[20] = { 1,2 },i,j;
	for (i = 2; i < 20; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	for (i = 19,j=0; i >= 0;j++, i--)
	{
		if (j % 5 == 0)
			printf("\n");
		printf("%5d,", a[i]);
	}
}*/
//7名评委打分0.0-10.0,求去max,min的平均分
/*void main()
{
	float a[7];
	int i;
	for (i = 0; i < 7; i++)
		scanf("%f", &a[i]);
	//求max;
	float max = a[0];
	for (i = 1; i < 7; i++)
	{
		if (max < a[i])
			max = a[i];
	}
	//求min
	float min = a[0];
	for (i = 1; i < 7; i++)
	{
		if (min > a[i])
			min = a[i];
	}
	float sum=0;
	for (i = 0; i < 7; i++)
	{
		sum += a[i];
	}
	sum = sum - max - min;
	sum = sum / 5;
	printf("平均分:%.1f",sum);
}
*/
//求正整数的因子
/*int main()
{
	int n,i,sum=0;
	scanf("%d",&n);
	//判别
	printf("因子为:1");
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			sum += i;
			printf(",%d", i);
			
		}
	}
	printf("\n因子和是%d",sum+1);
}*/
//递归数列求斐波那契数列前30项
/*void main()
{
	int i, a[30] = { 1,1 }, j;
	for (i = 2; i < 30; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	for (i = 0, j = 0; i < 30; j++, i++)
	{
		//j控制换行
		if (j % 5 == 0)
			printf("\n");
		printf("%6d,", a[i]);
	}
}*/
//10名学生信息(姓名,学号,3门课程成绩),输出3门课总平均成绩,最高分学生学号，姓名，3门课成绩和平均分
/*struct student
{
	char name[20];
	int num;
	float score1;
	float score2;
	float score3;
	float avge;
}stu[10];
void main()
{
	int i;
	printf("input: name num score1 score2 score3:\n");
	for (i = 0; i < 10; i++)
	{
		scanf("%s%d%f%f%f",stu[i].name,&stu[i].num,&stu[i].score1,&stu[i].score2,&stu[i].score3);
	}
	//计算总平均成绩sum
	for (i = 0; i < 10; i++)
	{
		stu[i].avge = (stu[i].score1 + stu[i].score2 + stu[i].score3)/3;
	}
	for (i = 0; i < 3; i++)
	{
		printf("%s平均成绩:%.2f分\n",stu[i].name,stu[i].avge);
	}
	//输出最高分的成绩和姓名
	int j;
	struct student max;
	max = stu[0];
	for (j = 1; j < 10; j++)
	{
		if (max.avge<stu[j].avge)
		{
			max = stu[j];
		}
	}
	printf("最高平均成绩是:\n");
	printf("%s %d %.2f %.2f %.2f %.2f",max.name,max.num,max.score1,max.score2,max.score3,max.avge);
}*/
//将一个正整数分解质因数。例如：输入90, 打印出90 = 2 * 3 * 3 * 5   ※
/*int main() {
	int n;
	printf("请输入一个正整数：");
	scanf("%d", &n);
	printf("%d = ", n);
	for (int i = 2; i <= n; i++) {
		while (n != i) { // 执行的条件必须是n与i不等，若相等则分解结束了
			if (n % i == 0) { // 若能整除则i为n的因子之一
				printf("%d * ", i); // 输出因子
				n = n / i; // 找到了一个因子i，则n/i缩小n继续寻找
			}
			else {
				break; // 不能整除则跳出本次循环，递增i进行下一轮
			}
		}
	}
	printf("%d\n", n); // 最后剩下的n不能整除i，所以它也为因子之一，所以最后输出
	return 0;
}*/
//编写函数写最大公因数和最小公倍数
/*int fun(int n, int m)
{
	int temp;
	int sum;
	sum = m * n;
	while (m)
	{
		temp = n % m;
		n = m;
		m = temp;
	}
	printf("最大公因数:%d\n最小公倍数:%d",n,sum/n);
}
void main()
{
	int n, m;
	scanf("%d%d",&n,&m);
	fun(n, m);
}*/
//sn=a+aa+aaa+aaaa+?
/*int fun(int n, int a)
{
	int i, temp = 0, sum = 0;
	for (i = 1; i <= n; i++)
	{
		temp = temp * 10 + a;
		sum += temp;
	}
	printf("%d", sum);
}
void main()
{
	int n, a;
	scanf("%d%d", &n, &a);
	fun(n, a);

}*/
//判断素数
/*int myfun(int n)
{
	int i,flag=1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	}
	if (n == i)
		flag = 1;
	if (flag == 1)
		printf("yes");
	else
		printf("no");

}
void main()
{
	int m, n;
	scanf("%d%d",&m,&n);
	int z;
	z = m + n;
	myfun(z);

}*/
//将字符串的字符逆序
/*void main()
{
	char a[20] = { "i love china" };
	int i = strlen(a);
	for (i = 11; i >= 0; i--)
		printf("%c",a[i]);
}*/
//将N行N列的数组逆序存放
/*void main()
{
	int array[4][4] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 }, i, j;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
			printf("%3d", array[i][j]);
		printf("\n");
	}
	printf("逆序后:\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 3; j >= 0; j--)
			printf("%3d", array[i][j]);
		printf("\n");
	}
}*/
/*void main()
{
	int a, b, c,t;
	scanf("%d%d%d",&a,&b,&c);
	//交换
	t = b;
	b = a;
	a = c;
	c = t;
	printf("%d,%d,%d",a,b,c);
}*/
//对15个数进行小到大排序
/*void main()
{
	int a[15] = { 2,3,5,3,8,5,6,9,14,15,17,24,47,57,24 };
	int i, j,temp;
	for (i = 1; i < 15; i++)//排序14次
	{
		for (j = 1; j < 15  - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				temp = a[j];
				a[j] = a[j + 1];
				a[j+1] = temp;
			}
		}
	}
	for (i = 0; i < 15; i++)
		printf("%d ",a[i]);
}*/
//正整数是5和7的正倍数 是yes 否no
/*void main()
{
	int n;
	scanf("%d",&n);
	int i,j,flag=0;
	if (n % 5 == 0 && n % 7 == 0)
	{
		if (((n / 5) > 0) && (n / 7 > 0))
			flag = 1;
	}
	if (flag == 1)
		printf("yes");
	else
		printf("no");
}*/
//编程实现一元二次方程的根
/*void main()
{
	float x1, x2;
	int a, b, c;
	scanf("%d%d%d",&a,&b,&c);
	if ((b * b - 4 * a * c) >= 0)
	{
		x1 = 1.0*( - 1 * b + sqrt(b * b - 4 * a * c)) / 2;
		x2 = 1.0 * (-1 * b - sqrt(b * b - 4 * a * c)) / 2;
		printf("根:%.2f,%.2f",x1,x2);
	}
	else
		printf("该方程无根\n");
}*/
//输入数字转英文
/*char fun(int n)
{
	switch (n)
	{
	case 0:printf("zero "); break;
	case 1:printf("one "); break;
	case 2:printf("two "); break;
	case 3:printf("three "); break;
	case 4:printf("four "); break;
	case 5:printf("five "); break;
	case 6:printf("six "); break;
	case 7:printf("eleven "); break;
	case 8:printf("eight "); break;
	case 9:printf("nine "); break;

	}
}
void main()
{
	int n, i = 0;
	char a[100];
	gets(a);
	for (i = 0; a[i] != '\0'; i++)
	{
		fun(a[i]-48);
	}
	
}*/
//10个学生的平均分最高分最低分
/*void main()
{
	int a[10], i;
	for (i = 0; i < 10; i++)
	{
		scanf("%d",&a[i]);
	}
	//平均分
	float average = 0.0;
	for (i = 0; i < 10; i++)
	{
		average += a[i];
	}
	average=1.0*average / 10;
	printf("average:%.2f\n",average);
	//最高分
	int max = a[0];
	for (i = 1; i < 10; i++)
	{
		if (max < a[i])
			max = a[i];
	}
	printf("max: %d\n",max);
	//最低分
	int min = a[0];
	for (i = 1; i < 10; i++)
	{
		if (min > a[i])
			min > a[i];
	}
	printf("min: %d\n", min);

}*/
//冒泡排序 4，5，2，10，7，1，8，3，6，9 小到大
/*void main()
{
	int a[9] = { 4,5,10,7,1,8,3,6,9 };
	int i,j,t;
	for (i = 0; i < 8; i++)
	{
		for (j = 0; j < 9 - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	for (i = 0; i < 9; i++)
		printf("%d ",a[i]);
}*/
//1-5阶乘之和
/*int fun(int n)
{
	int i, sum = 1;
	for (i = 1; i <= n; i++)
	{
		sum = sum * i;
	}
	return sum;
}
void main()
{
	int i,sum=0;
	for (i = 1; i <= 5; i++)
	{
		sum += fun(i);
	}
	printf("%d",sum);
}*/
//输入一行字符统计英文,空格 数字 其他
/*void main()
{
	char c;
	int letter = 0, kong = 0, shu = 0, qita = 0;
	while ((c = getchar()) != '\n')
	{
		if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
			letter++;
		else if (c == ' ')
			kong++;
		else if (c >= '0' && c <= '9')
			shu++;
		else
			qita++;
	}
	printf("数字:%d 空格:%d 英文:%d 其他:%d ",shu,kong,letter,qita);
}*/
//计算三角型面积
/*void main()
{
	int r,h;
	double s;
	scanf("%d%d",&r,&h);
	s = 1.0 * r * h / 2;
	printf("%.2f",s);
}*/
//e=1+1/1!+1/2!+...+1/n!;
/*int fun(int n)
{
	int i,sum=1;
	for (i = 1; i <= n; i++)
	{
		sum = sum * i;
	}
	return sum;
}
int main()
{
	int n,i;
	scanf("%d",&n);
	double term,sum = 1;
	for (i = 1; i <= n; i++)
	{
		term = 1.0 / fun(i);
		sum += term;
	}
	printf("%.2f",sum);
}*/
//求最小公倍数
/*void main()
{
	int n, m, r;
	scanf("%d%d", &n, &m);
	int num = n * m;
	while (m)
	{
		r = n % m;
		n = m;
		m = r;
	}
	printf("%d",num/n);
}*/
//输入字符串,逆序输出
/*void main()
{
	char c;
	int i;
	char a[30];
	gets(a);
	for (i = 0; a[i] != '\0'; i++);
	for (i = i - 1; i >= 0; i--)
		printf("%c", a[i]);
}*/
//PTA 4个数比大小------------------------------------------------------------------
/*void main()
{
	int a,b,c,d;
	scanf("%d,%d,%d,%d", &a, &b, &c,&d);
	if ((a > b) && (a > c) && (a > d))
		printf("最大值是%d", a);
	if ((b > a) && (b > c) && (b > d))
		printf("最大值是%d",b);
	if((c>a)&&(c>b)&&(c>d))
		printf("最大值是%d", c);
	if((d>a)&&(d>b)&&(d>c))
		printf("最大值是%d", d);
}*/
//键盘输入一个字符判断类型
/*void main()
{
	char c;
	scanf("%c",&c);
	if (c >= 'A' && c <= 'Z')
		printf("大写字母");
	else if (c >= 'a' && c <= 'z')
		printf("小写字母");
	else if (c >= '0' && c <= '9')
		printf("数字");
	else
		printf("其他类型");
}*/
//分段函数
/*void main()
{
	double x,y;
	scanf("%lf",&x);
	if (x < 0)
		y = x * x;
	else if ((0 <= x) && (x < 10))
		y = 2 * x - 1;
	else if (x >= 10)
		y = 3 * x - 11;
	printf("%.2f",y);
}*/
//饮酒驾车
/*void main()
{
	int n;
	scanf("%d",&n);
	if ((n > 20) && (n < 80))
		printf("A");
	else if (n >= 80)
		printf("B");
	else printf("NOT");
}*/
//判断闰年
/*void main()
{
	int n;
	scanf("%d",&n);
	if (((n % 4 == 0) && (n % 100 != 0)) || n % 400 == 0)
		printf("yes");
	else
		printf("no");
}*/
//百分制成绩
/*void main()
{
	int n;
	scanf("%d",&n);
	if (n >= 0 && n <= 100)
	{
		if (n >= 90)
			printf("A");
		else if ((n >= 80) && (n <= 89))
			printf("B");
		else if ((n >= 70) && (n < 79))
			printf("C");
		else if ((n >= 60) && (n <= 69))
			printf("D");
		else if (n < 60)
			printf("E");
	}
	else
		printf("输入成绩有误");
}*/
/*void main()
{
	int n;
	scanf("%d",&n);
	if (n >= 0 && n <= 100)
	{
		switch (n / 10)
		{
		case 10:
		case 9:printf("A"); break;
		case 8:printf("B"); break;
		case 7:printf("C"); break;
		case 6:printf("D"); break;
		default:printf("E"); break;
		}
	}
	else
		printf("输入成绩有误");
}
*/
//月份对应季度
/*void main()
{
	int m;
	scanf("%d", &m);
	if (m >= 1 && m <= 12)
	{
		if (m >= 3 && m <= 5)
			printf("第一季度");
		else if (m >= 6 && m <= 8)
			printf("第二季度");
		else if (m >= 9 && m <= 11)
			printf("第三季度");
		else if (m == 12 || m == 1 || m == 2)
			printf("第四季度");
	}
	else
		printf("输入有误");
}*/
//判断奇偶
/*void main()
{
	int a;
	scanf("%d",&a);
	if (a % 2 == 0)
		printf("%d是偶数", a);
	else
		printf("%d是奇数",a);
}*/
//给3位数 拆解
/*void main()
{
	int n;
	scanf("%d",&n);
	printf("%d,%d,%d",n/100,n/10%10,n%10);
}*/
//数字原样输出
/*void main()
{
	int digit, number, power, t;
	printf("输入:\n");
	scanf("%d",&number);
	number = number < 0 ? -number : number;
	power = 1;
	t = number / 10;
	while (t)
	{
		power *= 10;
		t /= 10;
	};
	printf("the digite are:\n");
	while (number)
	{
		digit = number  / power;
		printf("%d",digit);
		number = number % power;
		power /= 10;
	}
}*/
//八进制转10进制
/*void main()
{
	char* p, s[6];
	int n;
	p = s;
	gets(p);
	n = *p - '0'; printf("%d\n",n);
	while (*(++p) != '\0')
		n = n * 8 + (*p) - '0';
	printf("%d",n);
}*/
//课本案例  判断单词个数
/*void main()
{
	char c;
	char a[100];
	int num = 0, word = 0;
	while ((c = getchar()) != '\n')
	{
		//当前字符是空的 没新单词
		if (c == ' ')
			word = 0;
		else if (word == 0)//当前字符不是空 前面是空 新单词出现
		{
			word = 1;
			num++;
		}
	}
	printf("单词个数:%d",num);
}*/
//数组逆序
/*void main()
{
	int a[5][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16},{17,18,19,20} };
	int b[4][5];
	int i, j;
	//原样输出
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d",a[i][j]);
		}
		printf("\n");
	}
	//变换
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 4; j++)
		{
			b[j][i] = a[i][j];
		}
	}
	//输出
	printf("---------------->\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5; j++)
			printf("%3d",b[i][j]);
		printf("\n");
	}
}*/
//计算2/1 -3/2 5/3 -8/5...的前n项和
/*void main()
{
	float sum = 0, term, fenzi = 2, fenmu = 1,sign=1;
	int t, i;
	int n;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		term = fenzi / fenmu;
		sum = sum + term*sign;
		sign = -sign;
		t = fenzi;
		fenzi = fenzi + fenmu;
		fenmu = t;
	}
	printf("%.2f", sum);
}*/
//a+aa+aaa+aaaa+...
/*void main()
{
	double n, a, sum = 0,term=0;
	int i;
	scanf("%lf %lf",&a,&n);
	for (i = 0; i < n; i++)
	{
		term = term* 10 + a;
		sum += term;
	}
	printf("sum=%.0f",sum);
}*/
//求m-n的完数
/*int main()
{
	int num1 = 0, num2 = 0, sum = 0, t = 0, flag = 1;
	int str[100];
	scanf("%d %d", &num1, &num2);
	for (int i = num1; i <= num2; i++) {
		sum = 1; t = 0;
		for (int j = 2; j < i; j++) {
			if (i % j == 0) {
				sum += j;
				str[t++] = j;
			}
		}
		if (sum == i && i > 0) {
			flag = 0;
			printf("%d = 1", i);
			for (int i = 0; i < t; i++) {
				printf(" + %d", str[i]);
			}
			printf("\n");
		}
	}
	if (flag)  printf("None\n");
	return 0;
}*/
/*void main()
{
	float eps;
	scanf("%f", &eps);
	float i = 1, sum = 0, term=0;
	int sign = 1;
	//判别
	do
	{	
		term = 1.0 / i;
		sum = term*sign + sum;
		i = i + 3;
		sign = -sign;
	}while (fabs(term) > eps);
	printf("%f",sum);
}*/
//青蛙深度为high的井,白天爬up米晚上下滑down米,几天出洞口
/*void main()
{
	int high, up, down,i=0,sum=0;
	scanf("%d%d%d",&high,&up,&down);
	while (1)
	{
		sum = sum + up;
		i++;//天数
		if (sum >= high)
			break;
		sum = sum - down;
	}
	printf("%d\n",i);
}*/
//数字最后几个数字逆序
/*void main()
{
	int A[500];
	int N, M, i, j;
	scanf("%d%d", &N, &M);
	if ((N >= 1 && N <= 100) && (M >= 0))
	{
		for (i = 0; i <= N - 1; i++)
		{
			scanf("%d", &A[i]);
		}
		j = i;//数组个数
		for (i = 0; i < N; i++)
		{
			A[j++] = A[i];
		}
		//输出
		for (i = N - M; i < N + N - M; i++)
		{
			if (i == N + N - M - 1)
			{
				printf("%d", A[i]);
				break;
			}
			printf("%d ", A[i]);
		}
	}
}*/
/*int main()
{
	int A[500];
	int N, M,i;
	scanf("%d%d", &N, &M);
	if ((N >= 1 && N <= 100) && (M >= 0))
	{
		for (i = 0; i < N; i++)
		{
			scanf("%d", &A[i]);
		}
		for (i = N - 1; i >= 0; i--)
		{
			A[i + M] = A[i];
		}
		for (i = 0; i < M; i++)
		{
			A[M - i - 1] = A[N + M - i - 1];
		}
		for (i = 0; i < N; i++)
		{

			if (i == N - 1)
			{
				printf("%d", A[i]);
				break;
			}printf("%d ", A[i]);
		}
	}
}*/
//求最大值和下标
/*void main()
{
	int a[200];
	int i,n;
	scanf("%d",&n);
	for (i = 0; i < n; i++)
		scanf("%d",&a[i]);
	int max = a[0],temp=0;
	for (i = 1; i < n; i++)
	{
		if (max < a[i])
		{
			temp = i;
			max = a[i];
		}
	}
	printf("%d %d",max,temp);
}*/
//求二维数组及下标
/*void main()
{
	int n, m, arr1[50][50] = {0}, arr2[50] = { 0 }, i, j;
	scanf("%d%d",&n,&m);
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
			scanf("%d",&arr1[i][j]);
	}
	//test
	int temp[50],t;
	for (i = 0; i < n; i++)
	{
		temp[i] = arr1[i][0], t = 0;
		for (j = 0; j < m; j++)
		{
			if (temp[i] > arr1[i][j])
			{
				temp[i] = arr1[i][j];
				arr2[i] = t;
			}
			t++;
		}
	}
	printf("一维数组arr2：");
	for (i = 0; i < n; i++)
		printf("%d ", arr2[i]);
}*/
//5x5对角线和和对角线偶数下标的积
/*void main()
{
	int a[5][5],i,j;
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 5; j++)
			scanf("%d",&a[i][j]);
	}
	//1对角线
	int sum1 = 0;int sum2 = 1;
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 5; j++)
		{
			if ((i == j)||(i+j==4))
			{
				sum1 += a[i][j];
				//判断第2问
				if (i % 2 == 0 && j % 2 == 0)
				{
					sum2 *= a[i][j];
				}
			}
		}
	}
	printf("sum=%d product=%d",sum1,sum2);
}*/
/*void main()
{
	char s[100],b[100],c;
	gets(s);
	c = getchar();
	int i,n,j;
	n = strlen(s);
	int count = 0;
	//整理好的数组给b
	for (i = 0,j=0; i < n; i++)
	{
		if (c!=s[i])
		{
			if (s[i] == ' ')
				count++;
			b[j++] = s[i];
		}
	}
	b[j] = '\0';//j是字符个数
	for (i = 0; b[i] != '\0'; i++);
	if (i == 0)
	{
		printf("NULL");
	}
	else
		puts(b);
}*/
//统计字符
/*void main()
{
	char s[80]; int a[10] = { 0 };
	gets(s);
	int i;
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] >= '0' && s[i] <= '9')
		{
			a[s[i] - '0']++;
		}
	}
	int count = 0,flag=0;
	for (i = 0; i < 10; i++)
	{
		if (a[i] != 0)
		{
			flag = 1;
			break;
		}
	}
	if (flag == 1)
	{
		for (i = 0; i < 10; i++)
		{

			if (a[i] != 0)
			{

				if (count != 0 && count % 3 == 0)
				{
					printf("\n");
				}
				printf("%d:%d次 ", i, a[i]);
				count++;
			}
		}
	}
	else
		printf("10个数字字符都没出现过");
}*/
//矩阵对角线交换
/*void main()
{
	int a[100][100];
	int n, i, j;
	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			scanf("%d", &a[i][j]);
		}
	}
	int temp;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (i == j)
			{
				temp = a[i][j];
				a[i][j] = a[i][n - 1 - i];
				a[i][n - 1 - i] = temp;
			}
		}
	}
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (j == n - 1)
			{
				printf("%d", a[i][j]);
				break;
			}
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}	
}*/
//课后习题输出平行4边形------------------------------------------------------------------------
/*void main()
{
	int i, j;
	for (i = 0; i <= 4; i++)
	{
		for (j = 0; j <= 3-i; j++)
			printf(" ");
		for (j = 0; j <= 4; j++)
			printf("*");
		printf("\n");
	}
}*/
//1900-2000的闰年
/*void main()
{
	int i, j;
	for (i = 1900; i <= 2000; i++)
	{
		if ((i % 4 == 0 && i % 100 != 0) || (i % 400 == 0))
			printf("%d\n",i);
	}
}*/
//逆序输出
/*char fun(int n)
{
	char ch;
	if (n == 1)
	{
		ch = getchar();
		putchar(ch);
	}
	else
	{
		ch = getchar();
		fun(n-1);
		putchar(ch);
	}
}
void main()
{
	int n = 5;
	fun(n);
}*/
//回文
/*void main()
{
	char a[20], c[20];
	gets(a);
	int j=0,i, flag = 1,n;
	i = strlen(a);
	n = i;
	i = i - 1;
	for (j=0; i >= 0;j++, i--)
	{
		c[j] = a[i];
	}
	for (i = 0; i < n; i++)
	{
		if (a[i] != c[i])
		{
			flag = 0;
			break;
		}
	}
	if (flag == 1)
	{
		printf("%s", a);
	}
	else
		printf("no");
}*/
/*void main()
{
	char a[20],*p,*q;
	int flag = 0, i;
	gets(a);
	q = a+strlen(a)-1;
	p = a;
	for (; *(p) == *(q); p++, q--)
	{
		flag = 1;
	}
	if (flag == 1)
		printf("yes");
	else
		printf("no");
}*/
//数字转字符串
/*void main()
{
	char a[20];
	int n,i=0;
	scanf("%d",&n);
	while (n)
	{
		a[i++]=n % 10+'0';
		n = n / 10;
	}
	i = i - 1;
	for (; i >= 0; i--)
	{
		printf("%c",a[i]);
	}
}*/
//抓小偷
/*void main()
{
	int n = 0;
	for (n = 'a'; n <= 'd'; n++)
	{
		if ((n != 'a') + (n == 'c') + (n == 'd') + (n != 'd') == 3)
			printf("%c",n);
	}

}*/
//猜电话
/*void main()
{
	int n, m, temp;;
	for (n = 0; n <= 9; n++)
	{
		for (m = 0; m <= 9; m++)
		{
			temp = 60000 + (n * 1000) + (m * 100) + 42;
			if (temp % 57 == 0 && temp % 67 == 0)
			{
				printf("%d\n",temp);
			}
		}
	}
}*/
//递归求f(n)=1^2+2^2+...n^2;
/*int fun(int n)
{
	if (n == 1)
		return 1;
	else
	{
		return n * n;
	}
}
void main()
{
	int i,n,sum=0;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		sum += fun(i);
	}
	printf("%d",sum);
}*/
//数组下三角乘以n
/*#define M 3
#define N 4
void fun(int a[][N], int n);
void fun(int a[][N], int n)
{
	int i, j;
	for (i = 0; i < M; i++)
	{
		for (j = 0; j <=i; j++)
		{
			a[i][j] = a[i][j] * n;
		}
	}
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d", a[i][j]);
		}
		printf("\n");
	}
}
void main()
{
	int a[M][N] = {1,2,3,4,5,6,7,8,9,10,11,12}, i, j, n;
	//输入n
	scanf("%d",&n);
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d", a[i][j]);
		}
		printf("\n");
	}
	printf("----------->\n");
	fun(a, n);
}*/
//绝对素数,由素数组成的素数
/*int fun(int n)
{
	int i,flag=1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	}
	if (flag == 1)
	{
		return 1;
	}
	else
		return 0;
}
int func(int n)
{
	int m,flag=0;
	m = n % 10;
	if (fun(m) == 1)
	{
		n = n / 10;
		m = n % 10;
		if (fun(m) == 1)
		{
			flag = 1;
		}
	}
}
int main()
{
	int n,m,flag=1;
	//输入数字
	//scanf("%d", &n);
	for (n = 10; n <= 99; n++)
	{
		if (fun(n) == 1)
		{
			if (func(n) == 1)
				printf("%3d",n);
		}
	}
}*/
//数组a大于-20的元素依次放到数组b中，数组b的元素由大到小放到数组C中,，函数返回数组b中的个数
/*int fun2(int a[], int n, int b[], int c[])
{
	//n=7;
	int i;
	//输出a的元素
	for (i = 0; i < 7; i++)
	{
		printf("%4d",a[i]);
	}
	printf("\n检测B内容----->\n");
	//功能一
	int j = 0;//j的下标
	for (i = 0; i < 7; i++)
	{
		if (a[i] > -20)
		{
			b[j++] = a[i];
		}
	}
	//检测功能一
	int k;
	k = j;
	for (j = 0; j < k; j++)
	{
		printf("%4d",b[j]);
	}
	printf("\nC排序----->\n");
	//功能二
	int h,temp;
	for (j = 0; j < k - 1; j++)
	{
		for (h = 0; h < k - 1 - j; h++)
		{
			if (b[h] < b[h + 1])
			{
				temp = b[h];
				b[h] = b[h + 1];
				b[h + 1] = temp;
			}
		}
	}
	int y=0;
	for (j=0;j<k;j++)
	{
		c[y++] = b[j];
	}
	for (y = y - 1; y >= 0; y--)
		printf("%4d",c[y]);
	printf("\nB元素个数----->\n");
	//功能三
	int count = k;
	return count;
}
void main()
{
	int a[7] = {-40,3,0,5,-10,10,20}, b[7], c[7], n, i;
	printf("%d\n",fun2(a, 7, b, c)); 
}*/
//删除指定字符串,从第几个删除几个
/*char* fun(char* str, int i, int n)
{
	int num = i - 1;
	for (; *str != '\0'; str++)
		*(str + num) = *(str + num + n);
	*str = '\0';
	return str;
}
void main()
{
	char str[100] = { 0 };
	int i, n;
	printf("array:\n");
	gets(str);
	printf("输入i和n：\n");
	scanf("%d%d",&i,&n);
	fun(str, i, n);
	printf("%s",str);
}*/
//字符串删除 先判断是否相等,相等后标志位为1，指针指向后覆盖
/*char* fun(char str[], char a[], int n)
{
	int i=0, j=0,k=0;
	while(str[i] != '\0')
	{
		if (str[i] == a[j])
		{
			if (strncmp(str + i, a, n) == 0)
				break;
		}
		i++;
	}
	//printf("%c",str[i+n]);显示要删除的下一个字符
	strcpy(str+i,str+i+n);//str[i]=a[0];str[i+n]=a[n-1]
	puts(str);
}
void main()
{
	char str[100] = { 0 };
	printf("array:\n");
	gets(str);
	char a[10];
	printf("输入删除字符串：\n");
	gets(a);
	int n = strlen(a);
	fun(str,a,n);
}*/
//鸡兔同笼
/*void main()
{
	//m是总个数 n是脚数 i鸡 j兔
	int m, n,i,j;
	scanf("%d%d",&m,&n);
	int flag = 1;
	for (i = 0; i <= m; i++)
	{
		j = m - i;
		if ((i * 2 + 4 * j == n) && (i + j == m))
		{
			flag = 1;
			break;
		}
		else
			flag = 0;
	}
	//判断标志位
	if (flag == 1)
	{
		for (i = 0; i <= m; i++)
		{
			j = m - i;
			if ((i * 2 + 4 * j == n) && (i + j == m))
				printf("%d %d\n", i, j);
		}
	}
	else
		printf("No Answer");
}*/
/*int fun(char s[])
{
	char* p = s;
	while (*p != '0')
		p++;
	return (p - s);
}
void main()
{
	printf("%d",fun("0abcdef"));

}*/
//判断素数
/*int fun(int n)
{
	int i,flag=1;
	if (n == 1)
		flag = 0;
	else
	{
		for (i = 2; i < n; i++)
		{
			if (n % i == 0)
			{
				flag = 0;
				break;
			}
		}
	}
	return flag;
}
void main()
{
	int m, n,i;
	scanf("%d%d",&m,&n);
	for (i = m; i <= n; i++)
	{
		if (fun(i) == 1)
			printf("%d ",i);
	}
}*/
//字符串排序
/*int main()
{
	int n;
	scanf("%d", &n);
	char c[20][21];
	gets(c[0]);//gets用法,比如输入3后空格 按回车后会把回车作为字符放入c[0]中
	for (int i = 0; i < n; i++)
	{
		gets(c[i]);
	}
	char temp[20];
	for (int i = 0; i < n - 1; i++)//循环次数
	{
		for (int j = i + 1; j < n; j++)//选择排序
		{
			if (strcmp(c[i], c[j]) > 0)//c[i]<c[j]时交换
			{
				strcpy(temp, c[i]);
				strcpy(c[i], c[j]);
				strcpy(c[j], temp);
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		puts(c[i]);
	}
	return 0;
}*/
//数字转字符串
/*void convert(int n)
{
	int i;
	if ((i = n / 10) != 0)
		convert(i);
	putchar(n % 10 + '0');
}
int main()
{
	int num;
	scanf("%d", &num);
	if (num < 0)
	{
		printf("-");
		num = -num;
	}
	convert(num);
	printf("\n");
	return 0;
}*/
//字符串去掉最大值
/*void main()
{
	char s[110], c;
	gets(s);
	c = getchar();
	int size = 0;
	char str[110];
	int i;
	for (i = 0; s[i] != '\0'; i++) {
		if (s[i] != c) {
			str[size++] = s[i];
		}
	}
	str[size] = '\0';
	if (strlen(str) == 0)
		printf("NULL");
	else//puts(str);	
	{
		for (i = 0; i < size; i++)
		{
			if (str[i] != c)
			{
				printf("%c", str[i]);
			}
		}
	}
}*/
//字符串去除特定字符
/*void main()
{
	char s[100],c;
	gets(s);
	c = getchar();
	int i,n,count=0;
	n = strlen(s);
	//统计等于查询字符的个数
	for (i = 0; i < n; i++)
	{
		if (s[i] == c)
		{
			count++;
		}
	}
	//
	if (count == n)
	{
		printf("NULL");
	}
	else
	{
		for (i = 0; i < n; i++)
		{
			if (s[i] == c)
				continue;
			else
				printf("%c", s[i]);
		}
	}
}*/
/*void main()
{
	char s[110], c, str[110];
	int j = 0;

	gets(s);
	c = getchar();
	int size = 0, count = 0, i;
	for (i = 0; s[i] != '\0'; i++) {
		if (s[i] != c)
		{
			str[size++] = s[i];//符合条件的赋值到str
		}
		else
			count++;//累计要删除的字符个数
	}
	str[size] = '\0';
	if (count == i)//总字符串个数=要删除的字符个数
		printf("NULL\n");
	else
	{
		for (i = 0; i < size; i++)
		{
			if (str[i] != c)//不等于删除的字符输出
			{
				printf("%c", str[i]);
			}
		}
		printf("\n");
	}
}*/
/*int main()
{
	char s[100], c;
	while (gets(s))
	{
		c = getchar();
		int size = 0;
		char str[100];
		int i;
		for (i = 0; s[i] != '\0'; i++)
		{
			if (s[i] != c)
			{
				str[size++] = s[i];
			}
		}
		str[size] = '\0';
		if (strlen(str) == 0)
		{
			printf("NULL\n");
			getchar();
		}
		else
		{
			puts(str);
			getchar();
		}
	}
}*/
//求cos
/*double funcos(double e, double x)
{
	double fenzi=1, fenmu=1,sum=1,term=1;
	int i,flag=-1,k = 2;
	while (term >= e)
	{
		//求分母
		for (i = 2; i <= k; i++)
			fenmu = fenmu * i;
		//求分子
		fenzi = pow(x, k);
		k += 2;
		term = fenzi / fenmu;
		sum = term * flag + sum;
		flag = -flag;
		fenmu = 1;
	}
	return sum;
}
void main()
{
	double e, x;
	scanf("%lf %lf",&e,&x);
	printf("cos(%.2f)=%.6f\n",x,funcos(e,x));
	return 0;
}*/
//字符串逆序
/*
void main()
{
	void inverse(char cstr[]);
	char str[80];
	gets(str);
	inverse(str);
	puts(str);
}
void inverse(char cstr[])
{
	char ct;
	int i, j;
	for (i = 0, j = strlen(cstr);i<j; i++, j--)
	{
		ct = cstr[i];
		cstr[i]=cstr[j-1];
		cstr[j - 1] = ct;
	}
}*/
//计算单词个数
/*#define N 20
int CountWords(char str[]);
int main()
{
	char str[50];
	gets(str);
	printf("Numbers of words=%d\n",
		CountWords(str));
	return 0;
}
int CountWords(char str[])
{
	int i, num;
	num = (str[0] != ' ') ? 1 : 0;
	for (i = 1;
		str[i] != '\0'; i++)
	{
		if (str[i] != '\0' &&	str[i - 1] == ' ' && str[i] != ' ')
		{
			num++;
		}
	}
	return num;
}*/
//将一字符串每一个单词的第一个字符转换为大写
/*void main()
{
	char s[100];
	gets(s);
	int i=0,word = 0;
	word = s[0] != ' ' ? 1 : 0;
	for (i = 1; s[i] != '\0'; i++)
	{
		if (s[i] != ' ' && s[i - 1] == ' ')
			if (s[i] >= 'a' && s[i] <= 'z')
				s[i] = s[i] - 32;
	}
	puts(s);
}*/
//输入字符串进行比较返回差值
/*int strcompare(char* str1, char* str2)
{
	int i = 0;
	if (*(str1+i) == *(str2+i))
	{
		i++;
	}
	return *(str1+i) - *(str2+i);
}
int main()
{
	char a[100];
	char b[100];
	gets(a);
	gets(b);
	printf("%d",strcompare(a, b));
}*/
//字符串排序
/*char proc(char a[])
{
	int count = 0,i,j;
	char t;
	//计算字符个数
	for (count = 0; a[count] != '\0'; count++);//a[count]
	//排序
	for (i = 0; i < count - 1; i++)
	{
		for (j = 0; j < count - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	//输出
	puts(a);

}
void main()
{
	char a[20];
	gets(a);
	proc(a);
}*/
//沙漏
/*int fun(int temp)
{
	int count = 0,k,j,i;
	for (i = temp; i >= 1; i--)
	
		for (j = 1; j <= 2 * i - 1; j++)
			count++;
	for (i = 2; i <= temp; i++)
	{
		for (j = 1; j <= 2 * i - 1; j++)
			count++;
	}
	return count;
}
void main()
{
	int i, j=0, k, count = 0;
	//正3角
	int a[50];
	int n,temp;
	char c;
	scanf("%d %c",&n,&c);//输入总*数
	//计算*个数
	for (i = 0; i < 50; i++)
	{
		a[j++] = fun(i);
	}
	for (i = 0; i < 50; i++)
	{
		if (n <= a[i])
		{
			temp = i;
			break;
		}
	}
	temp = temp - 1;
	//下3角
	for (i = temp; i >= 1; i--)
	{
		for (k = 1; k <= temp - i; k++)
			printf(" ");
		for (j = 1; j <= 2 * i - 1; j++)
		{
			count++;
			printf("%c",c);
		}
		printf("\n");
	}
	for (i = 2; i <= temp; i++)
	{
		for (k = 1; k <= temp - i; k++)
			printf(" ");
		for (j = 1; j <= 2 * i - 1; j++)
		{
			printf("%c",c);
			count++;
		}
		printf("\n");
	}
	//输出星数
	printf("%d",n-count);
}*/
/*int main()
{
	int i, j = 1, x = 0, y = 0, rest, N;
	char C;
	scanf("%d %c", &N, &C);
	while (2 * j * j - 1 <= N)//计算层数
	{
		j++;
	}
	j--;
	y = 2 * j - 1;
	rest = N - 2 * j * j + 1;//剩下字符的数量
	while (y > 0)//输出沙漏上半部分
	{
		for (i = 0; i < x; i++)
			printf(" ");
		for (i = 0; i < y; i++)
			printf("%c", C);
		printf("\n");
		x++;
		y -= 2;
	}
	x--;
	y += 2;
	while (x > 0)//输出沙漏下半部分
	{
		x--;
		y += 2;
		for (i = 0; i < x; i++)
			printf(" ");
		for (i = 0; i < y; i++)
			printf("%c", C);
		printf("\n");
	}
	printf("%d", rest);
	return 0;
}*/
// 日期//注意吞掉空格 和大括号
/*void main()
{
	char c, f;
	scanf("%c", &c);
	getchar();
	switch (c)
	{
	case 'm':printf("monday\n"); break;
	case 't':
	{
		printf("next:\n");
		scanf("%c", &c);
		if (c == 'u') { printf("tuesday\n"); break; }
		if (c == 'h') { printf("thursday\n"); break; }
	}
	case 'w':printf("wednesday\n"); break;
	case 'f':printf("friday\n"); break;
	case 's':
	{
		printf("next:\n");
		scanf("%c", &c);
		if (c == 'a') { printf("saterday\n"); break; }
		if (c == 'u') { printf("sunday\n"); break; }
	}

	default:printf("error");
	}
}*/
//对称矩阵采用函数
/*int fun(int a[][10], int n)
{
	int i, j,flag=1;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (a[i][j] != a[j][i])
			{
				flag = 0;
				break;
			}
		}
	}
	return flag;
}
void main()
{
	int a[10][10];
	int i, j,n;
	scanf("%d",&n);
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			scanf("%d",&a[i][j]);
		}
	}
	if (fun(a, n) == 1)
		printf("yes");
	else
		printf("no");
}*/
//冰雹猜想偶数除2，奇数*3+1
/*void main()
{
	int n,count=1;
	scanf("%d",&n);
	do
	{
		if (n % 2)
		{
			n = n * 3 + 1;
			printf("%d:%d\n",count++,n);
		}
		else
		{
			n = n / 2;
			printf("%d;%d\n",count++,n);
		}
	} while (n != 1);
}*/
/*void main()
{
	int n,i;
	scanf("%d",&n);
	for (i = 0;n!=1; i++)
	{
		if (n % 2)
		{
			n = n * 3 + 1;
			printf("%d\n",n);
			
		}
		else 
		{
			n = n / 2;
			printf("%d\n",n);
		}
	}
}*/
//求一堆数字的所有第二大奇数因子之和
/*void main()
{
	int n,a[10];
	a[0] = 147;
	scanf("%d", &n);
	int i;
	for (i = 0; i < n; i++)
	{
		scanf("%d",&a[i]);
	}
	//test
	int b[100];
	for (i = 0; i < n; i++)
	{
		b[i]=fun(a[i]);
	}
	//判断
	int sum = 0;
	for (i = 0; i < n; i++)
	{
		sum += b[i];
	}
	printf("%d",sum);
}
int fun(int n)
{
	int i, a[100], k = 0, count = 0;
	for (i = 1; i <= n; i++)
	{
		if (n % i == 0)
		{
			if (i % 2 != 0)
			{
				count++;
				a[k++] = i;
			}
		}
	}
	if (count == 1)
		return a[k - 1];
	else
		return a[k - 2];
}*/
//N阶右下角元素之和包括副对角线
/*int fun(int a[][4])
{
	int i, j;
	int sum = 0;
	for (i = 3; i >= 0; i--)
	{
		for (j = 3 - i; j <= 3; j++)
		{
			sum += a[i][j];
		}
	}
	printf("%d", sum);
}
void main()
{
	int i, j;
	int a[4][4] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
			printf("%4d",a[i][j]);
		printf("\n");
	}
	printf("-------->\n");
	fun(a);
}*/
//指针数组存放n个字符串
/*char fun(char a[][30], int n)
{
	int i,j;
	char b[30];
	for (i = 0; i < n-1; i++)
	{
		for (j = 0; j < n - i - 1; j++)
		{
			if (strcmp(a[j], a[j + 1]) > 0)
			{
				strcpy(b, a[j]);
				strcpy(a[j], a[j + 1]);
				strcpy(a[j + 1], b);

			}
		}
	}
}
void main()
{
	char a[5][30] = {"china","people","yes","abc","def"};
	fun(a,5);
	for (int i = 0; i < 5; i++)
		printf("%s\n",a[i]);
}*/
/*int fun(char a[][30], int n)
{
	char* p[5];
	int i,j;
	for (i = 0; i < n; i++)
	{
		p[i] = a[i];
	}
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - i - 1; j++)
		{
			if (strcmp(a[j], a[j + 1]) > 0)
			{
				strcpy(p, a[j]);
				strcpy(a[j], a[j + 1]);
				strcpy(a[j + 1], p);
			}
		}
	}

}
void main()
{
	int i;
	char a[][30] = { "abc","cef","bgt","oip","vip" };
	fun(a, 5);
	for (i = 0; i < 5; i++)
	{
		printf("%s\n",a[i]);
	}
}
*/
//test
/*int del(char s[][10], int n)
{
	int i, j;
	char a[10][10];
	int flag=1;
	for (i = 0; i < 5; i++)
	{
		flag = 1;
		for (j = i + 1; j < 5; j++)
		{
			if (strcmp(s[i], s[j]) == 0)
			{
				flag = 0;
				break;
			}
		}
		if (flag == 1)
		{
			printf("%s\n",s[i]);
		}
	}
}
void main()
{
	char s[][10] = {"shanghai","beijing","nanjing","shanghai","nanjing"};
	del(s, 5);
}*/
//字符串去掉重复的字符串
/*int del(char s[][10], int n)
{
	int i, j, k;
	for (i = 0; i < n; i++)
	{
		j = i + 1;
		while (j < n)
			if (strcmp(s[i], s[j]) == 0)
			{
				for (k = j; k < n; k++)
					strcpy(s[k], s[k + 1]);
				s[k][0] = 0;
				n--;
			}
			else
				j++;
	}
	return n;
}
void main()
{
	char line[10][10]={ "shanghai","beijing","nanjing","shanghai","nanjing" };
	int k, n = 5;
	n = del(line, n);
	for (k = 0; k < n; k++)
	{
		puts(line[k]);
	}
}*/
//打鱼晒网
/*void main()
{
	int n;
	scanf("%d",&n);
	if (n % 5 >= 1 && n % 5 <= 3)
		printf("打鱼");
	else
		printf("晒网");
}*/
//将ss指向的字符串下标为奇数的字母转大写
/*void fun(char* ss)
{
	char* p;
	p = ss;
	while (*p != '\0')
	{
		if ((p - ss) % 2 != 0 && (p - ss) != 0)
		{
			if ((*p) >= 'a' && (*p) <= 'z')
			{
				*p = *p - 32;
			}
		}
		p++;
	}
	puts(ss);
}
void main()
{
	char ss[100];
	gets(ss);
	fun(ss);
}*/
/*
int main()
{
	int i, j, n;
	scanf("%d",&n);//test
	i = 1;
	while (i <= n)//test
	{
		for (j = 1; j <= n; j++)
			if (i == 1 || j == 1 || i == n || j == n)
				printf(" *");
			else//test
				printf(" 0");
		printf("\n");
		i++;
	}
}
*/
/*void main()
{
	char str[81];
	int i, j, n;
	gets(str);//test
	n = strlen(str);
	i = 0;//test
	while (str[i + 1] != '\0')
	{
		for (j = n; j > i; j--)
		{
			str[j + 1] = str[j];
		}
		str[j + 1] = '*';
		n++;//test
		i = i + 2;
	}
	printf("%s\n",str);
}*/
//指针交换
/*void fsort(char* color[], int n)
{
	int i,j;
	char *temp;
	for (i = 0; i < n-1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (strcmp(color[j], color[j + 1]) > 0)
			{
				temp = color[j];
				color[j] = color[j + 1];
				color[j + 1] = temp;
			}
		}
	}
}

int main(void)
{
	int i;
	char* pcolor[] = { "red", "blue", "yellow", "green", "black" };
	void fsort(char* color[], int n);

	fsort(pcolor, 5);  
	for (i = 0; i < 5; i++)
		printf("%s ", pcolor[i]);
	printf("\n");
	return 0;
}*/


/*void main()
{
	int a, b, * p1, * p2, * p3;
	scanf("%d%d",&a,&b);//2 3
	p1 = &a; p2 = &b;
	if(a<b)
	{
		p3 = p1;
		p1 = p2;
		p2 = p3;
	}
	printf("%d %d \n%d %d ",a,b,*p1,*p2);// 2 3 3 2
}*/

//求e^x 分子 分母  结构 分子分母提前定义 循环语句内累加 分子分母的运行规律
/*void main()
{
	float sum = 1, item, fm, x, fz, i = 1;
	scanf("%f",&x);
	fz = x, fm = 1;
	item = fz / fm;
	while (item >= 1e-6)
	{
		sum += item;
		fz = fz * x;
		i++, fm = fm * i;
		item = fz / fm;
	}
	printf("%f",sum);
}*/
//求完数
/*int fun(int x)
{
	int i = 1,sum=0;
	for (i = 1; i < x; i++)
	{
		if (x % i == 0)
		{
			sum += i;
		}
	}
	if (sum == x)
		return 1;
	else
		return 0;
}
void main()
{
	int i;
	for (i = 1; i <= 1000; i++)
	{
		if (fun(i))
			printf("%d\n",i);
	}
}*/
//数字无重复
/*void main()
{
	int count = 0;
	int i, j, k;
	for (i = 1; i <= 4; i++)
	{
		for (j = 1; j <= 4; j++)
		{
			for (k = 1; k <= 4; k++)
			{
				if (i != j && i != k && j != k)
				{
					count++;
					printf("%4d ",i*100+j*10+k);
				}
			}
		}
	}
	printf("\n%d",count);
}*/
//求字符的个数
/*int fun(char a[])
{
	int count = 0;
	for (int i = 0; a[i] != '\0'; i++)
	{
		count++;
	}
	printf("%d",count);
}
void main()
{
	char a[80];
	gets(a);
	fun(a);
}*/
/*void main()
{
	int a[100];
	int b[50], c[50];//b奇数,c偶数
	int i, j, k, m;
	int temp, count = 0;
	//放数组
	for (i = 0; i < 100; i++)
	{
		a[i] = rand() % 100;
	}
	//放奇数组
	for (i = 1; i < 100; i += 2)
	{
		b[count++] = a[i];
	}
	//排序
	k = count;//5个数
	for (i = 0; i < count - 1; i++)
	{
		for (j = 0; j < count - 1 - i; j++)
		{
			if (b[j] > b[j + 1])
			{
				temp = b[j];
				b[j] = b[j + 1];
				b[j + 1] = temp;
			}
		}
	}
	//放奇数组
	count = 0;
	for (i = 2; i < 100; i += 2)
	{
		c[count++] = a[i];
	}
	//排序
	k = count;//4个数
	for (i = 0; i < count - 1; i++)
	{
		for (j = 0; j < count - 1 - i; j++)
		{
			if (c[j] > c[j + 1])
			{
				temp = c[j];
				c[j] = c[j + 1];
				c[j + 1] = temp;
			}
		}
	}
	k = 0, m = 0;
	for (i = 1; i < 100; i++)
	{
		if (i % 2 == 0)//偶数
		{
			a[i] = c[k++];
		}
		else
			a[i] = b[m++];
	}
	for (i = 0; i < 100; i++)
	{
		if (i % 5 == 0)
			printf("\n");
		printf("%3d", a[i]);
	}
}*/
//小球弹跳
/*void main()
{
	float sum = 100,count=100;
	int i;
	for (i = 1; i <= 10; i++)
	{
		count = count / 2;
		sum = sum + count * 2;
	}
	printf("第10次的高度%f\n", count);
	printf("总路程:%f",sum);
}*/
//后几个数字移到前面
/*int fun(int* a, int n)//n=5
{
	int i, j, t;
	t = *(a + n-1);
	for (i = n-2; i>=0; i--)
	{
		*(a + i + 1) = *(a + i);
	}
	*a = t;
}
void main()
{
	int a[5] = { 1,2,3,4,5 };
	int i,n;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	fun(a, 5);
	for (i = 0; i < 5; i++)
		printf("%d ",a[i]);
}*/
#define _CRT_SECURE_NO_WARNINGS 
//tips t自动更新+2;
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<time.h>
//1-4不同数字的组合t1
/*void main()
{
	int i,j,k,a[100],n=0;
	for(int i=1;i<=4;i++)
	{
		for(int j=1;j<=4;j++)
		{
			for(int k=1;k<=4;k++)
			{
				if(i!=j&&i!=k&&j!=k)
				{
					a[n]=i*100+j*10+k;
					n++;
				}
			}
		}
	}
	printf("共有%d\n个",n);
	printf("分别是以下数列");
	for(int i=0;i<n;i++)
	{
		printf("%d\n",a[i]);
	}
}*/
//计算奖金额t2
/*void main()
{
	double i,count;
	printf("请输入奖金金额万元:");
	scanf("%lf",&i);
	if(i<=10)
	{
		count=i*(1+0.1);
		printf("奖金为%.3lf\n",count);
	}
	else if(i>10&&i<=20)
	{
		count=10*0.1+(i-10)*0.75+i;
		printf("奖金为%.3lf\n",count);
	}
	else if(i>20&&i<=40)
	{
		count=10*0.1+10*0.75+(i-20)*0.5+i;
		printf("奖金为%.3lf\n",count);
	}
	else if(i>40&&i<=60)
	{
		count=10*0.1+10*0.75+20*0.5+(i-40)*0.3+i;
		printf("奖金为%.3lf\n",count);
	}
	else if(i>60&&i<=100)
	{
		count=10*0.1+10*0.75+20*0.5+20*0.3+(i-60)*0.15+i;
		printf("奖金为%.3lf\n",count);
	}
	else if(i>100)
	{
		count=10*0.1+10*0.75+20*0.5+20*0.3+40*0.15+(i-100)*0.1+i;
		printf("奖金为%.3lf\n",count);
	}
}*/
//一个整数加上100是一个完全平方数再加一个168又是一个完全平方数t3
/*void main()
{
	int i,j,k;
	for(i=0;i<=10000;i++)
		for(j=0;j<=100;j++)
			for(k=0;k<=100;k++)
				if(((i+100)==j*j)&&((i+268)==k*k))
					printf("数字为%d\n",i);
}*/
//输入日期判断这是今年的第几天t4
/*void main()
{
	int year,month,day,num=0;
	printf("年份:");
	scanf("%d",&year);
	printf("月份:");
	scanf("%d",&month);
	printf("几号:");
	scanf("%d",&day);
	switch(month)
	{
	case 1:  num=0;break;
	case 2:  num=31;break;
	case 3:  num=31+28;break;
	case 4:  num=31+28+31;break;
	case 5:  num=31+28+31+30;break;
	case 6:  num=31+28+31+30+31;break;
	case 7:  num=31+28+31+30+31+30;break;
	case 8:  num=31+28+31+30+31+30+31;break;
	case 9:  num=31+28+31+30+31+30+31+31;break;
	case 10: num=31+28+31+30+31+30+31+31+30;break;
	case 11: num=31+28+31+30+31+30+31+31+30+31;break;
	case 12: num=31+28+31+30+31+30+31+31+30+31+30;break;
	default: ;
	}
	num=num+day;
	if(year%4==0&&year%100!=0||year%400==0)
	{
		if(month>2)
		{
			num++;
		}
	}
	printf("%d年%d月%d号共有%d天.祝您愉快的度过以后的每一天.",year,month,day,num);

}*/
//输出最大值t5
/*void main()
{
	int a,b,c;
	printf("输入a的值\n");
	scanf("%d",&a);
	printf("输入b的值\n");
	scanf("%d",&b);
	printf("输入c的值\n");
	scanf("%d",&c);
	int t;
	if(b>a)
	{
		t=b;
		b=a;
		a=t;

	}
	if(c>a)
	{
		t=c;
		c=a;
		a=t;
	}
	if(c>b)
	{
		t=c;
		c=b;
		b=t;
	}
	printf("%d,%d,%d\n",a,b,c);
}*/
//用*输出'C't6(该题较为垃圾,可不复习)
/*void main()
{
	printf("*****\n");
	printf("*\n");
	printf("*\n");
	printf("*\n");
	printf("*****\n");
}*/
//输出9x9乘法表t7
/*void main()
{
	int i,j;
	for(int i=1;i<=9;i++)
	{
		for(int j=1;j<=i;j++)
		{
			printf("%d*%d=%d  ",j,i,j*i);//加一个空格可以输出空格；
		}
		printf("\n");
	}
}*/
//国际象棋t8
/*void main()
{
	int i,j;
	for(int i=1;i<=20;i++)
	{
		if(i%2!=0)//奇数行输入白色和黑色方框
		{
			for(int j=1;j<=20;j++)
			{
				printf("%c%c",168,128);//白色方块
				printf(" ");//黑色方块
			}
		}
		else
			for(j=1;j<=20;j++)
			{
				printf(" ");
				printf("%c%c",168,128);

			}
		printf("\n");
	}
}*/
//斐波那契数列t9
/*void main()
{
	int i=1,j=1,k;
	for(int k=1;k<=10;k++)
	{
		printf("%d %d ",i,j);
		i=i+j;
		j=j+i;
	}
	printf("\n");
}*/
//求素数(1不是素数)(多加理解)t10
/*int main()
{
	int x=0;
	int i=0;
	int count=0;
	for(x=2;x<=5;x++)//统计2-5之间的质数
	{
		for(i=2;i*i<=x;i++)
		{
			if(x%i==0)
			{
				break;
			}
		}
		if(i*i>x)
		{
			count++;
			printf("%d ",x);
		}
	}
	printf("\n");
	printf("质数次数是%d\n",count);
	return 0;
}*/
//水仙花()t11
/*void main()
{
	int a,b,c;
	int i;
	for(int i=100;i<1000;i++)
	{
		a=i/100;
		b=(i%100)/10;
		c=i%10;
		if(i==a*a*a+b*b*b+c*c*c)
		{
			printf("%d\n",i);
		}
	}
}*/
//求质因数t12(不懂)
/*int prime(int n)
{
	int i,m;
	m=1;

	for(i=2;i<n;i++)
	{
		if(!(n%i))//n%i=0假执行，n%i=1真不执行
		{
			m=0;
			break;

		}
	}
	return m;
}
int main()
{
	int j,k;
	printf("输入数字");
	scanf("%d",&k);
	printf("k:",k);
	for(j=2;j<=k;j++)
	{
		if((!(k%j))&&prime(j))
			printf("%4d",j);
	}
}*/
/*int main()
{
	int n,i;
	printf("请输入整数：");
	scanf("%d",&n);
	printf("%d=",n);
	for(i=2;i<=n;i++)//i存在于2~N
	{
		while(n%i==0)//i整除的话
		{
			printf("%d",i);
			n=n/i;
			if(n!=1) printf("*");
		}
	}

	printf("\n");
	return 0;
}*/
//利用条件运算符的嵌套来完成:学习成绩>=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示t13
/*void main()
{
	int a;
	char b;
	scanf("%d",&a);
	b=a>60?((a>60&&a<=89)?'b':'a'):('c');
	printf("%c",b);
}*/
//输入两个正整数m和n，求其最大公约数和最小公倍数欧几里得算法t14
/*void main()(定义被除数，除数，如果除数大于被除数就交换，公因数：被除数除以除数的余数若不等于0就用除数除以余数直到余数为0停止，公倍数：两个数的最大值除以最大公因数)
{
	int a,b,c,d,e,f;
	printf("输入2个值:");
	scanf("%d",&a);
	scanf("%d",&b);
	if(a<b)
	{
		c=a;
		a=b;
		b=c;
	}
	e=a%b;
	f=a*b;
	while(e!=0)
	{
		a=b;
		b=e;
		e=a%b;
	}
	printf("最大公因数%d,最小公倍数%d\n",b,f/b);
}*/
//输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。t15
/*void main()//用一个getchar（）
{
	char c;
	int shu=0,kong=0,zi=0,qi=0;
	printf("输入一段字符:");
	while((c=getchar())!='\n')
	{
		if((c>='a'&&c<='z')||(c>='A'&&c<='Z'))
		{
			zi++;
		}else if(c>='0'&&c<='9')
		{
			shu++;
		}else if(c == ' ')
		{
			kong++;
		}else
			qi++;
	}
	printf("字符:%d,数字:%d,空格:%d,其他:%d",zi,shu,kong,qi);
}*/
//求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。t16
/*void main()
{
	int a,n;
	int s=0;
	int t;
	printf("输入一个数:\n");
	scanf("%d",&a);
	printf("输入行列式个数:\n");
	scanf("%d",&n);
	t=a;
	while(n>0)
	{
		s=s+t;
		a=a*10;
		t=t+a;
		n--;

	}
	printf("结果为%d\n",s);
}*/
//求完数t17
/*void main()//不会t17
{
	int i,j,k,n,sum;
	int a[256];
	for(i=2;i<=100;i++)
	{
		sum=a[0]=1;
		k=0;
		for(j=2;j<=(i/2);j++)
		{
			if(i%j==0)
			{
				sum+=j;
				a[++k]=j;
			}

		}
		if(i==sum)
		{
			printf("%d=%d",i,a[0]);
			for(n=1;n<=k;n++)
				printf("+%d",a[n]);
			printf("\n");
		}

	}
}*/
//一球从100米高度自由落下,每次落地后反跳回原高度的一半,再落下,求它在第10次落地时,共经过多少米？第10次反弹多高t18
/*void main()
{
	float a;
	a=100;
	float b;
	b=100;
	for(int i=1;i<=9;i++)
	{
		a=a/2;
		b=b+a;
	}printf("%f",b);
}*/
/*void main()
{
	float h,s;
	h=s=100;
	h=h/2; //第一次反弹高度
	for(int i=2;i<=10;i++)
	{
		s=s+2*h;
		h=h/2;
	}
	printf("第10次落地时，共经过%f米，第10次反弹高%f米\n",s,h);
}*/
//猴子吃桃第二天是第一天的一半多一个,吃了10天,最后一天剩一个t19
/*void main()
{
	int day,x1=0,x2;
	day=9;
	x2=1;
	while(day>0)
	{
		x1=(x2+1)*2;
		x2=x1;
		day--;
	}
	printf("%d",x1);
}*/
/*void main()
{
	int taozi(int n);
	int n = 1;
	printf("%d",taozi(1));

}
int taozi(int n)
{
	int sum ;
	if (n == 10)
	{
		sum = 1;
		return sum;
	}
	else
	{
		sum = (taozi(n + 1) +1)*2;
		return sum;
	}
}*/
//两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单不会t20
/*int main()
{
	char i, j, k;//i,j,k为abc
	for (i = 'x'; i <= 'z'; i++) {//a
		for (j = 'x'; j <= 'z'; j++) {//b
			if (i != j) {//a!=b
				for (k = 'x'; k <= 'z'; k++) {//c
					if (i != k && k != j) {//a!=c;b!=c;
						if (i != 'x' && k != 'x' && k != 'z') {
							printf("顺序为：a--%c\tb--%c\tc--%c\n", i, j, k);
						}
					}
				}
			}
		}
	}
}*/
//打印菱形t21
/*void main()
{
	int i, j,k;
	for (i = 1; i <= 4; i++)
	{
		for (k = 1; k <=4 - i; k++)
		{
			printf(" ");
		}
		for (j = 1; j <= 2 * i - 1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	for (i = 3; i >= 1; i--)
	{
		for (k = 0; k <= 3 - i; k++)
		{
			printf(" ");
		}
		for (j = 1; j <= 2*i-1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
}*/
//有一分数序列：2/1,3/2,5/3,8/5...计算前20项之和t22
/*void main()
{
	float sum = 0, term, fenzi=2, fenmu=1;
	int t,i;
	for (i = 1; i <= 20; i++)
	{
		term = fenzi / fenmu;
		sum = sum + term;
		t = fenzi;
		fenzi = fenzi + fenmu;
		fenmu = t;
	}
	printf("%.6f",sum);
}*/
//求1！+2！+3！+...+20!的和t23
/*void main()
{
	 double jiecheng(int n);
	long double i,sum=0;
	for (i = 1; i <= 20; i++)
	{
		sum += jiecheng(i);
	}
	printf("%lf",sum);
}
double jiecheng(int n)
{
	double i=1,he=1;
	for (i = 1; i <= n; i++)
	{
		he = i * he;
	}
	return he;
}*/
//递归求5！t24
/*void main()
{
	int i;
	int fact(int n);
	for (i = 1; i <= 5; i++)
	{
		printf("%d!=%d\n",i, fact(i));
	}
}
int fact(int n)
{
	int sum;
	if (n == 0)
	{
		sum = 1;
	}
	else
	{
		sum = n * fact(n - 1);//现在的和等于前一项*n
	}
	return sum;

}*/
//递归函数调用方式，将说输入的5个字符,以相反顺序打印出来 入abcde-edcba t25
/*void main()
{
	int i = 5;
	char plain(int n);
	printf("请输入5个字符:");
	plain(i);
	printf("\n");
	
}
char plain(int n)
{
	char next;
	if (n == 1)
	{
		next = getchar();
		putchar(next);
	}
	else
	{
		next = getchar();//输入
		plain(n - 1);//经此步骤可到plain(1);
		putchar(next);//输出
	}
}*/
//递归调用求岁数 t26
/*void main()
{
	int shu(int n);
	shu(5);
	printf("%d",shu(5));
}
int shu(int n)
{
	int c = 10;
	if (n == 1)
		c = 10;
	else
		c = shu(n - 1) + 2;
	return c;
}*/
//给一个不多余5位的正整数,要求一求它是几位数,要求二逆序打印出各位数字t27
/*int main()
{
	long a, b, c, d, e, x;
	printf("请输入 5 位数字：");
	scanf("%ld", &x);
	a = x / 10000;        
	b = x % 10000 / 1000;   
	c = x % 1000 / 100;     
	d = x % 100 / 10;       
	e = x % 10;          
	if (a != 0) {
		printf("为 5 位数,逆序为： %ld %ld %ld %ld %ld\n", e, d, c, b, a);
	}
	else if (b != 0) {
		printf("为 4 位数,逆序为： %ld %ld %ld %ld\n", e, d, c, b);
	}
	else if (c != 0) {
		printf("为 3 位数,逆序为：%ld %ld %ld\n", e, d, c);
	}
	else if (d != 0) {
		printf("为 2 位数,逆序为： %ld %ld\n", e, d);
	}
	else if (e != 0) {
		printf("为 1 位数,逆序为：%ld\n", e);
	}
}*/
//一个5位数,判断它是否为回文数,即12321是回文数,各位与万位相同,十位与千位相同t28
/*int main()
{
	int j, i, n;
	char a[999], b[999];
	printf("Please input string: ");
	scanf("%s", a);              //输入字符串 
	n = strlen(a);                //用strlen函数读取字符串长度（长度到\0停止） 
	for (i = 0, j = n - 1; i < n; i++, j--)  //循环将字符串a逆序赋值给b 
		b[j] = a[i];
	for (i = 0; i < n; i++)
	{
		if (b[i] != a[i])
			break;                 //判断是否回文 
	}
	if (i == n) printf("是一个回文数!\n");     //如果从第1位到n都相同 则输出回文数 
	else printf("不是一个回文数!\n");
}*/
//输入星期几的第一个字母判断是星期几t29;
/*void main()
{
	char i, j;
	printf("请输入星期几的第一个字母:");
	scanf("%c",&i);//✳:由于空格也算一个字符,所以底下必须吞掉一个空格字符
	getchar();
	switch (i)
	{
	case 'm':printf("monday\n");
		break;
	case 't':printf("请输入下一个字符:\n");
		scanf("%c", &j);
		if (j == 'u') {printf("tuesday\n"); break;}
		if (j == 'h') { printf("thursday\n"); break; }
	case 'w':printf("wednesday\n"); break;
	case 'f':printf("friday\n"); break;
	case 's':printf("请输入下一个字符:\n");
		scanf("%c",&j);
		if (j == 'a') { printf("satursday\n"); break; }
		if (j == 'u') { printf("sunday\n"); break; }
	default:printf("eerror\n"); break;
	}
}*/
//删除指定字符串的指定字母如字符串'aca',删掉a t30不会
/*char* delete(char* str, char* charSet)//字符串,要删除的字母
{
	int h[256];
	if (NULL == charSet)
		return str;
	for (int i = 0; i < 256; i++)
		h[i] = 0;
	for (int i = 0; i < strlen(charSet); i++)
		h[charSet[i]] = 1;
	int Index = 0;
	for (int i = 0; i < strlen(str); i++)
	{
		if (!h[str[i]])
			str[Index++] = str[i];
	}
	str[Index] = '\0';
	return str;
}
int main()
{
	char s[2] = "a";     // 要删除的字母
	char s2[12] = "abcabcabc";  // 目标字符串
	printf("%s\n", delete(s2, s));
	return 0;
}*/
//判断一个数字是否为质数t31
/*void main()
{
	int n,i,j;
	scanf("%d",&n);
	for (i = 2; i*i <= n; i++)
	{
		if (n % i == 0)
			break;
	}
	if (i * i > n)
		printf("%d", n);
	else
		printf("不是质数\n");
}*/
//练习函数调用t32
/*char st1()
{
	printf("Hello,World!\n");
}
char st2()
{
	int i = 1;
	for (i = 1; i <= 3; i++)
	{
		st1();
	}
}
void main()
{
	st2();
}*/
//字符串反转，如将字符串 "www.runoob.com" 反转为 "moc.boonur.www"t33
/*void main()
{
	char a[] = {"www.runnoob.com"};
	char* p, * q;
	p = a; q = a + strlen(a) - 1;
	int t;
	for (; p < q; p++, q--)
	{
		t = *p;
		*p = *q;
		*q = t;
	}
	puts(a);
}*/
//求100之内的素数t33
/*void main()
{
	int i, j;
	for (i = 2; i <= 100; i++)
	{
		for (j = 2; j * j <= i; j++)
		{
			if (i % j == 0)
				break;
		}
		if (j * j > i)
		{
			printf("%d\n", i);
		}
	}
}*/
//对10个数排序t34
/*void main()//冒泡排序
{
	int t;
	int a[12] = { 1,3,5,2,4,8,6,7,4,9,3,0 };
	for (int i =0; i <11; i++)//循环11次
	{
		for (int j = 0; j < 11 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	for (int i = 0; i < 12; i++)
	{
		printf("%d ",a[i]);
	}
}*/
/*void main()//选择排序
{
	int t;
	int a[12] = { 1,3,5,2,4,8,6,7,4,9,3,0 };
	for (int i = 0; i < 11; i++)//循环11次
	{
		for (int j = i; j < 12; j++)
		{
			if (a[j] < a[i])
			{
				t = a[j];
				a[j] = a[i];
				a[i] = t;
			}
		}
	}
	for (int i = 0; i < 12; i++)
	{
		printf("%d ", a[i]);
	}
}*/
/*void main()//插入指定元素
{
	int t;
	int n;//插入数字
	int j, i;
	scanf("%d",&n);
	int a[12] = { 1,3,5,2,4,8,6,7,4,9,3,0 };//12个数字
	for ( i = 0; i < 11; i++)//循环11次
	{
		if (a[i]>n)
		{
			break;
		}
	}
	for (j = 10; j >= i; j--)
		a[j + 1] = a[j];//a[11]<-a[10]
	a[i] = n;
	for (int i = 0; i < 12; i++)
	{
		printf("%d ", a[i]);
	}
}*/
/*void main()//删除指定元素
{
	int t;
	int n;//删除数字
	int j, i;
	
	int a[12] = { 1,3,5,2,4,8,6,7,4,9,3,0 };//12个数字a0-a11
	for (int i = 0; i <= 11; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
	scanf("%d", &n);
	for ( i = 0; i <12; i++)//遍历
	{
		if (a[i]==n)
		{
			break;
		}
	}
	for (j = i; j <11; j++)//复制,
		a[j]=a[j+1];//a[10]<-a[11]
	for (int i = 0; i < 11; i++)
	{
		printf("%d ", a[i]);
	}
}*/
//求矩阵3x3的对角线之和t35
/*void main()
{
	int a[3][3] = { 1,2,3,4,5,6,7,8,10 };
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
	printf("-------------------->\n");
	//主对角线
	int sum = 0; int hex = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (i == j)
			{
				sum += a[i][j];
			}
		}
	}
	//副对角线
	for (i = 0; i < 3; i++)
	{
		hex += a[i][2 - i];
	}
	printf("主对角线和:%d\n副对角线和:%d\n", sum, hex);
}*/
//有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中t36
/*void main()//插入
{
	int a[10] = { 1,3,4,5,6,8,9,10};//a[0]=a[9]
	int i,j;
	int n;
	scanf("%d",&n);
	for (i = 0; i < 9; i++)//循环次数
	{
		if (a[i]> n)
			break;
	}
	for (j = 8; j >= i; j--)//排列方式,最后的两个数字后面往前排
	{
		a[j + 1] = a[j];//a[9]<-a[8]
	}
	a[i] = n;
	for (i = 0; i < 10; i++)
	{
		printf("%d ",a[i]);
	}
}*/
//strlen和sizeof区别
/*void main()
{
	int a[] = { 1,2,3,4,5,6,7 };// 1,28
	int f[7] = { 1,2,3,4,5,6,7 };//1,28
	char b[] = { "china" };//5,6
	char c[6] = {"china"};//5,6
	char d[] = { 'c','h','i','n','a' };//129,5
	char e[5] = { 'c','h','i','n','a' };//97,5
	int g[] = {"12345"};//40,4
	int h[5] = { "12345" };//4,20
	int length, loss;
	length = strlen(g);
	loss = sizeof(g);
	printf("%d,%d", length, loss);
}*/
//将一个数组逆序输出t37
/*void main()
{
	int a[] = { 1,2,3,4,5,6,7,8 };
	int length = sizeof(a) / sizeof(a[0]);
	int i = 0;
	for (i = length-1; i >= 0; i--)
		printf("%d ",a[i]);
}*/
/*int main()
{
	int a[10] = { 0,1,2,3,4,5,6,7,8,9 };
	int i, t;
	printf("原始数组是:\n");
	for (i = 0; i < 10; i++)
		printf("%d ", a[i]);
	for (i = 0; i < 10 / 2; i++)//循环次数，进行交换
	{
		t = a[i];
		a[i] = a[10 - 1 - i];
		a[10- 1 - i] = t;
	}
	printf("\n排序后的数组:\n");
	for (i = 0; i < 10; i++)
		printf("%d ", a[i]);
	printf("\n");
	return 0;
}*/
//了解static的用法,不会放出来初值,与auto不同的是,加不加auto结果都一样t38
/*void foo()
{
	static int x = 0;
	x++;
	printf("%d\n", x);
}

int main()
{
	foo();  // 输出 1
	foo();  // 输出 2
	foo();  // 输出 3
	return 0;
}*/
//学习使用auto定义变量的用法t39
/*int main()
{
	int i, num;
	num = 2;
	for (i = 0; i < 3; i++)
	{
		printf("num 变量为 %d \n", num);
		num++;
		{
			auto int num = 1;
			printf("内置模块 num 变量为 %d \n", num);
			num++;
		}
	}
	return 0;
}*/
//学习使用static的另一用法static只在本次大括号中有效t40
/*int main()
{
	int i, num;
	num = 2;
	for (i = 0; i < 3; i++)
	{
		printf("num 变量为 %d \n", num);
		num++;
		{
			static int num = 1;
			printf("内置模块 num 变量为 %d\n", num);//num为1
			num++;//第一次为3
		}
	}
	return 0;
}*/
//学习使用如何调用外部函数//t41
/*int add(int x, int y)
{
	int z;
	z = x + y;
	return z;
}
void main()
{
	printf("%d",add(2,3));
}*/
//学习使用register定义变量的方法t42
/*int main()
{
	register int i;
	int tmp = 0;
	for (i = 1; i <= 100; i++)
		tmp += i;
	printf("总和为 %d\n", tmp);
	return 0;
}*/
//宏#define命令练习t43
/*#define A 10
int main()
{
	int i; int sum=0;
	for (i = 0; i <= A; i++)
	{
		sum += i;
	}
	printf("%d",sum);
}*/
//宏定义函数t44
/*#define exchange(a,b) { int t;t=a;a=b;b=t;}//注意放在一行里
int main()
{
	int x = 10;
	int y = 20;
	printf("x=%d; y=%d\n", x, y);
	exchange(x, y);
	printf("x=%d; y=%d\n", x, y);
	return 0;
}*/
//宏定义字符t45
/*#define LAG >
#define SMA <
#define EQ ==
#include <stdio.h>
int main()
{
	int i, j;
	printf("请输入两个数字：\n");
	scanf("%d %d", &i, &j);
	if (i LAG j)
		printf("%d 大于 %d \n", i, j);
	else if (i EQ j)
		printf("%d 等于 %d \n", i, j);
	else if (i SMA j)
		printf("%d 小于 %d \n", i, j);
	else
		printf("没有值。\n");
	return 0;
}*/
//学习按位与t46
/*void main()
{
	int a = 3;
	int b = a & 2;
	printf("%d\n",b);//2
	int c = -5;//在机器中 1111 1011
	int d = c & 3;//有符号数在机器内默认补码，补码与完后记得转换源码
	printf("%d",d);//3
}*/
//学习按位或t47
/*void main()
{
	int a = 3;
	int b = a | 2;
	printf("%d\n",b);//3
	int c = -5;
	int d = c | 3;
	printf("%d", d);//-5

}*/
//学习异或^t48
/*void main()
{
	int r = 012;//8进制
	printf("%d\n",r);//10
	int a = 3;
	int b = a ^ 2;
	printf("%d\n", b);//1
	int c = -5;
	int d = c ^ 3;
	printf("%d", d);//-8
}
*/
//打印出杨辉三角t49
/*void main()
{
	int a[10][10];
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			if (i == j || j == 0)//j=0是第1列,i==j是最后一行
				a[i][j] = 1;
			else
				a[i][j] = a[i - 1][j - 1] + a[i - 1][j];//(关键)
			printf("%5d", a[i][j]);
		}
		printf("\n");
	}
}*/
//输入3个数比较大小,按大小顺序输出t50
/*void main()
{
int swap(int* a, int* b);
	int a, b, c;
	int* a1, * b1, * c1;
	scanf("%d %d %d",&a,&b,&c);
	a1 = &a;
	b1 = &b;
	c1 = &c;
	if (a1 < b1)
		swap(a1, b1);
	if (a1 < c1)
		swap(a1, c1);
	if (b1 < c1)
		swap(b1, c1);
	printf("%d %d %d",*a1,*b1,*c1);
	//printf("%d %d %d",a,b,c);
}
int swap(int *a, int *b)
{
	int t;
	if (*a < *b)
	{
		t = *a;
		*a = *b;
		*b = t;
	}
}*/
//输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组t51
/*void main()
{
	int s[20];
	int i, n;
	printf("设置数组长度(<20):");
	scanf("%d", &n);
	printf("输入 %d 个元素:\n", n);
	for (i = 0; i < n; i++)
		scanf("%d", &s[i]);
	//换值
	for (i = 0; i < n; i++)
	{
		//max
		int t;
		if (s[0] < s[i])
		{
			t = s[0];
			s[0] = s[i];
			s[i] = t;
		}
		//min
		int y;
		if (s[n-1] > s[i])
		{
			y = s[n - 1];
			s[n - 1] = s[i];
			s[i] = y;
		}

	}
	//输出
	for(i=0;i<n;i++)
	printf("%3d",s[i]);
}*/
//有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位t52不会
/*void main()
{
	int num[50], n, * p, j, loop, i, m, k;
	printf("请输入这一圈人的数量:\n");
	scanf("%d", &n);
	p = num;
	//开始给这些人编号
	for (j = 0; j < n; j++)
	{
		*(p + j) = j + 1;
	}
	i = 0;//i用于计数,即让指针后移
	m = 0;//m记录退出圈子的人数
	k = 0;//k报数1,2,3
	while (m < n - 1)//当退出的人数不大于总人数时，即留下的人数至少是一个人
		//这句不能写成m<n,因为假设有8人，当退出了6人时，此时还是进行人数退出，即m++，
		//这时是7<8，剩下的一个人自己喊1，2,3那么他也就退出了，将不会有输出
	{
		if (*(p + i) != 0)//如果这个人的头上编号不是0就开始报数加1，这里采用的方法是报数为3的人头上编号重置为0
		{
			k++;
		}
		if (k == 3)
		{
			k = 0;    //报数清零，即下一个人从1开始报数
			*(p + i) = 0;//将报数为3的人编号重置为0
			m++;    //退出人数加1
		}
		i++;      //指针后移
		if (i == n)//这句很关键，如果到了队尾，就要使指针重新指向对头
			//并且它只能放在i++后面，因为只有i++了才有可能i==n
		{
			i = 0;
		}
	}
	printf("现在剩下的人是:");
	for (loop = 0; loop < n; loop++)
	{
		if (num[loop] != 0)
		{
			printf("%2d号\n", num[loop]);
		}
	}
}*/
//写一个函数,求一个字符串的长度,在 main 函数中输入字符串,并输出其长度。t53
/*int fun(char s[])
{
	int i = 0;
	int sum = 0;
	while (s[i] != '\0')
	{
		sum += 1;
		i++;
	}
	printf("%d", sum);
}
void main()
{
	char s[100] = { '\0' };
	gets(s);
	fun(s);
	//int i=0;
	//int sum = 0;
	//while (s[i] != '\0')
	//{
	//	sum += 1;
	//	i++;
	//}
	//printf("%d",sum);
}*/
/*int fun(char* argc)//指针实现
{
	while (*argc == '\0')
	{
		return 0;
	}
	return 1+fun(argc+1);
	
}
void main()
{
	char str[50];
	gets(str);
	fun(str);
	printf("%d",fun(str));
}*/
//输入一个整数逆序输出t54
/*void main()
{
	int i;
	scanf("%d",&i);
	int result = 0;//计数字的个数
	int t;
	while (i != 0)
	{
		t = i % 10;
		result = result * 10 + t;
		i = i / 10;
	}
	printf("%d",result);	
}*/
//指针函数调用输入n为偶数时,调用函数求1/2+1/4+...+1/n,当输入n为奇数时,调用函数1/1+1/3+...+1/n(利用指针函数)t55
/*void main()
{
	double ji(int h);
	double ou(int p);
	int n;
	scanf("%d",&n);
	double(*fun)(int);
	if (n % 2 == 0)
		fun = ou;
	else fun=ji;
	double r;
	r = (*fun)(n);
	printf("%lf\n",r);

}
double ou(int p)
{
	double s = 0, a = 0;
	int i;
	for (i = 2; i <= p; i+=2)
	{
		a = (double)1 / i;
		s += a;
	}
	return s;
}
double ji(int h)
{
	double s = 0, a = 0;
	int i;
	for (i = 1; i <= h; i += 2)
	{
		a = (double)1 / i;
		s += a;
	}
	return s;
}*/
//关于x进行取值t56
/*void main()
{
	int b;
	int a = 809;
	for (int i = 10; i < 100; i++)
	{
		b = a * i;
		if (b >= 1000 && b < 10000 && 8 * i < 100 && 9 * i >= 100)
			printf("%d",i);//12		
	}
}*/
//八进制转10进制t57
/*int main()
{
	int n = 0, i = 0;
	char s[20];
	printf("输入一个8进制的数\n");
	gets(s);
	while (s[i] != '\0')
	{
		n = n * 8 + s[i]-'0';//输入的数字是字符需要减去0的ascii值
		i++;
	}
	printf("%d",n);
}*/
//0-7组成的奇数个数t58
/*void main()
{
	//0-7奇数有4个,且第一位不能是0
	int i, j;
	int sum = 0;
	for (i = 1,j=1; i <= 8; i++,j++)
	{
		if (i == 1)
		{
			sum = 4;
			printf("%d的个数%d\n", i, sum);
		}
		else if (i == 2)
		{
			sum = 4 * 7;
			printf("%d的个数%d\n", i, sum);
		}
		else
		{
			int z = 1;
			for (int y = 1; y <= j - 2; y++)
			{
				z *= 8;
			}
			int t; sum = z * 4 * 7;
			printf("%d的个数%d\n", i, sum);
		}

	}
	
}
*/
//一个偶可以分为2素数t59
/*void main()
{
	int i, n1, n2, n;
	//scanf("%d", &n);
	n = 6;
	for (n1 = 3; n1 <= n / 2; n1++)//先取出一半
	{
		n2 = n - n1;
		for (i = 2; i < n1; i++)
		{
			if (n1 % i == 0)
				break;
		}//求素数
		//if (i < n1)//可有可无
		//{
		//	printf("%d", n1);
		//	continue;
		//}
		for (i = 2; i < n2; i++)
		{
			if (n2 % i == 0)
				break;
		}
		if (i == n2)
			break;	
	}printf("%d is %d and %d", n, n1, n2);
}*/
/*void main()
{
	int n;
	int susu(int x);
	scanf("%d",&n);
	for (int x = 3; x <= n/2; x++)
	{
		if (susu(x))
			if (susu(n-x))
			{
				printf("%d=%d+%d\n", n, x, n-x);
				return;
			}
	}
}
int susu(int x)
{
	int i;
	for (i = 2; i < x; i++)
	{
		if (x % i == 0)
		{
			break;
		}
	}
	if (i == x)
		return x;
}*/
//密码加密,每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换t60
/*void main()
{
	int n;
	scanf("%d",&n);
	int ge, shi, bai, qian;
	ge = n % 10;
	shi = n / 10 % 10;
	bai = n / 100 % 10;
	qian = n / 1000;
	ge += 5;
	ge = ge % 10;
	shi += 5;
	shi = shi % 10;
	bai += 5;
	bai = bai % 10;
	qian += 5;
	qian = qian % 10;
	int t;
	{
		t = ge;
		ge = qian;
		qian = t;
	}
	{
		t = shi;
		shi = bai;
		bai = t;
	}
	int y;
	y = ge + shi * 10 + bai * 100 + qian * 1000;
	printf("%d",y);
}*/
/*int main()
{
	int a, i, aa[4], t;
	printf("请输入四位数字：");
	scanf("%d", &a);
	aa[0] = a % 10;
	aa[1] = a % 100 / 10;
	aa[2] = a % 1000 / 100;
	aa[3] = a / 1000;
	for (i = 0; i <= 3; i++)
	{
		aa[i] += 5;
		aa[i] %= 10;
	}
	for (i = 0; i <= 3 / 2; i++)
	{
		t = aa[i];
		aa[i] = aa[3 - i];
		aa[3 - i] = t;
	}
	printf("加密后的数字：");
	for (i = 3; i >= 0; i--)
		printf("%d", aa[i]);
	printf("\n");
}*/
//t61统计字符出现次数
/*void main()//求单个字符出现的次数
{
	char c;
	char count = 0;
	char d;
	scanf("%c",&d);//不能敲enter 只能敲空格
	while ((c = getchar()) != '\n')//'\n' 敲enter结束
	{
		if (c == d)
			count++;
	}
	printf("%d", count);
}*/
/*int main()
{
	char a[11], b;
	int i, num = 0;
	gets(a);
	b = getchar();
	for (i = 0; a[i] !='\0' ; i++)
	{
		if (b == a[i])
			num++;
	}
	printf("%c出现的次数是%d\n", b, num);
	return 0;
}*/
/*int main(void)//求多个字符在字符串的出现次数
{
	int string_in(char* s1, char* s2);
	char t[50], p[10];
	printf("请输入两个字符串，以回车隔开，母串在前，子串在后：\n");
	gets(t);
	gets(p);
	printf("共出现%d次\n", string_in(t, p));

	return 0;
}

int string_in(char* s1, char* s2)
{
	int i = 0, ct = 0;
	while (*(s1 + i) != '\0' && *s2 != '\0')
	{
		if (!strncmp(s1 + i, s2, strlen(s2)))//strcmp>0大于=0等<0小于
			ct++;
		i++;
	}
	return ct;
}
*/
/*void main()//可以取任意字符
{
	int fun(char* s1, char* s2);
	char a[20];
	char b[20];
	gets(a);
	gets(b);
	printf("共出现%d次\n",fun(a, b));
}
int fun(char* s1, char* s2)
{
	int i=0,count=0;
	while(*(s1+i)!='\0' && *s2!='\0')
	{
		if (strncmp(s1 + i, s2, strlen(s2)) == 0)
		{
			count++;
		}
		i++;
	}
	return count;
}*/
//取球问题求组合
/*int ball(int n, int m)
{
	if (n < m) return 0;
	if (n == m) return 1;
	if (m == 0) return 1;
	return ball(n - 1, m - 1) + ball(n - 1, m);
}
void main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	printf("%d",ball(n,m));

}*/
/*void main()
{
	int fun(int n);
	int n,m;
	int i;
	scanf("%d",&n);
	scanf("%d",&m);
	int result;
	int a = fun(n);
	int b = fun(m);
	int c = fun(n - m);
	result = a / (b * c);
	printf("%d",result);
	//cm n 6 3 20    10 3 120     10 8 45

}
int fun(int n)
{
	int count = 1;
	for (int i = 1; i <= n; i++)
	count = i * count;
	//printf("%d",count);
	return count;
}*/
//类似数字金字塔的
/*int fun(int m, int n)
{
	if (m == 0 || n == 0 || m == n)
		return 1;
	return fun(m - 1, n) + fun(m - 1, n);
}
void main()
{
	int i, j, n;
	scanf("%d",&n);
	for (i = 0; i < n; i++)
	{
		for (j = 0; j <= i; j++)
		{
			printf("%d",fun(i,j));
		}
		printf("\n");
	}
}*/
#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<time.h>
//t1;
/*int main()
{
	int i = 0, s = 0;
	do
	{
		if (i % 2)
		{
			i++;
			continue;
		}
		i++;
		s += i;
	} while (i < 7);
	printf("%d\n",s);//16
}*/
//t2
/*int main()
{
	int a = 5;
	while (a == 5)
	{
		printf("RABBIT");//输出一次
		break;
	}
	return 0;
}*/
//t3
/*int main()
{
	int i = 0;
	do
	{
		i++;
		printf("hello\n");//输出3次
	} while (i < 3);
}*/
//t4
/*int main()
{
	short i = 0;
	while (++i)
	{
		printf("H");//输出无限多的H
	}
}*/
//t5
/*int main()
{
	int i = 0;
	do
	{
		printf("A");//输出一个
	} while (i != 0);
}*/
//t6
/*int main()
{
	do
		printf("A");
	while (0);
	printf("B");//AB
}*/
//t7
/*int main()
{
	int i = 1;
	while (++i <= 5)
	{
		printf("%d ",i++);//2 4
	}
}*/
//t8
/*int main()
{
	int y = 10;
	while (y--);
	printf("%d",y);//-1
}*/
//t9
/*int main()
{
	int k = 5;
	while (--k)
		printf("%d",k-=3);//1
}*/
//t10
/*void main()
{
	int sum = 0, item = 0;
	while (item < 5)
	{
		item++;
		sum += item;
		if (sum == 5)
			break;

	}
	printf("%d\n",sum);//15
}*/
//t11
/*void main()
{
	int i = 0;
	while (i < 10)
	{
		if (i < 1) continue;//循环无数次,因为i++执行不了
		if (i == 5) break;
		i++;
	}
}*/
//t12
/*int fun(int a, int b)
{
	return a + b;
}
void main()
{
	int x = 2,y=5,z=8,r;
	r = fun(fun(x, y), z);
	printf("%d",r);
}*/
//t13
/*void f(int v, int w)
{
	int t;//不传地址无效
	t = v;
	v = w;
	w = t;
}
int main()
{
	int x = 1, y = 3, z = 2;
	if (x > y) f(x, y);
	else if (y > z) f(y, z);
	else f(x, z);
	printf("%d,%d,%d",x,y,z);
}*/
//t14
/*char fun(char x, char y)
{
	if (x < y) return x;
	return y;
}
int main()
{
	int a = '9', b = '8', c = '7';
	printf("%c",fun(fun(a,b),fun(b,c)));//7
}*/
//t15
/*void fun(int s, int t, ...)
{
	printf("%d ",t);
}
int main()
{
	fun(2, 4, 6, 8);
	fun(3, 6, 8);
}*/
//t16
/*int i;
void main()
{
	extern int i;//extern 不可以赋值,只能声明已有的变量,且默认为零
	if (i == 0)
	{
		printf("scope rules:\n");
	}
}*/
//t17
/*int x = 5;
void main()
{
	int x = 3;
	printf("%d",x);
	{
		 x = 4;//加上int 结果是33,不加int 结果34
	}//原因是括号的x是179行的x，加上int x是一个新的变量
	printf("%d",x);
}*/
//t18
/*void m()
{
	static int x = 5;
	x++;
	printf("%d",x);//67
}
void main()
{
	m();
	m();
}*/
//t19
/*int f1()
{
	static int j = 5;
	return --j;
}
void main()
{
	int i;
	for (i = 0; i < 5; i++)
	{
		printf("%d ",f1());//43210
	}
}*/
//t20
/*int f1(int x)
{
	static int a=3;
	a += x;
	return a;
}
void main()
{
	int k = 2, m = 1, n;
	n = f1(k);//a:5
	n = f1(m);//a:6
	printf("%d",n);//6
}*/
//t21
/*static int x;
void main()
{
	int  x;//定义了一个新的变量x与全局变量x不同
	printf("%d",x);//不确定的值
}*/
//t22
/*void main()
{
	int i = 0, a = 0;
	while (i < 20)
	{
		for (;;)
		{
			if (i % 10 == 0)
				break;
			else i--;
		}
		i += 11; a += i;
	}
	printf("%d\n",a);//32
}*/
/*void main()
{
	char s[100];
	gets(s);
	int i = 0;
	int kong = 0;
	int num = 0;
	if (s[0] == ' ')
	{
		for (i = 0; s[i] != '\0'; i++)
		{
			if (s[i] == ' ')
				kong = 0;
			else if (kong == 0)
			{
				kong = 1;
				num++;
			}
			//以下为第二种解法
			if (s[i] == ' ')
			{
				num++;
			}
		}
		printf("word个数:%d", num);
	}
	else
	{
		for (i = 0; s[i] != '\0'; i++)
		{
			if (s[i] == ' ')
				kong = 0;
			else if (kong == 0)
			{
				kong = 1;
				num++;
			}
			//以下为第二种解法
			if (s[i] == ' ')
			{
				num++;
			}
		}
		printf("word个数:%d", num + 1);
	}
}*/
//金字塔问题字母回文搭配主函数输入金字塔的层数（小于等于26）
/*char fun(int n)
{
	int i, j,k;
	for (i = 1; i <= n; i++)
	{
		for (k = 1; k <= n - i; k++)
			printf(" ");
		//输出数值
		for (j = 1; j < ((2 * i - 1) + 1) / 2; j++)
			printf("%c", 64 + j);
		for (j <= ((2 * i - 1) + 1) / 2 - 1; j >= 1; j--)
			printf("%c", j + 64);
		//换行
		printf("\n");
	}
}
void main()
{
	int n;
	printf("请输入n的值\n");
	scanf("%d",&n);
	fun(n);
}*/
//关于带符号数字的逆序
/*void fun(long int n)
{
	int i = 0;
	if (n == 0)
		return ;
	else
		while (n)
		{
			if (n > 0||i==0)
				printf("%ld", n % 10);//若为正数,直接取余就行,若为负数,-？%10等于负个位数
			else
				printf("%ld",-n%10);//去掉负数的个位数之后,进行取反不断取余
			i++;
			n=n / 10;
		}
}
void main()
{
	long int n;
	scanf("%ld",&n);
	fun(n);
	printf("\n");
}*/
//插入
/*int main()
{
	int a[11] = { 0,1,2,3,4,5,6,7,8,9 };//10
	int i, j, k;
	scanf("%d",&k);
	//比较趟数
	for (i = 0; i < 9; i++)//9
	{
		if (a[i] > k)
			break;
	}
	//从倒2开始放
	for (j = 9; j >= i; j--)//8
		a[j + 1] = a[j];
	a[i] = k;
	//插入后变10个数
	for (i = 0; i < 11; i++)//9
	{
		printf("%d,",a[i]);
	}
}*/
//删除
/*int main()
{
	int a[10] = { 0,1,2,3,4,5,6,7,8,9 };
	int i, j, k;
	scanf("%d", &k);
	//遍历找出要删除的数
	for (i = 0; i < 9; i++)
	{
		if (a[i] == k)
			break;
	}
	//根据要删除的数从这个要删的数后开始删数字
	for (j = i; j <=9; j++)
		a[j] = a[j+1];

	//删除后剩下9个数
	for (i = 0; i < 9; i++)
	{
		printf("%d,", a[i]);
	}
}*/
/*指针逆序输出数字
void reverse(int* p, int n)
{
	int* q, temp;
	q = p + n - 1;
	for (; p < q; p++, q--)
	{
		temp = *p;
		*p = *q;
		*q = temp;
	}
}
void main()
{
	int a[5], i, * p;
	for (i = 0; i < 5; i++)
		scanf("%d",&a[i]);
	p = a;
	reverse(p, 5);
	for (i = 0; i < 5; i++)
		printf("%d,",a[i]);
}
*/
//易错题
/*char fun(char* a, char* b)
{
	b=a;
	(*a)++;
	printf("%c,%c\n", *a,*b);
}
void main()
{
	char c1 = 'A', c2 = 'a';
	char* p1, * p2;
	p1 = &c1, p2 = &c2;
	fun(p1, p2);
	printf("%c,%c",c1,c2);
}*/
//关于二维数组指针
/*int main()
{
	int a[3][5] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
	int* p;
	p = a[0];
	printf("%d\n", a[0] + 5);//地址
	printf("%d\n",p[1]+5);//6值
	printf("%d\n", *a);//a[0]地址


}*/
//二维数组排序
/*int sort(int(*a)[4])
{
	int i, j, k, temp;
	for (i = 0; i < 3; i++)
	{
		k = i;
		for (j = i+1; j < 4; j++)
		{
			if (*(*a + k) > *(*a + j))
				k = j;
		}
		if (k != i)
		{
			temp = *(*a + i);
			*(*a + i) = *(*a + k);
			*(*a + k) = temp;
		}
	}
}
void main()
{
	int i, j;
	int a[3][4];
	for (i = 0; i < 3; i++)
		for (j = 0; j < 4; j++)
			scanf("%d,", &a[i][j]);
	for (i = 0; i < 3; i++)
		sort(a + i);
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			printf("%5d", a[i][j]);
		printf("\n");
	}
}*/
/*
int sort(int a[][4])
{
	int i, j, k, temp;
	for (i = 0; i < 3; i++)
	{
		k = i;
		for (j = i + 1; j < 4; j++)
		{
			if (a[0][k] > a[0][j])//对a[]里的元素进行排序
				k = j;
		}
		if (k != i)
		{
			temp =a[0][i];
			a[0][i] = a[0][k];
			a[0][k] = temp;
		}
	}
}
void main()
{
	int i, j;
	int a[3][4] = { 1,4,3,2,3,6,8,1,0,2,1,4 };
	//原数组输出
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			printf("%d,", a[i][j]);
		printf("\n");
	}
	//排序
	for (i = 0; i < 3; i++)
		sort(a[i]);//接受首地址a[i]
	printf("\n");
	//输出
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			printf("%5d", a[i][j]);
		printf("\n");
	}
}*/
//递归妙用实现10进制转2进制类似逆序
/*int fun(int n)
{
	int m = 0;
	if (n > 0)
	{
		m = n % 2;
		fun(n / 2);
	}
	printf("%d ", m);
}
void main()
{
	int n = 8;
	fun(n);
}*/
//2进制转10进制
/*
int main()
{
	char s[100];
	gets(s);
	int i;
	int n = 0;
	for (i = 0; s[i]!='\0'; i++)
	{
		n = n * 2 + (s[i] - '0');
	}
	printf("%d",n);
}*/
//检测
/*void main()
{
	int x1, x2;
	char y1,y2;
	scanf("%2d%3d%3c%c",&x1,&x2,&y1,&y2);
	printf("x1=%d,x2=%d,y1=%c,y2=%c",x1,x2,y1,y2);

}*/
//短路
/*int main()
{
	int i = 1, j = 1, k = 2;
	if ((j++ || k++) && i++)
		printf("%d,%d,%d",i,j,k);//222
}*/
//易错题
/*int change(int* data) { return (*data)++; }
void main()
{
	//data=change(&data);和chang(*data) 输出data不一样,一个是赋的是(*a)++,一个是*(a)++后a的值
	int data = 123;
	change(&data);
	printf("%d,",data);//124
	data= change(&data);
	printf("%d,",data);//124
	change(&data);//125
	printf("%d,",data);
	
}*/
//switch易错题
/*int main()
{
	int n = 'c';
	switch (n++)
	{
	default:printf("error"); break;
	case 'a':printf("good"); break;
	case 'c':printf("pass");
	case 'd':printf("warn");//输出pass warn
	}
}*/
//指针比较字符串的大小
/*void main()
{
	int fun(char* p1, char* p2);
	char s1[80], s2[80];
	gets(s1);
	gets(s2);
	if (fun(s1, s2))
		printf("%s", s1);
	else
		printf("%s",s2);
}
int fun(char* p1, char* p2)
{
	if (*p1 == '\0') return 0;
	p1++;
	p2++;
	return (*p1-*p2);
}*/
/*void main()
{  
	//int* s = "china";
	//int* a = "asdf";
	char c[30], d[30];
	char* s;
	s = &c;
	char* a;
	a = &d;
	gets(s);
	gets(a);

	if (strcmp(s++, a++) > 0)
		printf("a>b");
	else if (strcmp(s++, a++) == 0)
		printf("a=b");
	else
		printf("a<b");
*/
//念数字
/*int fun(int n)
{
	int i;
	//判正负
	if (n < 0)
	{
		printf("fu ");
		n = -n;
	}
	//反转
	int result = 0;
	while (n != 0)
	{
		result = result * 10 + n % 10;
		n = n / 10;
	}
	//判断输出
	for (; result != 0; result = result / 10)
	{
		switch (result % 10)
		{
		case 0:printf("ling "); break;
		case 1:printf("yi "); break;
		case 2:printf("er "); break;
		case 3:printf("san "); break;
		case 4:printf("si "); break;
		case 5:printf("wu "); break;
		case 6:printf("liu "); break;
		case 7:printf("qi "); break;
		case 8:printf("ba "); break;
		case 9:printf("jiu "); break;
		}
	}
}
void main()
{
	int n;
	scanf("%d", &n);
	fun(n);

}*/
/*int main()
{
	char c;
	c = getchar();
	while (c != '\n')
	{
		if (c == '-')printf("fu");
		else if (c == '0')printf("ling");
		else if (c == '1')printf("yi");
		else if (c == '2')printf("er");
		else if (c == '3')printf("san");
		else if (c == '4')printf("si");
		else if (c == '5')printf("wu");
		else if (c == '6')printf("liu");
		else if (c == '7')printf("qi");
		else if (c == '8')printf("ba");
		else if (c == '9')printf("jiu");
		c = getchar();
		if (c != '\n')printf(" "); //每循环一次  打印一个空格 
	}
	return 0;
}
*/
//数字转数组
/*void main()
{
	int n;
	scanf("%d",&n);
	int a[10] = {0,3,5,67,7};
	int i;
	int count = 0;
	for (i = 0; n != 0; i++)
	{
		a[i] = n % 10;
		n = n / 10;
		count++;
	}
	for (i = 0; i < count; i++)
	{
		printf("%d",a[i]);
	}

}*/
//数字转数组
/*void main()
{
	//int c, i = 0;
	//char a[1000];
	//while ((c = getchar()) != '\n')
		//a[i++] = c;
	//for (; i < 1000; i++)
		//a[i] = '\0';
	//printf("The value is :%s\n", a);
	int a[20];
	int c;
	int i=0,count=0;
	while ((c = getchar()) != '\n')
	{
		a[i++] = c;
		count++;
	}
	for (i = 0; i < count; i++)
	{
		printf("%d",a[i]-'0');
	}
}*/
//反序
/*void main()
{
	char c;
	int i=0;
	int count = 0;
	char a[500001];
	while ((c = getchar())!='\n')
	{
		count++;
		a[i++] = c;
	}
	for (i = count - 1; i >= 0; i--)
		printf("%c",a[i]);
}*/
//有理数加法
/*void main()
{
	int a, b;
	int fun1(int a, int b);
	int fun(int a, int b);
	printf("请输入分式\n");
	scanf("%d/%d", &a, &b);//分子a,分母b
	int c, d;
	scanf("%d/%d", &c, &d);//分子c,分母d

	if (d == 0 || b == 0)
		printf("分母不为零\n");
	int m = fun(b, d);

	a = m / b * a;
	c = m / d * c;
	int fenzihe = 0;
	fenzihe = c + a;
	int ho;
	ho = fun1(fenzihe, m);
	fenzihe = fenzihe / ho;
	m = m / ho;
	if (m == 1)
		printf("%d", fenzihe);
	else if (m == fenzihe)
		printf("1");
	else
		printf("%d/%d", fenzihe, m);

}
//输出min公倍数
int fun(int a,int b)
{
	int m;
	int count = a * b;
	while (b)
	{
		m = a % b;
		a = b;
		b = m;
	}
	count = count / a;
	return count;
}
//输出max公因数
int fun1(int a, int b)
{
	int m;
	while (b)
	{
		m = a % b;
		a = b;
		b = m;
	}
	return a;
}*/
//单词长度
/*void main()
{

	char ch = 0;
	int count = 0, temp = 0;
	while (ch != '.') {
		scanf("%c", &ch);
		if (ch != ' ' && ch != '.')
		{
			count++;//计数器 
		}//在这里有一部分的读者可能有些迷惑，要知道我们的if else语句是只执行其一的 
		else {
			if (temp == 0 && count != 0) {
				temp = 3;
				printf("%d", count);//输出第一项的单词数，前无空格 
			}
			else if (count != 0) {//第二项之后的单词数 
				printf(" %d", count);
			}
			count = 0;//count重定义，计算下一个单词的字母数量
		}
	}m
	return 0;
}*/
/*void main()
{
	int count = 0;//单词个数
	char c;
	int flag = 0;
	while ((c = getchar()) != '.') {
		if (c != ' ')
			count++;
		else if (count != 0) 
		{
			if (flag == 1)
				printf(" %d", count);
			if (flag == 0)
				printf("%d", count);
			count = 0;
			flag = 1;
		}
		else
			continue;
	}
	if (flag == 1 & count != 0) printf(" ");
	if (count) printf("%d", count);
	
}*/
//大小排序
/*void main()
{
	int c[] = { 23,1,56,234,7,0,34 }, i, j, t;
	for (i = 1; i < 7; i++)
	{
		t = c[i];
		j = i - 1;
		while (j >= 0 && t > c[j])
		{
			c[j + 1] = c[j];
			j--;
		}
		c[j + 1] = t;
	}
	for (i = 0; i < 7; i++)
	printf("%d ",c[i]);
}*/
//用递归的方法将一个整数n转换成字符串，例如1234，应输出字符串1234；转2进制
/*void convert(int n) {
	int i;
	
	if ((i = n / 10) > 0)
		convert(i);
	putchar(n % 10 + '0');
	
	if ((i = n / 2) > 0)
		convert(i);
	printf("%d",n%2);
	
	if ((i=n/2) > 0)//i应该怎末做才能到0
	{
		convert(i);
	}
	printf("%d ", n%2);//如何才能得到要的值
	
}

int main() {
	int num;
	scanf("%d", &num);
	if (num < 0) {
		printf("-");
		num = -num;
	}
	convert(num);
	printf("\n");m
	return 0;
}*/
//字符之间相差的个数
/*int compare(char* p1, char* p2)
{
	while (*p1++ == *p2++)//执行后p2指向下一个字节
		if (*(p1-1) == '\0')//检测上一个p1是否是空格
			return 0;
	return *(--p1) - *(--p2);//两个执行前的字母相减
}
void main()
{
	int m;
	char str1[20], str2[20], * p1, * p2;
	printf("input:\n");
	scanf("%s",str1);
	scanf("%s",str2);
	p1 = str1;
	p2 = str2;
	m = compare(p1, p2);
	printf("%d\n",m);
}*/
//18年计算机真题下面3道 --面积1
/*void main()
{
	float a, b, c;
	float s, area;
	//输入
	scanf("%f%f%f",&a,&b,&c);
	//判断
	if ((a+b>c) && (a+c>b) && (b+c>a))
	{
		s = (a + b + c) / 2;
		area = sqrt(s * (s - a)*(s - b)*(s - c));
		printf("%.2f",area);
	}
	else
		printf("False");
}*/
//去高分
/*int input(int* score, int n)
{
	int i;
	for (i = 0; i < n; i++)
		scanf("%d",&score[i]);
}
int smax(int* score, int n)
{
	int i,j;
	j = score[0];
	for (i = 1; i < n; i++)
	{
		if (j < score[i])
		{
			j = score[i];
		}
	}
	return j;
}
int smin(int* score, int n)
{
	int i, j;
	j = score[0];
	for (i = 1; i < n; i++)
	{
		if (j > score[i])
		{
			j = score[i];
		}
	}
	return j;
}
int ssum(int* score, int n)
{
	int i;
	int sum=0;
	for (i = 0; i < n; i++)
	{
		sum += score[i];
	}
	return sum;
}
int main()
{
	int score[10], max, min, sum;
	float aver;
	input(score, 10); //输入10个评委的评分
	sum = ssum(score, 10); //计算10个评委的评分之和
	max = smax(score, 10); //计算最高分
	min = smin(score, 10); //计算最低分
	aver = (sum - max - min) * 1.0 / (10 - 2); //计算学生的最终得分
	printf("%f\n", aver); //输出学生的最终得分
}*/
//计算Π的绝对值 某项值小于10的-5次方
/*void main()
{
	float pi, sum, s;
	int i;
	sum = 0.0;
	i = 1;
	do 
	{
		s=1.0 / (i * i);
		sum += s;
		i++;
	} while (s > 1e-5);
	pi = sqrt(sum * 6);
	printf("%f",pi);
}
int fun(int n)
{
	return n * n;
}
void main()
{
	int i;
	float sum,s, io;
	sum = 0.0;
	i = 1;
	for (i = 1; (1.0 / fun(i)) > 1e-5; i++)
	{
		sum += 1.0 / fun(i);
	}
	io = sqrt(sum*6);
	printf("%f",io);
}*/
//输入字符串逆序输出
/*void main()
{
	char c[20];
	gets(c);
	int i;
	for (i = 0; c[i] != '\0'; i++);
	for (; i >= 0; i--)
	{
		printf("%c",c[i]);
	}
}*/
//易错指针
/*int p1(char* p)
{
	p += 3;
	return *p;
}
void main()
{
	char b[4] = { 'm','n','o','p' }, * pt = b;
	int p1(char* p);
	printf("%c",*pt);//m
	printf("%c",p1(pt));//p
}*/
//查询数组,找到删除
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,9,0 };
	int n;
	scanf("%d",&n);
	int i,flag=0,temp;
	//遍历10次
	for (i = 0; i < 10; i++)
	{
		if (n == a[i])
		{
			flag = 1;
			temp = i;
			break;
		}
	}
	if (flag == 0)
		printf("未能查询到信息");
	else
	{
		int j;
		for (j=temp; j < 9; j++)
		{
			a[j] = a[j + 1];
		}
		//输出
		for (j = 0; j < 9; j++)
		{
			printf("%3d",a[j]);
		}
	}
	
}*/
//求因子个数并输入到数组内
/*int findfact(int n, int fact[])
{
	int i,sum=0,j=0;
	for (i = 1; i <= n; i++)
	{
		if (n % i == 0)
			fact[j++] = i;
	}
	return j;
}
void main()
{
	int n,fact[100],count,i;
	scanf("%d",&n);
	count=findfact(n,fact);
	printf("因子个数:%d\n",count);
	for (i = 0; i < count; i++)
		printf("%3d",fact[i]);
}*/
//迭代法求一个数的平方根
/*int main()
{
	float x = 1, x0;
	int n;
	printf("输入一个数字\n");
	scanf("%d",&n);
	while (n < 0)
	{
		scanf("%d",&n);
	}
	//循环
	do
	{
		x0 = (x + n / x) / 2;
		if (abs(x0 - x) < pow(10, -5))
		{
			break;
		}
		else
		{
			x = x0;
		}
	} while (1);
	printf("%dis%f\n",n,x0);
}*/
//回文数
/*void main()
{
	char a[100];
	gets(a);
	int i;
	i = strlen(a)-1;
	int j,flag=1;
	for (j = 0; j < i; j++)
	{
		if (a[j] != a[i - j])
		{
			flag = 0;
			break;
		}
	}
	if (flag == 1)
		printf("yes");
	else
		printf("no");
}
*/
//计算最大公约数
/*void main()
{
	int x, y,temp;
	scanf("%d%d",&x,&y);
	temp = x % y;
	while (temp)
	{
		temp = x % y;
		x = y;
		y = temp;
	}
	printf("%d",x);
}*/
/*void main()
{
	int x, y,i,temp;
	scanf("%d%d",&x,&y);
	//求最小的数
	if (x < y)
	{
		temp = x;
		x = y;
		y = x;
	}
	int j, k;
	for (i = y; i >=0; i--)
	{
		if (x % i == 0 && y % i == 0)
		{
			printf("%d",i);
			break;
		}
	}
}*/
//捐款
/*void main()
{
	double x[1000] = { 0 },sum=0;
	int i;
	for (i = 0; i < 1000; i++)
	{
		scanf("%lf",&x[i]);
		sum = sum + x[i];
		if (sum >= 20000)
		{
			break;
		}
	}
	printf("%d人捐款%.2lf元",i+1,sum);
}*/
//补全函数
/*struct stu
{
	char name[10];
	int a, b, c;
};
//获得最高分学生的下标
int maxs(struct stu *p, int n)
{
	int t, i;
	t = 0;
	for (i = 1; i < n; i++)
	{
		if (p[t].a + p[t].b + p[t].c < p[i].a + p[i].b + p[i].c)
			t = i;
	}
	return t;
}
//冒泡排序
void sort(struct stu* p, int n)
{
	int i, j;
	struct stu temp;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - i - 1; j++)
		{
			if (strcmp(p[j].name, p[j + 1].name) > 0)
			{
				temp = p[j];
				p[j] = p[j + 1];
				p[j + 1] = temp;
			}
		}
	}
}
//输入
void intput(struct stu* p, int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		scanf("%s%d%d%d",p[i].name,&p[i].a,&p[i].b,&p[i].c);
	}
}
void main()
{
	struct stu s[10]; int pos;
	intput(s, 10);
	sort(s, 10);
	pos = maxs(s, 10);
	printf("最高分%s\n",s[pos].name);
}*/
//2020C语言真题,计算成绩等级
/*void main()
{
	int n;
	scanf("%d",&n);
	if (n > 100 || n < 0)
		printf("Error data!");
	else
	{
		switch (n / 10)
		{
		case 10:
		case 9:printf("A"); break;
		case 8:printf("B"); break;
		case 7:printf("C"); break;
		case 6:printf("D"); break;
		default:printf("E"); break;
		}
	}
}*/
//有个矩阵3x4的矩阵，求最大数的元素下标输出到屏幕
/*void main()
{
	int i, j, max, x = 0, y = 0;
	int a[3][4] = { {1,2,3,4},{9,8,7,6},{-10,10,-5,2} };
	max = a[0][0];
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (max < a[i][j])
			{
				max = a[i][j];
				x = i;
				y = j;
			}
		}
	}
	printf("%d,%d",x,y);
}*/
//计算字符串中的字母个数
/*void main()
{
	char s[81], * p;
	gets(s);
	p = s;
	while (*p++);
	printf("%d",p-s-1);
}*/
//18年真题 三角形的面积
/*void main()
{
	double a, b, c,s,sum;
	scanf("%lf%lf%lf",&a,&b,&c);
	int flag = 0;
	if ((a + b > c) &&( a + c > b) && (b + c > a))
		flag = 1;
	if (flag == 0)
		printf("false\n");
	if(flag==1)
	{
		s = (a + b + c) / 2;
		sum = sqrt(s * (s - a) * (s - b) * (s - c));
		printf("%.2f",sum);
	}
}
*/
//计算Π的近似值并输出
/*int f(int x)
{
	return x * x;
}
void main()
{
	 
	double term=1,sum=0,i = 1;
	do
	{
		term = 1.0 / (i*i);
		sum = sum + term;
		i++;
	} while (term >=1e-5);
	sum = sum * 6;
	double n = sqrt(sum);
	printf("%f",n);
}*/
//写fbnq()函数,主函数计算前30项和
/*int fbnq(int n)
{
	int a[100] = { 1,1 };
	int i;
	for (i = 2; i <= n; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	return a[n];
}
void main()
{
	int n,i,sum=0;
	scanf("%d",&n);
	printf("%d,",fbnq(n-1));
	for (i = 0; i < n; i++)
	{
		sum += fbnq(i);
	}
	printf("%d",sum);
}*/
/*void main()
{
	int n=5,f1=1,f2=1,f;
	for (int i = 2; i < n; i++)
	{
		f = f1 + f2;
		f1 = f2;
		f2 = f;

	}
	printf("%d",f);
}*/
/*void main()
{
	int i, j, x, y, b[3][4] = {1,2,4,5,6,7,8,9,10,55,25,2};
	x = 0, y = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (b[i][j] > b[x][y])
			{
				b[x][y] = b[i][j];
				x = i;
				y = j;
			}
		}
	}
	printf("%d,%d,%d",b[x][y],x,y);
}*/
//26字母转化前4个
/*void main()
{
	char ch[80], * p = ch;
	gets(ch);
	while (*p != '\0')
	{
		if ((*p >= 'e' && *p <= 'z') || (*p >= 'E' && *p <= 'Z'))
			*p = *p -4;
		else if((*p >= 'a' && *p <= 'd') ||( *p >= 'A' && *p <= 'D'))
			*p = *p + 22;
		p++;
	}
	printf("%s",ch);
	
}*/
//22年真题
/*double f(double x)
{
	double n;
	if (x <= -2)
	{
		n = -exp(2 * x - 1) + 3;//e的x次方
		return n;
	}
	else if (x > -1 && x <= 3)
	{
		n = 2 * x - 1;
		return n;
	}
	else if(x>3)
	{
		n = 2 * log10((3 * x + 5)) - 11;//math函数 1og函数
		return n;
	}
}
void main()
{
	double x;
	scanf("%lf",&x);
	printf("%.2f",f(x));
}*/
//计算数列的前n项和
/*int f(int n)
{
	int i,sum=0;
	for (i = 1; i <= n; i++)
	{
		sum = sum * 10 + i;
	}
	return sum;
}
void main()
{
	int n,i;
	scanf("%d",&n);
	int sun = 0;
	for (i = 1; i <= n; i++)
	{
		sun = sun + f(i);
	}
	printf("%d",sun);
}*/
//计算会费
/*struct Meminfo
{
	char name[10];
	double wage;//工资
	double bonus;//奖金
	double allowance;//补贴
	int due;//会费
};
void main()
{
	struct Meminfo stu[100];
	int n,i;
	//输入
	scanf("%d",&n);
	for (i = 0; i < n; i++)
	{
		scanf("%s%lf%lf%lf",stu[i].name,&stu[i].wage,&stu[i].bonus,&stu[i].allowance);
	}
	//计算会费
	for (i = 0; i < n; i++)
	{
		stu[i].due = stu[i].wage + stu[i].bonus + stu[i].allowance;
		if (stu[i].due <= 3000)
		{
			stu[i].due = stu[i].due * 0.5 / 100;
		}
		else
			if (stu[i].due > 3000 && stu[i].due <= 5000)
			{
				stu[i].due = stu[i].due * 1.0 / 100;
			}
			else 
				if (stu[i].due > 5000)
			{
				stu[i].due = stu[i].due * 1.5 / 100;
			}
	}
	//求会费max
	int max = stu[0].due;
	for (i = 0; i < n; i++)
	{
		if (stu[i].due > max)
		{
			max = stu[i].due;
		}
	}
	for (i = 0; i < n; i++)
	{
		if (stu[i].due == max)
		{
			printf("%s %d\n",stu[i].name,stu[i].due);
		}
	}
}*/
//关于x++的加减
/*void main()
{
	int x = 3,y;
	//y=(x = (x++)+ ++x);//9 8 x:3+5+1 y:3+5
	//y = x = ++x+(x++) ;//9,8 x:4+4+1 y:4+4
	//y = x = ++x + ++x; //10,10 x:5+5 y: 5+5
	//y = x = x++ + x++;//3+3+1+1 y:3+3
	printf("%d,%d",x,y);//
}*/
//判断完全平方数
/*int fun(int n)
{
	int i,	flag = 0;
	for (i = 2; i < n; i++)
	{
		if (i * i == n)
		{
			flag = 1;
			break;
		}
	}
	return flag;
}
void main()
{
	int n;
	scanf("%d",&n);
	if (fun(n) == 1)
		printf("完全平方数");
	else
		printf("不是完全平方数");
	printf("\n");
	//输出所有平方数
	int i;
	for (i = 10; i <= 99; i++)
	{
		if (fun(i) == 1)
			printf("%3d",i);
	}
}*/
//字符数组取数字
/*int fun(char a[])
{
	int i,sum=0;
	for (i = 0; a[i] != '\0'; i++)
	{
		if (a[i] >= '0' && a[i] <= '9')
		{
			sum = sum * 10 + a[i] - '0';
		}
	}
	return sum;
}
void main()
{
	char a[100];
	gets(a);
	printf("%d",fun(a));
}*/
//字符串的截取
/*void fun(char a[], char b[], int n1, int n2)
{
	int i,j=0;
	for (i = n1 - 1; i <= n2; i++)
	{
		b[j++] = a[i];
	}
	b[j] = '\0';
}
void main()
{
	char a[100];
	char b[100];
	int n1=2, n2=5;
	gets(a);
	fun(a, b, n1, n2);
	puts(b);
}*/
/*struct book
{
	char name[20];
	char author[10];
	int price;
};
void main()
{
	int i,j;
	struct book a[200];
	for (i = 0; i < 4; i++)
	{
		scanf("%s%s%d",a[i].name,a[i].author,&a[i].price);
	}
	//价格排序
	struct book temp;
	int min=a[0].price;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4 - 1 - i; j++)
		{
			if (a[j].price < a[j+1].price)
			{
				temp = a[j];
				a[j] = a[j+1];
				a[j+1] = temp;
			}
		}
	}
	for (i = 0; i < 4; i++)
		printf("%s %s %d\n",a[i].name,a[i].author,a[i].price);
}*/
/*int fun(int a, int n)
{
	int i,sum=1;
	for (i = 1; i <= n; i++)
	{
		sum = a * sum;
	}
	return sum;
}
void main()
{
	int a,n;
	scanf("%d%d",&a,&n);
	printf("%d",fun(a,n));
}*/
//数字金字塔
/*void  main()
{
	int n;
	scanf("%d",&n);
	int i, j,k,t;
	for (i = 1; i <= n; i++)
	{
		//空格
		t = 1;
		for (j = 1; j<=n-i; j++)
			printf(" ");
		//shuzi
		for (k = 1; k <=i; k++)
		{
			printf("%d",t++);
		}
		t = t - 1;
		for (k = k - 1; k > 1; k--)
			printf("%d",--t);
		printf("\n");
	}
}*/
//求ex近似
/*void main()
{
	int x,i=1;
	float term = 1, fz=1, fm=1, sum = 0;
	scanf("%d",&x);
	while (term >= 1e-6)
	{
		sum = sum + term;
		fz = x * fz;
		fm = fm * i;
		i++;
		term=fz * 1.0 / fm;
	}
	printf("%f",sum);
}*/
//fun看完数
/*int fun(int n)
{
	int i,sum=1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			sum += i;
		}
	}
	if (sum == n)
		return 1;
	else
		return 0;
}
void main()
{
	int i;
	for (i = 2; i <= 100; i++)
	{
		if (fun(i) == 1)
			printf("%3d",i);
	}
}*/
//字符串复制
/*void main()
{
	char ch[80], * p, * q;
	int len;
	p = ch;
	q = ch;
	gets(ch);
	len = strlen(ch);
	while ((*p) != '\0') p++;
	while (len > 0)
	{
		*p = *q;
		p++;
		q++;
		len--;
	}
	*p = '\0';
	puts(ch);
}*/
//捐款
/*void main()
{
	double a[1000],sum=0;
	int i,count=0;
	for (i = 0; i < 1000; i++)
	{
		scanf("%lf", &a[i]);
		count++;
		sum += a[i];
		if (sum >= 20000)
		{
			break;
		}
	}
	printf("%d人共捐款%.1lf元",count,sum);
}*/
//排序分数
/*#define N 3
struct stu
{
	char name[100];
	int score1;
	int score2;
	int score3;
	int sum;
};
void main()
{
	struct stu a[N];
	int i,j;
	for (i = 0; i < N; i++)
	{
		scanf("%s%d%d%d",a[i].name,&a[i].score1,&a[i].score2,&a[i].score3);
		a[i].sum = a[i].score1 + a[i].score2 + a[i].score3;
	}
	//排序
	struct stu temp;
	for (i = 0; i < N-1; i++)
	{
		for (j = 0; j < N - 1 - i; j++)
		{
			if (a[j].sum < a[j + 1].sum)
			{
				temp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < N; i++)
	{
		printf("%d--%s--%d\n",i+1,a[i].name,a[i].sum);
	}
}*/
/*void main()
{
	int a, n,sum=0;
	scanf("%d%d",&a,&n);
	int i,temp=1;
	for (i = 1; i <= n; i++)
	{
		temp = a* temp;
		sum += temp;
	}
	printf("%d",sum);
}*/
/*void fun(char ch1[], char ch2[])
{
	int i,j=0;
	for (i = 0; ch1[i] != '\0'; i++)
	{
		if (ch1[i] >= '0' && ch1[i] <= '9')
		{
			ch2[j] = ch1[i];
			j++;
		}
	}
	ch2[j] = '\0';
}
void main()
{
	char ch1[100], ch2[100];
	gets(ch1);
	fun(ch1, ch2);
	puts(ch2);
}*/
/*struct stu
{
	char name[20];
	double score;
	double score2;
	double score3;
	double score4;
	int bujige;
	double average;
};
void main()
{
	struct stu student[3];
	int i;
	for (i = 0; i < 3; i++)
	{
		student[i].bujige = 0;
		scanf("%s%lf%lf%lf%lf",student[i].name,&student[i].score,&student[i].score2,&student[i].score3,&student[i].score4);
		student[i].average = (student[i].score + student[i].score2 + student[i].score3 + student[i].score4) / 4;
		
		if (student[i].score < 60)
			student[i].bujige++;
		if (student[i].score2 < 60)
			student[i].bujige++;
		if (student[i].score3 < 60)
			student[i].bujige++;
		if (student[i].score4 < 60)
			student[i].bujige++;
	}
	for (i = 0; i < 3; i++)
		printf("%s  %lf  %d\n", student[i].name, student[i].average,student[i].bujige);
}*/
/*int fun(int a[], int n)
{
	int i;
	for (i = 2; i <= n; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	return a[n];
}
void main()
{
	int a[100] = {1,1}, n;
	scanf("%d",&n);
	int i,sum=0;
	for (i = 0; i < n; i++)
	{
		sum += fun(a, i);
	}
	printf("%d",sum);
}*/
/*void main()
{
	int i, j, x, y, b[3][4];
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			scanf("%d",&b[i][j]);
		}
	}
	int max = b[0][0];
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (max < b[i][j])
			{
				max = b[i][j];
				x = i;
				y = j;
			}
		}
	}
	printf("%d,%d,%d",max,x,y);
}*/
//转换数组
/*void main()
{
	int i,j,a[3][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d",a[i][j]);
		}
		printf("\n");
	}
	printf("\n---------------->\n");
	int b[4][3];
	//转换
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 3; j++)
		{
			b[i][j] = a[j][i];
		}
	}
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%3d", b[i][j]);
		}
		printf("\n");
	}
}*/
//密码
/*void main()
{
	char ch[80],*p=ch;
	gets(ch);
	while (*p!='\0')
	{
		if (*p >= 'A' && *p <= 'D' || *p >= 'a' && *p <= 'd')
		{
			*p = *p + 22;
		}
		else
		{
			*p = *p - 4;
		}
		p++;
	}
	puts(ch);
}*/
//车费
/*void main()
{
	float min, lu,fee;
	scanf("%f%f",&lu,&min);
	if (lu <= 3)
	{
		fee = 10;
	}
	else if (lu <= 10 && lu > 3)
	{
		fee = (lu-3) * 2 + 10;
	}
	else
	{
		fee = (lu - 10) * 3 + 14 + 10;
	}
	if (min < 5)
	{
		fee = fee + 0;
	}
	else
	{
		fee = fee + (min / 5) * 2;
	}
	printf("%.f",fee);
}*/
//计算精度
/*float fun(float n)
{
	float fz=1, fm=2, term=1.0/4, flag = 1;
	float sum = 0;
	while (fm <= 2 * n)
	{
		sum = sum + term*flag;
		fz = fz + 2;
		fm = fm + 2;
		term = fz / (fm*fm);
		flag = -flag;
	}
	return sum;

}
void main()
{
	float fz, fm, term, flag = 1,n;
	scanf("%f",&n);
	printf("%f",fun(n));
}*/
/*void main()
{
	int i, j;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= i; j++)
			printf("%dx%d=%d ",j,i,j*i);
		printf("\n");
	}
}*/
//输出每行的最大值
/*void main()
{
	float b[3][4], max;
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			scanf("%f", &b[i][j]);
	}
	//排
	for (i = 0; i < 3; i++)
	{
		max = b[i][0];
		for (j = 1; j < 4; j++)
		{
			if (max < b[i][j])
			{
				b[i][0] = b[i][j];
			}
		}
		printf("%f\n", b[i][0]);
	}
}*/
/*void main()
{
	float b[3][4], max;
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			scanf("%f",&b[i][j]);
	}
	for (i = 0; i < 3; i++)
	{
		max = b[i][0];
		for (j = 1; j < 4; j++)
			if (max < b[i][j])
				max = b[i][j];
		printf("%f\n",max);
	}
}*/
//金字塔
/*void main()
{
	int i, j, n;
	scanf("%d", &n);
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n - i; j++)
			printf(" ");
		for (j = 1; j <= i; j++)
			printf("%d",j);
		for (j = i - 1; j >= 1; j--)
			printf("%d",j);
		printf("\n");
	}
}*/
//星星
/*void main()
{
	int i, j,n;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n - i; j++)
			printf(" ");
		for (j = 1; j <= 2 * i - 1; j++)
			printf("*");
		printf("\n");
	}
}*/
/*char* finds(char ch[])
{
	int i;
	for (i = 0; ch[i] != '\0'; i++)
	{
		if (ch[i] >= 'A' && ch[i] <= 'Z')
		{
			return ch + i;
			break;
		}
	}
	return NULL;
}
char* find(char* p)
{
	while (*p)
	{
		if (*p >= 'A' && *p <= 'Z')
			return p;
		else p++;
	}
	return NULL;
}
void main()
{
	char ch[100], * p = ch;
	gets(ch);
	p = finds(p);
	if (p == NULL)
		puts("无大写字母");
	else
		puts(p);
}*/
/*struct student
{
	char name[100];
	int num;
	double life;
};
void main()
{
	struct student stu[4];
	int i;
	for (i = 0; i < 4; i++)
		scanf("%s%d%lf",stu[i].name,&stu[i].num,&stu[i].life);
	//排序
	int j;
	struct student temp;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3 - i; j++)
		{
			if (strcmp(stu[j].name, stu[j + 1].name) > 0)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < 4; i++)
		printf("%s国人口%d,平均寿命%f\n",stu[i].name,stu[i].num,stu[i].life);

}*/
/*char* str(char s1[], char s2[], char s3[])
{
	int i;
	int len1 = strlen(s1);
	int len2 = strlen(s2);
	int len3 = strlen(s3);
	for (i = 0; i <= len1 - len2; i++)
	{
		if (strcmp(s1 + i, s2, len2) == 0)
		{
			strncpy(s1 + i, s3, len3);
		}
	}
	return s1;
}
void main()
{
	char s1[] = "abcdefbbbsddsbbb";
	char s2[] = "bbb";
	char s3[] = "ggg";
	char* ps = str(s1, s2, s3);
	puts(ps);
}*/
//10进制转n进制
/*int fun(int m, int n)
{
	int i;
	if ((i = m / n) > 0)
		fun(m / n,n);
	int k;
	k = m % n;
	if (k > 9)
		printf("%c", k - 10 + 65);
	else
		printf("%d", k);
}
void main()
{
	int m,n;
	scanf("%d%d",&m,&n);
	fun(m,n);
}*/
//删除字符s中的下标k开始的n个字符 
/*void main()
{
	char s[100];
	gets(s);
	int i,k,n,j;
	scanf("%d%d",&k,&n);
	j = k + n;
	for (i = 0; i < n; i++)
	{
		s[k++] = s[j++];
	}
	puts(s);
}*/
//JIACHE
/*void func1(int i);
void func2(int i);
char st[] = "hello,friend!";
void func1(int i)
{
	printf("%c", st[i]);
	if (i < 3) {
		i += 2;
		func2(i);
	}
}
void func2(int i)
{
	printf("%c", st[i]);
	if (i < 3) {
		i += 2;
		func1(i);
	}
}
main()
{
	int i = 0;
	func1(i);
	printf("\n");
}*/
/*struct stu
{
	char name[10];
	int num;
	int score;
};
void main()
{
	struct stu s[5] = { {"yang",20041,703},{"lisi",20042,580},{"wang",20043,680},{"sun",20044,550},{"peng",20045,537} }, * p[5], * t;
	int i, j;
	for (i = 0; i < 5; i++)
	{
		p[i] = &s[i];
	}
	for (i = 0; i < 4; i++)
	{
		for (j = i + 1; j < 5; j++)
		{
			if (p[i]->score > p[j]->score)
			{
				t = p[i];
				p[i] = p[j];
				p[j] = t;
			}
		}
	}
	printf("%5d %d",s[1].score,p[1]->score);
}*/
/*void main()
{
	//*t 交换地址原值不变，t 交换值，原值变
	int x, y, * p1, * p2, *t;
	x = 1;
	y = 2;
	p1 = &x;
	p2 = &y;
	t = p1;
	p1 = p2;
	p2 = t;
	printf("%d %d %d %d",x,y,*p1,*p2);
}*/
/*int fun(int n)
{
	int i, j,count=0;
	if ((i = n / 10) > 0)
	{
		fun(n / 10);
		
	}
	printf("%d ", n % 10);
	return count;
}
void main()
{
	int n;
	scanf("%d",&n);
}*/
/*void main()
{
	int a[100],n;
	scanf("%d",&n);
	int i;
	for (i = 0; i < n; i++)
		scanf("%d",&a[i]);
	int x,count=0;
	scanf("%d",&x);
	for (i = 0; i < n; i++)
	{
		if (x == a[i])
			count++;
	}
	printf("%d",count);

}*/
/*int prime(int n)
{
	int i, flag = 1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
		if (i == n)
		{
			flag = 1;
		}
		
	}
		return flag;
}
void main()
{
	int n,i;
	scanf("%d",&n);
	for (i = n + 1;; i++)
	{
		if (prime(i) == 1)
		{
			printf("%d",i);
			break;
		}
	}
}*/
//插入
/*void main()
{
	int a[10] = { 1,3,7,9 };
	int n=4,x,i,j;
	scanf("%d",&x);
	for (i = 0; i < 3; i++)
	{
		if (a[i] > x)
		{
			break;
		}
	}
	for (j = 3; j >= i; j--)
	{
		a[j + 1] = a[j];
	}
	a[i] = x;
	for (i = 0; i < 5; i++)
		printf("%d ",a[i]);
}*/
/*struct stu
{
	char name[10];
	int a, b, c;
};
void input(struct stu s[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		scanf("%s%d%d%d",s[i].name,&s[i].a,&s[i].b,&s[i].c);
}
void sort(struct stu s[], int n)
{
	int i,j;
	struct stu temp;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (strcmp(s[j].name, s[j+1].name) < 0)
			{
				temp = s[j];
				s[j] = s[j + 1];
				s[j + 1] = temp;
			}
		}
	}
}
int maxs(struct stu s[], int n)
{
	int i,temp=0;
	for (i = 0; i < n; i++)
	{
		if ((s[temp].a + s[temp].b + s[temp].c) < (s[i].a + s[i].b + s[i].c))
		{
			temp = i;
		}
	}
	return temp;
}
void main()
{
	struct stu s[3];
	int pos;
	input(s, 3);
	sort(s, 3);
	pos = maxs(s, 3);
	printf("%s",s[pos].name);
}*/
//100-999的素数
/*int isprime(int x)
{
	int i,flag=1;
	for (i = 2; i < x; i++)
	{
		if (x % i == 0)
		{
			flag = 0;
		}
	}
	if (x == 1)
		flag = 0;
	return flag;
}
void main()
{
	int i;
	for (i = 100; i <= 999; i++)
	{
		if (isprime(i) == 1)
			printf("%5d",i);
	}
}*/
//s=a+aa+aaa+...
/*void main()
{
	int i,term=0,a, n,sum=0;
	scanf("%d,%d",&a,&n);
	for (i = 1; i <= n; i++)
	{
		term =  term*10+a;
		sum = sum + term;
	}
	printf("%d",sum);
}*/
//输出最短的字符串
/*void main()
{
	char s[4][20];
	int i, len;
	for (i = 0; i < 3; i++)
		gets(s[i]);
	int min = strlen(s[0]);
	//求字符串的最短长度
	for (i = 0; i < 3; i++)
	{
		if (min > strlen(s[i]))
		{
			min = strlen(s[i]);
		}
	}
	for (i = 0; i < 3; i++)
	{
		if (strlen(s[i]) == min)
			puts(s[i]);
	}
}*/
typedef struct
{
	char name[10];
	float result;

}Diver;
/*void main()
{
	float max, min, sum, score[6];
	int i, j;
	Diver ds[10];
	for (i = 0; i < 3; i++)
	{
		scanf("%s",ds[i].name);
		sum = 0;
		for (j = 0; j < 6; j++)
		{
			scanf("%f",&score[j]);
			sum += score[j];
		}
		max = min = score[0];
		for (j = 1; j < 6; j++)
		{
			if (max < score[j]) max = score[j];
			if (min > score[j]) min = score[j];
		}
		ds[i].result = (sum - max - min) / 4;

	}
	for (i = 0; i < 3; i++)
		printf("%s: %.1f\n",ds[i].name,ds[i].result);
}*/
/*void main()
{
	Diver ds[10];
	float max, min, sum, score[6];
	int i, j;
	for (i = 0; i < 3; i++)
	{
		sum = 0;
		scanf("%s",ds[i].name);
		for (j = 0; j < 6; j++)
		{
			scanf("%f", &score[j]);
			sum = score[j] + sum;
		}
		//max;
		max = min=score[0];
		for (j = 0; j < 6; j++)
		{
			if (max < score[j])	max = score[j];
			if (min > score[j])min = score[j];
		}
		ds[i].result = (sum - max - min)/4;
	}
	for (i = 0; i < 3; i++)
		printf("%s总分：%.1f\n",ds[i].name,ds[i].result);
}*/
/*void main()
{
	int i;
	double sum = 100,high=100,t;
	for (i = 0; i < 10; i++)
	{

		high = high / 2;
		t = high * 2;
		sum = sum + t;
	}
	printf("%f  %f",sum,high);
}*/
/*void main()
{
	int a[6];
	int i,sum=0,max,min;
	for (i = 0; i < 6; i++)
	{
		scanf("%d",&a[i]);
		sum += a[i];
	}
	max = min = a[0];
	for (i = 0; i < 6; i++)
	{
		if (max < a[i]) max = a[i];
		if (min > a[i]) min = a[i];
	}
	printf("%.1f",(sum-max-min)*1.0/4);
}*/
/*struct stu
{
	char name[10];
	char number[10];
	int score[3];
};
void main()
{
	struct stu s[3];
	int i,max;
	for (i = 0; i < 3; i++)
	{
		scanf("%s%s%d%d%d",s[i].name,s[i].number,&s[i].score[0],&s[i].score[1],&s[i].score[2]);
	}
	//计算max;
	max = s[0].score[0] + s[0].score[1] + s[0].score[2];
	for (i = 1; i < 3; i++)
	{
		if (max < (s[i].score[0] + s[i].score[1] + s[i].score[2]))
			max = s[i].score[0] + s[i].score[1] + s[i].score[2];
	}
	printf("总分:%d,分别为:\n",max);
	for (i = 0; i < 3; i++)
	{
		if (max == (s[i].score[0] + s[i].score[1] + s[i].score[2]))
			printf("%s %s %d %d %d \n",s[i].name,  s[i].number, s[i].score[0], s[i].score[1], s[i].score[2]);
	}
}*/
/*void main()
{
	int n;
	scanf("%d",&n);
	if (n >= 1 && n <= 7)
	{
		switch (n)
		{
		case 1:printf("星期一"); break;
		case 2:printf("星期二"); break;
		case 3:printf("星期三"); break;
		case 4:printf("星期四"); break;
		case 5:printf("星期五"); break;
		case 6:printf("星期六"); break;
		case 7:printf("星期七"); break;
		}
	}
	else
	{
		printf("输入有误");
	}
}*/
/*void main()
{
	int a[20] = { 1,1 };
	int i;
	for (i = 2; i < 20; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	for (i = 0; i < 20; i++)
	{
		if (i != 0 && i % 4 == 0)
			printf("\n");
		printf("%5d ", a[i]);
	}
}*/
/*struct student
{
	char name[20];
	double score[4];
	double average;
	int fail;
};
void main()
{
	struct student s[3];
	int i;
	for (i = 0; i < 3; i++)
	{
		scanf("%s%lf%lf%lf%lf", s[i].name, &s[i].score[0], &s[i].score[1], &s[i].score[2], &s[i].score[3]);
		s[i].average = (s[i].score[0] + s[i].score[1] + s[i].score[2] + s[i].score[3]) / 4;
		s[i].fail = 0;
		if (s[i].score[0] < 60)
			s[i].fail++;
		if (s[i].score[1] < 60)
			s[i].fail++;
		if (s[i].score[2] < 60)
			s[i].fail++;
		if (s[i].score[3] < 60)
			s[i].fail++;
	}
	for (i = 0; i < 3; i++)
	{
		printf("名字:%s 平均分:%.2lf 不及格门数%d\n",s[i].name,s[i].average,s[i].fail);
	}
}*/
//实现strcmp函数功能
/*int fun(char* s1, char* s2)
{
	int i = 0;
	for (i = 0; s1[i] == s2[i] && s1[i] != '\0' && s2[i] != '\0'; i++);
	return *s1 - *s2;
}
void main()
{
	char s[20] = "bcdefg";
	char s2[20] = "bcdefg";
	printf("%d",fun(s,s2));
}*/
/*int fun(int n)
{
	int i,flag=1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	}
	if (n == 1)
		flag = 0;
	return flag;
}
void main()
{
	int n,i;
	scanf("%d",&n);
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			if (fun(i))
				printf("%d ",i);
		}
	}
}*/
/*int tj(double a[], int n)
{
	int i,count=0,temp;
	double sum=0;
	for (i = 0; i < n; i++)
	{
		sum += a[i];
	}
	temp = sum / n;
	for (i = 0; i < n; i++)
	{
		if (a[i] < temp)
			count++;
	}
	return count;
}
void main()
{
	double a[4];
	int i;
	for (i = 0; i < 4; i++)
	{
		scanf("%lf",&a[i]);
	}
	printf("The result is :%d",tj(a,4));
}*/
/*float fun(int n)
{
	float fz = 1, fm = 2, sum=0, i;
	for (i = 1; i <= n; i++)
	{
		sum = sum + 1 / i;
	}
	return sum;
}
void main()
{
	int n;
	scanf("%d",&n);
	printf("%.2f",fun(n));
}*/
/*
void main()
{
	int n;
	scanf("%d",&n);
	int sum = 0;
	do
	{
		sum =sum*10+ n % 10;
		n = n / 10;
	} while (n);
	printf("%d",sum);
}*/
/*int fun(int n)
{
	if (n <= 9)
		printf("%d",n);
	else
	{
		printf("%d",n%10);
		fun(n / 10);
	}
}
void main()
{
	int n = 12453;
	fun(n);
}*/
/*int fun(int x)
{
	int i,flag=1;
	for (i = 2; i < x; i++)
	{
		if (x % i == 0)
		{
			flag = 0;
			return flag;
		}
	}
	if (x == 1)
		flag == 0;
	return flag;
}
void main()
{
	int n;
	scanf("%d",&n);
	if (fun(n))
		printf("1");
	else
		printf("0");
}*/
/*struct item
{
	char name[20];
	int count;
}mans[5] = { {"name1",0},{"name2",0},{"name3",0},{"name4",0},{"name5",0}};
void main()
{
	int i,a=0,b=0,t=0,count=0;
	char c[6];
	
	do {
		gets(c);
		a = 0, b = 0, t = 0;
		for (i = 0; i < 5; i++)
		{
			if (c[i] == '0')
				a++;
			if (c[i] == '1')
			{
				b++;
			}
			t++;
		}
		if (t == 5 && a == 2 && b == 3)
		{
			count++;
		}
		else//不满足3个有效的条件重新检测
			continue;
		for (i = 0; i < 5; i++)
		{
			if (c[i] == '1')
				mans[i].count++;
		}
	} while (c[0] != '\0');
	printf("有效数:%d\n",count);
	for (i = 0; i < 5; i++)
	{
		printf("%s:%d\n",mans[i].name,mans[i].count);
	}
}*/
//奇数位合成新数字
/*int fu(long s)//偶数合成新数字
{
	int sum = 0;
	int temp = 1;
	while (s > 0)
	{
		sum = sum + s % 100 / 10 * temp;
		temp = temp * 10;
		s = s / 100;
	}
	return sum;
}
int fun(long s)
{
	int sum = 0;
	int temp = 1;
	while (s > 0)
	{
		sum = sum + s % 10 * temp;
		temp = temp * 10;
		s /= 100;
	}
	return sum;
}
int funs(long s, long* t)//偶数位为零
{
	long ss = 1;
	*t = 0;
	while (s > 0)
	{
		*t = s % 10 * ss + *t;
		ss = ss * 100;
		s = s / 100;
	}
	return *t;
}
main()
{
	long s, t;
	scanf("%ld",&s);
	printf("%d",fu(s));
	//printf("%d", funs(s,&t));
}*/
//字符串的复制
/*char copy(char str1[], char str2[])
{
	int j=0,i=0;
	while (str2[i] != '\0')
	{
		str1[j] = str2[i];
		i++;
		j++;
	}
	str1[i] = '\0';
}
void main()
{
	char str1[100], str2[100];
	gets(str2);
	copy(str1, str2);
	puts(str1);
}*/
/*int fun(int a[][3])
{
	int i, j=0;
	for (i = 0; i < 3; i++)
	{
		j = j + a[i][3 - 1 - i];
	}
	return j;
}
void main()
{
	int a[3][3], i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
			scanf("%d",&a[i][j]);
	}
	printf("%d",fun(a));
}*/
/*char fun(int n)
{
	if (n / 10 > 0)
		fun(n / 10);
	printf("%c",n%10+'0');
}
void main()
{
	int n;
	scanf("%d",&n);
	fun(n);
}*/
//ABCD=>ABCDDCBA
/*void main()
{
	char s[81], * p, * q;
	gets(s);
	p = q = s;
	while (*q != '\0') q++;
	while (*p != '\0') p++;
	q--;
	while (q >= s)
	{
		*p++ = *q--;
	}
	*p = '\0';
	puts(s);
}*/
//成绩大于和 23 2*3》2+3
/*void main()
{
	int n,shi,ge;
	for (n = 10; n <= 99; n++)
	{
		ge = n % 10;
		shi = n / 10;
		if (ge * shi > ge + shi)
			printf("%5d",shi*10+ge);
	}
}*/
//数字转字符
/*int fun(char c[])
{
	int i = 0;
	int flag = 1;
	if (c[0] == '-')
	{
		flag = -1;
		i = 1;
	}
	int sum = 0;
	while (c[i] != '\0')
	{
		sum = c[i] - '0' + sum * 10;
		i++;
	}
	printf("%d",sum*flag);
}
void main()
{
	char c[100];
	gets(c);
	fun(c);
}*/
//去重复
/*void main()
{
	//必须排好的数
	int a[20] = { 1,1,1,2,3,3,3,4,5,5 };
	int b[20];
	int index = 1,i,j;
	b[0] = a[0];
	for (i = 1; i < 10; i++)//10个数
	{
		//解析：默认第一个是不重复的,第2个和第一个比较
		//相同不赋值，不同进行赋值
		if (a[i] != a[i - 1])
			b[index++] = a[i];//index控制下标
	}
	for (i = 0; i < index; i++)
		printf("%d",b[i]);
}*/
//结构体找最差的
/*typedef struct
{
	char name[10];
	int num;
}emp;
void input(emp a[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		scanf("%s%d",a[i].name,&a[i].num);
}
int qmin(emp a[], int n)
{
	int i,min=a[0].num;
	for (i = 0; i < n; i++)
	{
		if (min > a[i].num)
			min = a[i].num;
	}
	return min;
}
void output(emp a[], int n, int n2)
{
	int i;
	for (i = 0; i < n; i++)
	{
		if (a[i].num == n2)
		{
			printf("%s:%d\n",a[i].name,a[i].num);
		}
	}
}
void main()
{
	emp a[4];
	int i, min;
	input(a, 4);
	min = qmin(a, 4);
	output(a, 4, min);
}
*/
/*void main()
{
	double fz=1, fm=2*fz-1, term,sum=0,temp=1;
	term = fz / (fm*(2*fz+1));
	while (term >= 0.0001)
	{
		sum = sum + term;
		temp++;
		fz = temp;
		fm = 2 * fz - 1;
		term = fz / (fm * (2 * fz + 1));
	}
	printf("%f",sum);
}*/
/*void main()
{
	char a[3][30], * p;
	int i;
	p = a[0];
	for (i = 0; i < 3; i++)
		gets(a[i]);
	for (i = 0; i < 3; i++)
	{
		if (strcmp(p, a[i]) < 0)
			p = a[i];
	}
	puts(p);
}*/
//一元二次方程
/*void main()
{
	double a, b, c,sum,sum2;
	scanf("%lf%lf%lf",&a,&b,&c);
	if ((b * b - 4 * a * c) < 0)
		printf("无根");
	else
		if (((b * b - 4 * a * c) == 0))
		{
			sum = ((-b + sqrt(b * b - 4 * a * c)) / 2 * a);
				printf("%f",sum);
		}
		else
			if (((b * b - 4 * a * c) > 0))
			{
				sum = ((-b + sqrt(b * b - 4 * a * c)) / 2 * a);
				sum2 = ((-b - sqrt(b * b - 4 * a * c)) / 2 * a);
				printf("%f \n%f", sum,sum2);
			}
}*/
//求Π
/*void main()
{
	double sum = 0, fm, term=1, flag = 1,temp=1;
	while (fabs(term) >= 1e-8)
	{
		sum = sum + term*flag;
		temp += 2;
		term = 1.0 / temp;
		flag = -flag;

	}
	printf("%f",sum*4);
}*/
/*int fun(int a[], int b[], int n)
{
	int i, j, count = 0, flag = 0;;
	for (i = 0; i < 4; i++)
	{
		flag = 0;
		for (j = 0; j < 4; j++)
		{
			if (a[i] == b[j])
			{
				flag = 1;
				break;
			}
		}
		if (flag == 1)
			count++;
	}
	return count;
}
void main()
{
	int a[4] = { 4,6,7,2 }, b[4] = { 4,2,7,4 };
	printf("%d",fun(a,b,4));
}*/
//给定数组求非素数之和
/*int fun(int a[])
{
	int flag=1,j,i,sum=0;
	for (i = 0; i < 12; i++)
	{
		flag = 1;
		//素数
		for (j = 2; j < a[i]; j++)
		{
			if (a[i] % j == 0)
			{
				flag = 0;
				break;
			}
		}
		if (flag == 0)
		{
			sum += a[i];
		}
	}
	return sum;
}
void main()
{
	int a[12] = { 22,3,65,37,18,19,10,11,12,23,15,17 };
	printf("%d",fun(a));
}*/
/*void main()
{
	int n, n1,sum=0;
	scanf("%d%d",&n,&n1);
	switch (n-1)
	{
	case 0:sum += 0; break;
	case 1:sum += 31; break;
	case 2:sum += 31+31; break;
	case 3:sum += 31+31+31; break;
	case 4:sum += 30+31+31+31; break;
	case 5:sum += 31+ 30 + 31 + 31 + 31; break;
	case 6:sum += 30+ 31 + 30 + 31 + 31 + 31; break;
	case 7:sum += 31+ 31 + 30 + 31 + 31 + 31+30; break;
	case 8:sum += 31+ 31 + 31 + 30 + 31 + 31 + 31 + 30; break;
	case 9:sum += 30+ 31 + 31 + 31 + 30 + 31 + 31 + 31 + 30; break;
	case 10:sum += 31+ 30 + 31 + 31 + 31 + 30 + 31 + 31 + 31 + 30; break;
	case 11:sum += 30+ 31 + 30 + 31 + 31 + 31 + 30 + 31 + 31 + 31 + 30; break;
	case 12:sum += 31+ 30 + 31 + 30 + 31 + 31 + 31 + 30 + 31 + 31 + 31 + 30; break;
	}
	printf("%d",sum+n1);
}*/
/*#define n 3 //更改数字表明输入人数
struct student
{
	char id[20];
	char name[20];
	int score[3];
};
char fun(struct student stu[])
{
	int i,j;
	struct student temp;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (strcmp(stu[j].name, stu[j + 1].name) > 0)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}

}
void main()
{
	int i;
	struct student stu[3];
	for (i = 0; i < n; i++)
	{
		scanf("%s %s %d %d %d", stu[i].id, stu[i].name, &stu[i].score[0], &stu[i].score[1], &stu[i].score[2]);
	}
	fun(stu);
	for (i = 0; i < n; i++)
	{
		printf("%s %s %d %d %d\n", stu[i].id, stu[i].name, stu[i].score[0], stu[i].score[1], stu[i].score[2]);
	}
}*/
/*int fun(int n)
{
	int flag = 0;
	if (n % 400 == 0 || (n % 100 != 0 && n % 4 == 0))
	{
		flag = 1;
	}
	return flag;
}
void main()
{
	int i,j;
	for (i = 1900, j = 0; i <= 2020; j++, i++)
	{
		if (fun(i) == 1)
		{
			printf("%d ", i);
			if (j != 0 && j % 5 == 0)
				printf("\n");
		}
		
	}
}*/
/*void main()
{
	float num,flag=1,fz=1,fm=1,term,sum=0,temp=1;
	scanf("%f",&num);
	term = 1;
	while (fabs(term) >= 1e-6)
	{
		sum = sum + term * flag;
		fz = num * fz;
		fm = fm * temp;
		temp++;
		term = fz / fm;
		flag = -flag;
	}
	printf("%f",sum);
}*/
/*void strappend(char ch[], char ch1[])
{
	int i, j;
	for (i = 0; ch[i]; i++);
	for (j = 0; ch1[j]; j++, i++)
	{
		ch[i] = ch1[j];
	}
	ch[i] = '\0';
}
void strasc(char ch[])
{
	int count = strlen(ch);
	int i, j;
	char temp;
	for (i = 0; i < count - 1; i++)
	{
		for (j = 0; j < count - 1 - i; j++)
		{
			if (ch[j] > ch[j + 1])
			{
				temp = ch[j];
				ch[j] = ch[j + 1];
				ch[j + 1] = temp;
			}
		}
	}
}
void main()
{
	char ch[100] = "good morning", ch1[40] = "HAHAHa";
	strappend(ch, ch1);//链接
	strasc(ch);//升序排
	puts(ch);
}*/
//妙招
/*void main()
{

	//int c[12] = { 1,2,12,14 },i;
	//for(i=0;i<4;i++)
	int n;
	scanf("%d",&n);
	while (1)
	{
		switch (n)
		{
		case 1:printf("Ace"); break;
		case 2:printf("2"); break;
		case 3:printf("3"); break;
		case 4:printf("4"); break;
		case 5:printf("5"); break;
		case 6:printf("6"); break;
		case 7:printf("7"); break;
		case 8:printf("8"); break;
		case 9:printf("9"); break;
		case 10:printf("10"); break;
		case 11:printf("Jack"); break;
		case 12:printf("Queen"); break;
		case 13:printf("King"); break;
		default:printf(" "); break;
		}
		scanf("%d",&n);
	}
}*/
//斐波那契数列
/*void main()
{
	int f1 = 1, f2 = 1, f, i, sum = 0;
	sum = 2;
	for (i = 0; i < 18; i++)
	{

		f = f1 + f2;
		sum += f;
		f1 = f2;
		f2 = f;
	}
	printf("%d",sum);
}*/
/*void main()
{
	char ch[50];
	int i = 0, num[10] = {0};
	while ((ch[i] = getchar()) != '#')
	{
		if (ch[i] >= '0' && ch[i] <= '9')
			num[ch[i] - '0']++;
		i++;
	}
	for (i = 0; i < 10; i++)
	{
		if (num[i] > 0)
		{
			printf("含%d个数:%d\n",i,num[i]);
		}
	}
}*/
/*#define n 3
struct student
{
	char neme[10];
	double math;
	double c;
	double avreage;
};
void main()
{
	int i;
	double sum=0;
	struct student stu[n];
	for (i = 0; i < n; i++)
	{
		scanf("%s%lf%lf",stu[i].neme,&stu[i].math,&stu[i].c);
		stu[i].avreage = (stu[i].c + stu[i].math) / 2;
	}
	//排序高低输出
	int max = stu[0].avreage,j;
	struct student temp;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (stu[j].avreage < stu[j + 1].avreage)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	//输出
	printf("优秀者排名:\n");
	for (i=0; i < n; i++)
	{
		printf("%s ",stu[i].neme);
	}
	//输出高于90分和不及格的人
	printf("\n特别优秀者:\n");
	for (i = 0; i < n; i++)
	{
		if (stu[i].avreage > 90)
			printf("%s ",stu[i].neme);
	}
	printf("\n不及格:\n");
	for (i = 0; i < n; i++)
	{
		if (stu[i].avreage < 60)
			printf("%s ", stu[i].neme);
	}
}*/
//数字金字塔
/*void main()
{
	int n;
	scanf("%d",&n);
	int i, j, k;
	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n - i; j++)
			printf(" ");
		for (k = 1; k <= i; k++)
			printf("%d",k);
		for (k = i - 1; k >= 1; k--)
			printf("%d",k);
		printf("\n");
	}
}*/
/*void main()
{
	int num[26] = { 0 }, i;
	char str[100];
	gets(str);
	for (i = 0; str[i]; i++)
	{
		if (str[i] >= 'A' && str[i] <= 'Z')
			num[str[i] - 'A']++;
	}
	for (i = 0; i < 26; i++)
		if (num[i] != '\0')
			printf("%c:%d\n", 'A' + i,num[i]);
}*/
/*#define n 4
struct student
{
	char name[10];
	char id[10];
	double score[3];
	double sum;
};
void main()
{
	int i;
	struct student stu[n];
	for (i = 0; i < n; i++)
	{
		scanf("%s%s%lf%lf%lf", stu[i].name, stu[i].id, &stu[i].score[0], &stu[i].score[1], &stu[i].score[2]);
		stu[i].sum = stu[i].score[0] + stu[i].score[1] + stu[i].score[2];
	}
	int j,max = stu[0].sum;
	for (j = 0; j < n; j++)
	{
		if (max < stu[i].sum)
			max = stu[i].sum;
	}
	for (i = 0; i < n; i++)
	{
		if (max == stu[i].sum)
			printf("%s %s %.2lf %.2lf %.2lf\n", stu[i].name, stu[i].id, stu[i].score[0], stu[i].score[1], stu[i].score[2]);
	}
}*/
/*#define n 4
struct student
{
	char id[10];
	char name[10];
	float math;
	float eng;
	float avg;
};
void main()
{
	struct student stu[n];
	int i;
	for (i = 0; i < n; i++)
	{
		scanf("%s%s%f%f",stu[i].id,stu[i].name,&stu[i].math,&stu[i].eng);
		stu[i].avg = (stu[i].math + stu[i].eng)*1.0 / 2;
	}
	struct student temp;
	int j;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (stu[j].avg < stu[j + 1].avg)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	//排名
	for (i = 0; i < n; i++)
	{
		printf("%s\n",stu[i].name);
	}
	printf("\n90up:\n");
	for (i = 0; i < n; i++)
	{
		if (stu[i].avg > 90)
			printf("%s\n",stu[i].name);
	}
	printf("\n60down:\n");
	for (i = 0; i < n; i++)
	{
		if (stu[i].avg < 60)
			printf("%s\n", stu[i].name);
	}

}*/
/*void main()
{
	char s[81], * p;
	gets(s);
	p = s;
	while (*p) p++;
	printf("%d",p-s);
}*/
//删除字符串
/*int fun(int a[], int n)
{
	int i, j,max=0;
	for (i = 0; i < 5; i++)
	{
		if (a[i] == n)
		{
			max++;
			break;
		}
	}
	for (j = i; j < 5; j++)
	{
		a[j] = a[j + 1];
	}
	return max;
}
void main()
{
	int a[5] = { 1,2,2,2,5 };
	int n, max=0;
	scanf("%d",&n);
	int i,j;
	for (i = 0; i < 5; i++)
		max=max+fun(a, n);
	for (i = 0; i < 5-max; i++)
		printf("%d ",a[i]);
}*/
//迭代法
/*void main()
{
	float x = 1, x0;
	int n;
	scanf("%d",&n);
	do
	{
		x0 = (x + n / x) / 2;
		//中断条件
		if (fabs(x0 - x) < pow(10, -5))
		{
			break;
		}
		//进行赋值
		else
		{
			x = x0;
		}
	} while (1);
	printf("%dis %f\n",n,x0);
}*/
//test 检测 文件
/*int fun(char a[], char b[])
{
	int i, k = 0;
	int n = strlen(b);
	for (i = 0; i < 20; i++)
	{
		if (strncmp(a + i, b, n) == 0)
		{
			return i;//锁定下标
			break;
		}
	}
}
int flag(char a[], char b[],int n)
{
	if (strncmp(a, b, n) == 0)
		return 1;
	else
		return 0;
}
void main()
{
	char a[100] = "asdfghjkl";
	char b[20] = "fg";
	char c[100];
	int length = strlen(b);
	int count = fun(a, b);
	//puts(a + count+length);
	puts(a);
	int i,k=0,j=0;
	for (i = 0; i < 20; i++)
	{
		if (a[i] != b[0])
			c[k++] = a[i];
		else if (flag(a + 3, b, length))
		{
			c[k++] = a[fun(a, b) + length];
			i = fun(a, b) + length;
		}
		else
			c[k++] = a[i];
	}
	puts(c);
}*/
//删掉指定字符串
/*void main()
{
	//核心函数---strncmp()
	char a[100] = "abcdsefghjgkessefdlmn";//可以字符接收
	char b[10] = "sefgh";
	int len = strlen(b);//计算b的长度
	int i,j=0,k=0;
	char c[100];
	for (i = 0; a[i]; i++)
	{
		if (a[i] != b[0])//如果当前的字母不等于要删除的字符串的首地址
		{
			c[k++] = a[i];//开始直接赋值
		}
		else
			if (a[i] == b[0] && (strncmp(a + i, b, len) == 0))//如果当前字符等于要删除的子字符 开始比较原字符串与要删除的字符串是否一致,一致进行跳过复制
			{
				c[k++] = a[i + len];//i+长度跳到下一个准备赋值的字符
				i = i + len;//对i进行指针指向
			}
			else
				c[k++] = a[i];//杜绝当前的字符与要删除的字符一样但是字符串不一样的情况
	}
	c[k] = '\0';//赋'\0'进行输出
	puts(c);
}*/
//查找下标
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,9,0 };
	int n;
	scanf("%d",&n);
	int temp,i,flag=0;
	for (i = 0; i < 10; i++)
	{
		if (n == a[i])
		{
			flag = 1;
			temp = i;
			break;
		}
	}
	if (flag)
		printf("%d", i);//i==temp
	else
		printf("not found");
}*/
//判断完数
/*void main()
{
	int i;
	int n, sum = 0;
	scanf("%d",&n);
	for (i = 1; i < n; i++)
	{
		if (n % i == 0)
		{
			sum = sum + i;
		}
	}
	if (sum == n)
		printf("完数");
}*/
//test
/*void main()
{
	double s,a, b, c;
	int flag = 1;
	scanf("%lf%lf%lf",&a,&b,&c);
	if (a + b < c || a + c < b || b + c < a)
	{
		printf("false");
	}
	else
	{
		double area;
		s = (a + b + c) / 2.0;
		area = sqrt(s * (s - a) * (s - b) * (s - c));
		printf("%.2f",area);
	}
}*/
//气温排序小到大
/*struct data
{
	char name[10];
	double temper[4];
	double avg;
};
void main()
{
	int i,j;
	struct data stu[5];
	for (i = 0; i < 5; i++)
	{
		scanf("%s%lf%lf%lf%lf", stu[i].name, &stu[i].temper[0], &stu[i].temper[1],&stu[i].temper[2],&stu[i].temper[3]);
		stu[i].avg = (stu[i].temper[0] + stu[i].temper[1] + stu[i].temper[2] + stu[i].temper[3]) / 4.0;
	}
	//排序
	struct data temp;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5 - 1 - i; j++)
		{
			if (stu[j].avg > stu[j + 1].avg)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
		printf("%s:%.2f\n",stu[i].name,stu[i].avg);
}*/
//将十进制转换任意进制
/*int fun(int n, int m)
{
	int i,temp;
	if ((i = n / m) > 0)
		fun(n / m,m);
	temp = n % m;
	if (temp >= 10)
		printf("%c", temp - 10 + 'A');
	else
		printf("%d",temp);
}
void main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	fun(n, m);
}*/
//查数组小标
/*void main()
{
	int a[10];
	int i;
	for (i = 0; i < 10; i++)
		scanf("%d",&a[i]);
	printf("输入查询数据:\n");
	int n,flag=0;
	scanf("%d",&n);
	for (i = 0; i < 10; i++)
	{
		if (a[i] == n)
		{
			flag = 1;
			break;
		}
	}
	if (flag == 0)
		printf("not found\n");
	else
		printf("要查询的下标:%d\n",i);
}*/
//杨辉三角
/*void main()
{
	int i, j, a[10][10] = {0};
	for (i = 0; i <=9; i++)
	{
		for (j = 0; j <= i; j++)
		{
			a[i][0] = 1;
			if(i==j)
			a[i][i] = 1;
			else
			a[i][j] = a[i - 1][j - 1] + a[i - 1][j];
		}
	}
	for (i = 0; i <= 9; i++)
	{
		for (j = 0; j <=i; j++)
			printf("%d ",a[i][j]);
		printf("\n");
	}
}*/
//字符串连接
/*void fun(char a[], char b[])
{
	int i = 0,j=0;
	for (;b[i];)
		a[j++] = b[i++];
	a[j] = '\0';
}
void main()
{
	char ch1[100],ch2[100];
	gets(ch2);
	fun(ch1, ch2);
	puts(ch1);
}*/
//转置
/*void main()
{
	int i,j,x,n,a[10][10],b[10][10];
	scanf("%d",&n);
	for (i = 0; i <= n - 1; i++)
	{
		for (j = 0; j <= n - 1; j++)
			a[i][j] = i * n + j + 1;
	}
	for (i = 0; i <= n - 1; i++)
	{
		for (j = 0; j <= n - 1; j++)
		{
			b[j][i] = a[i][j];
		}
	}
	for (i = 0; i <= n - 1; i++)
	{
		for (j = 0; j <= n - 1; j++)
		{
			printf("%3d ",b[i][j]);
		}
		printf("\n");
	}
}*/
//23真题移位
/*int main()
{
	int n,i,a[100];
	printf("请输入数字个数:\n");
	scanf("%d",&n);
	for (i = 0; i < n; i++)
		scanf("%d",&a[i]);
	printf("输入要移动的个数:\n");
	int m;
	scanf("%d",&m);
	int b[100], j=0;
	for (i = n-m; i < n; i++)
	{
		b[j++] = a[i];
	}
	for (i = 0; i <n-m; i++)
	{
		b[j++] = a[i];
	}
	for (i = 0; i < n; i++)
		printf("%d ",b[i]);
}*/
/*void main()
{
	//指针
	char ch[10];
	gets(ch);
	char* p, * q;
	p = q = ch;
	while (*p)
		p++;
	p--;
	int flag = 1;
	while (p>q)
	{
		if (*p != *q)
		{
			flag = 0;
			break;
		}
		p--;
		q++;
	}
	if (flag)
		printf("yes");
	else
		printf("no");
}*/
//猴子吃桃两种解法
/*int f(int n)
{
	int sum = 0;
	if (n == 10)
		return sum = 1;
	else
		sum = (f(n + 1) + 1) * 2;
	return sum;
}
void main()
{
	int age = 1;
	//printf("%d",f(age));
	int x1,x2=1,day = 10;
	while (day > 1)
	{
		x1 = (x2 + 1) * 2;
		x2 = x1;
		day--;
	}
	printf("%d",x1);
}*/
/*void main()
{
	char c[40],d[80];
	gets(c);
	int i,j=0;
	for (i = 0; c[i]; i++)
	{
		d[j++] = c[i];
		d[j++] = ' ';
	}
	d[j] = '\0';
	puts(d);
}*/
//一个偶数能表示俩个素数之和
/*void main()
{
	int a, b, c, d;
	scanf("%d",&a);
	for (b = 3; b <= a / 2; b += 2)
	{
		for (c = 2; c < b; c++)
			if (b % c == 0)
				break;
		if (c >= b)
			d = a - b;
		else
			break;
		for (c = 2; c < d; c++)
			if (d % c == 0)
				break;
		if (c >= d)
			printf("%d=%d+%d",a,b,d);
	}
}*/
//计算工资
/*void main()
{
	int a[6] = {1,3,2,1,1,2}, b[6];
	int i, j,temp;
	//paixu
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 6 - 1 - i; j++)
		{
			if (a[j] > a[j+1])
			{
				temp = a[j];
				a[j] = a[j+1];
				a[j+1] = temp;
			}
		}
	}
	//去重复
	j = 1;
	int k = a[0];
	for (i = 1; i < 6; i++)
	{
		if (k != a[i])
		{
			a[j++] = a[i];
			k = a[i];
		}
	}
	for (i=0; i<j; i++)
		printf("%d",a[i]);
}*/
//删除重复字符重要
/*int main(void)
{
	char s[100] = {"sdjiaosdas"};
	int i, j, n, k;
	printf("请输入一串有重复字符的字符串:\n");
	gets(s);
	for (n = 0; s[n] != '\0'; n++);
	for (i = 0; i < n; i++)
	{
		for (j = k = i + 1; j < n; j++)
			if (s[j] != s[i])
				s[k++] = s[j];
		s[k] = '\0';
	}
	printf("去掉重复字符后结果为：\n");
	puts(s);
	
}*/
/*void main()
{
	char a[100] = "asdmsa",b[100];
	int i, k, j,n=strlen(a);
	for (i = 0; i < n; i++)
	{
		for (j = k = i + 1; j < n; j++)
		{
			if (a[i] != a[j])
				a[k++] = a[j];
		}
		a[k] = '\0';
	}
	puts(a);
}*/
//韩信点兵
/*void main()
{
	int i = 0;
	while (1)
	{
		if (i % 5 == 1 && i % 6 == 5 && i % 7 == 4 && i % 11 == 10)
		{
			printf("%d",i);
			break;
		}
		i++;
	}
}*/
//统计单词个数
/*void main()
{
	char ch[100];
	gets(ch);
	int num = 0,i=0;
	if (ch[0] == ' ')
		num = 0;
	else num = 1;
	for (i = 1; ch[i]; i++)
	{
		if (ch[i - 1] == ' ' && ch[i] != ' ')
			num++;
	}
	printf("%d",num);
}*/
//控制下三角的元素
/*#define M 3
#define N 4
void fun(int a[][N], int n)
{
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j <= i; j++)
		{
			a[i][j] = a[i][j] * n;
		}
	}

}
void main()
{
	int i, j, n, a[M][N] = {1,2,3,4,5,6,7,8,9,10,11,12};
	for (i = 0; i < M; i++)
	{
		for (j = 0; j < N; j++)
			printf("%d ",a[i][j]);
		printf("\n");
	}
	scanf("%d",&n);
	fun(a, n);
	for (i = 0; i < M; i++)
	{
		for (j = 0; j < N; j++)
		{
			printf("%3d",a[i][j]);
		}
		printf("\n");
	}
}*/
//前几个数字逆序交换
/*void swap(int* arr, int n)
{
	int i,temp;
	for (i = 0; i < n / 2; i++)
	{
		temp = arr[i];
		arr[i] = arr[n - i-1];
		arr[n - i-1] = temp;
	}
}
void main()
{
	int a[10] = { 1,3,5,7,9,11,13,15,17,19 };
	int i;
	for (i = 0; i < 10; i++)
		printf("%d ",a[i]);
	printf("\n输入交换的字符个数:\n");
	int n;
	scanf("%d",&n);
	swap(a,n);
	for (i = 0; i < 10; i++)
		printf("%d ", a[i]);
}*/
//移位
/*int main()
{
	int n, i, a[100];
	printf("请输入数字个数:\n");
	scanf("%d", &n);
	for (i = 0; i < n; i++)
		scanf("%d", &a[i]);
	printf("输入要移动的个数:\n");
	int m;
	scanf("%d", &m);
	int b[100], j = 0;
	for (i = n - m; i < n; i++)
	{
		b[j++] = a[i];
	}
	for (i = 0; i < n - m; i++)
	{
		b[j++] = a[i];
	}
	for (i = 0; i < n; i++)
		printf("%d ", b[i]);
}
void main()
{
	int a[100], n, m;
	int b[100];
	int k = 0,i,j;
	scanf("%d",&n);
	for (i = 0; i < n; i++)
		scanf("%d",&a[i]);
	scanf("%d",&m);
	for (i = m; i < n; i++)
		b[k++] = a[i];
	for (i = 0; i < m; i++)
		b[k++] = a[i];
	for (i = 0; i < n; i++)
		printf("%d ",b[i]);
}*/
/*void main()
{
	float p, t;
	scanf("%f%f", &p, &t);
	if (t < 3)
		printf("%f", p);
	else if (t >= 3 && t < 6)
	{
		printf("%f",p-p*0.02);
	}
	else if (t>=6&&t<12)
	{
		printf("%f", p - p * 0.05);
	}
	else if (t>=12&&t<21)
	{
		printf("%f", p - p * 0.08);
	}
	else if (t>=21)
	{
		printf("%f", p - p * 0.01);
	}
}*/
//求根号
/*void main()
{
	float a,x1,x2,term=1;
	scanf("%f",&a);
	x1 = a / 2;
	x2 = (x1 + a / x1) / 2;
	//do
	while (fabs(x1 - x2) >= 1e-5)
	{
		x1 = x2;
		x2 = (x1 + a / x1) / 2;
	} 
	//while (fabs(x1 - x2) >= 1e-5);
	printf("%f %f",a,x1);
}*/
/*struct
{
	int year;
	int month;
	int day;
}date;
int main()
{
	int days = 0;
	printf("input year,month,day:");
	scanf("%d,%d,%d", &date.year, &date.month, &date.day);
	switch (date.month)
	{
	case 12:
	case 11: days = days + 31;//10
	case 10: days = days + 30;//9
	case 9: days = days + 31;//8
	case 8: days = days + 30;//7
	case 7: days = days + 31;//6
	case 6: days = days + 31;//5
	case 5: days = days + 30;//4
	case 4: days = days + 31;//3
	case 3: days = days + 28;//2
	case 2: days = days + 31;//1
	case 1: days = days + date.day;
	}
	if ((date.year % 4 == 0 && date.year % 100 != 0
		| date.year % 400 == 0) && date.month >= 3) days += 1;
	printf("%d/%d is the %dth day in %d.\n", date.month, date.day, days, date.year);
	return 0;
}*/
//水仙花
/*void main()
{
	int i,ge,shi,bai;
	for (i = 100; i <= 999; i++)
	{
		ge = i % 10;
		shi = i / 10 % 10;
		bai = i / 100;
		if (ge*1+shi*10+bai*100 == (ge * ge * ge + shi * shi * shi + bai * bai * bai))
			printf("%d ",i);
	}
}*/
//插入数字
/*void main()
{
	int a[11] = { 1,4,6,9,13,16,19,28,40,100 };
	int i, j, k;
	scanf("%d",&k);
	for (i = 0; i < 10; i++)
	{
		if (k < a[i])
			break;
	}
	for (j = 9; j >= i; j--)
	{
		a[j + 1] = a[j];
	}
	a[i] = k;
	for (i = 0; i < 11; i++)
	{
		printf("%d ",a[i]);
	}
}*/
//删除相同字符
/*void main()
{
	//每一次只删除当前s[i]相同的字符
	char s[20] = "asmaassdf";//9个字符
	int i,j,k=1,len = strlen(s);
	for (i = 0; i < len; i++)//9次循环
	{
		for (j = k = i + 1; j < len; j++)//从第二位开始选择法开始
		{
			if (s[j] != s[i])//当前与前一项不一致
				s[k++] = s[j];//赋值新字符
		}
		s[k] = '\0';//结尾放\0
	}
	puts(s);
}*/
/*void main()
{
	char a[100] = "asdmsa",b[100];
	int i, k, j,n=strlen(a);
	for (i = 0; i < n; i++)
	{
		for (j = k = i + 1; j < n; j++)
		{
			if (a[i] != a[j])
				a[k++] = a[j];
		}
		a[k] = '\0';
	}
	puts(a);
}*/
/*#define n 3
struct student
{
	char name[10];
	float chun;
	float xia;
	float qiu;
	float dong;
	float avg;
};
void main()
{
	int i, j;
	struct student stu[n];
	//输入并计算全年平均温度
	for (i = 0; i < n; i++)
	{
		scanf("%s%f%f%f%f", stu[i].name, &stu[i].chun, &stu[i].xia, &stu[i].qiu, &stu[i].dong);
		stu[i].avg = (stu[i].chun + stu[i].xia + stu[i].dong + stu[i].qiu) / 4;
	}
	//温度低到高排序
	struct student temp;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (stu[j].avg > stu[j + 1].avg)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	//输出城市名及四季温度平均温度
	for (i = 0; i < n; i++)
	{
		printf("%s:%.2f %.2f %.2f %.2f avg:%.2f\n",stu[i].name,stu[i].chun,stu[i].xia,stu[i].qiu,stu[i].dong,stu[i].avg);
	}
}*/
//1+3^1+3^2+3^3+...
/*void main()
{
	int i, p=1, s=1;
	for (i = 1; i <= 10; i++)
	{
		p = p * 3;
		s = s + p;
	}
	printf("%d",s);
}*/
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,9,0 };
	int i,max=a[0];
	//求max
	for (i = 0; i < 10; i++)
	{
		if (max < a[i])
			max = a[i];
	}
	//计数
	int count = 0;
	for (i = 0; i < 10; i++)
	{
		if (max == a[i])
			count++;
	}
	printf("%d",count);
}*/
//投票
/*struct student
{
	char name[20];
	int count;
};
void main()
{
	int i;
	char ne[20];
	int a[3] = { 0 };
	struct student stu[3] = { "li",0,"zhan",0,"bo",0 };
	while (1)
	{
		scanf("%s", ne);
		if (strcmp(ne, "0") == 0)
			break;
		for (i = 0; i < 3; i++)
		{
			if (strcmp(ne, stu[i].name) == 0)
				stu[i].count++;
		}
	}
	for (i = 0; i < 3; i++)
		printf("%s:%d\n",stu[i].name,stu[i].count);
}*/
//exp
/*double exp(double x)
{
	float sum = 0,fz=1,fm=1,term=1,temp=1;
	while (term >= 1e-6)
	{
		sum = sum + term;
		fz = fz * x;
		fm = temp * fm;
		temp++;
		term = fz / fm;
	}
	return sum;

}
void main()
{
	double x;
	scanf("%lf",&x);
	printf("%f",exp(x));
}*/
//洗牌
/*struct card
{
	char face;
	char suit;
};
typedef struct card Card;
int main()
{
	Card deck[52], t;
	char Face[] = { 'A','2','3','4','5','6','7','8','9','X','J','Q','K' };
	char Suit[] = { 3,4,5,6 };
	int i, j;
	for (i = 0; i < 52; i++)
	{
		deck[i].face = Face[i % 13];
		deck[i].suit = Suit[i / 13];
	}
	srand(time(NULL));
	for (i = 0; i < 52; i++)
		//顺序存放扑克牌
	   //随机发牌
	{
	}
	j = rand() % 52;
	t = deck[i]; deck[i] = deck[j]; deck[j] = t;
	for (i = 0; i < 52; i++) //输出洗牌后的结果
		printf("%c%c\t", deck[i].suit, deck[i].face);
	return 0;
}*/
//计算字符串
/*void main()
{
	char s[81], * p;
	p = s;
	gets(s);
	int num = 0;
	while (*p)
	{
		p++;
		num++;
	}
	printf("%d",num);
}
*/
//结构体排序
/*
struct student
{
	char id[20];
	char name[20];
	float score[2];
	float sum;
};
void input(struct student stu[], int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		scanf("%s%s%f%f", stu[i].id, stu[i].name, &stu[i].score[0], &stu[i].score[1]);
		stu[i].sum = (stu[i].score[0] + stu[i].score[1])/2;
	}
}
void sort(struct student stu[], int n)
{
	int i,j;
	struct student temp;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (stu[j].sum < stu[j + 1].sum)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
}
void print(struct student stu[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		printf("%s %s %.2f %.2f\n",stu[i].id,stu[i].name,stu[i].score[0],stu[i].score[1]);
}
void main()
{
	struct student stu[5];
	input(stu, 5);
	sort(stu, 5);
	print(stu, 5);
}*/
//求和
/*void main()
{
	float term,temp, fz, fm, sum = 0;
	int i;
	fz = 2;
	fm = 1;
	term = fz / fm;
	for (i = 0; i < 20; i++)
	{
		term = fz / fm;
		sum = sum + term;
		temp = fz + fm;
		fm = fz;
		fz = temp;
		
	}
	printf("%f",sum);
}*/
//求成绩
/*void main()
{
	int i, j, row, column = 0;
	int a[3][4] = { {1,2,3,4},{9,8,7,6},{-10,10,-5,2} };
	row = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (a[i][j] > a[row][column])
			{
				row = i;
				column = j;
			}
		}
	}
	printf("%d",a[row][column]);
}*/
//字符串比较
/*void sort(char* word[], int n)
{
	char b[50] = {0};
	int i,j;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (strcmp(word[j], word[j + 1]) > 0)
			{
				strcpy(b, word[j]);
				strcpy(word[j], word[j + 1]);
				strcpy(word[j + 1], b);
			}
		}
	}
}
#define n 5
void main()
{
	char *word[5];
	char a[5][50];
	int i;
	for (i = 0; i < 5; i++)
		gets(a[i]);
	//sort(a[i], 5);
	for (i = 0; i < 5; i++)
		word[i] = a[i];
	sort(word, 5);
	for (i = 0; i < 5; i++)
		printf("%s\n",word[i]);
}*/
//判成绩
/*void main()
{
	int score;
	scanf("%d", &score);
	if (score > 100 || score < 0)
		printf("error data");
	else
		switch (score / 10)
		{
		case 9:printf("A"); break;
		case 8:printf("B"); break;
		case 7:printf("C"); break;
		case 6:printf("D"); break;
		default:printf("E"); break;
		}
}*/
//小三角
/*void main()
{
	int i, j, k;
	for (i = 1; i <= 4; i++)
	{
		for (k = 1; k <= 4 - i; k++)
			printf(" ");
		for (j = 1; j <= 2 * i - 1; j++)
			printf("*");
		printf("\n");
	}
}*/
//删除字符
/*void del(char* s, char c)
{
	int i, j=0;
	char b[100];
	for (i = 0; s[i]; i++)
	{
		if (s[i] != c)
		{
			s[j++] = s[i];
		}
	}
	s[j] = '\0';
	//puts(s);
	
}
void main()
{
	char ch[100],b[100],c;
	int i, j = 0;
	//scanf("%s",&ch);
	gets(ch);
	scanf("%c",&c);
	del(ch, c);
	puts(ch);
}*/
//sort排序
/*void sort(char* name[], int n)
{
	int i,j;
	char a[50];
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (strcmp(name[j], name[j + 1]) > 0)
			{
				strcpy(a,name[j]);
				strcpy(name[j], name[j + 1]);
				strcpy(name[j + 1], a);
			}
		}
	}

}
void output(char* name[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		puts(name[i]);
}
void main()
{
	int i;
	char a[5][50];
	for (i = 0; i < 5; i++)
		gets(a[i]);
	char* name[5];
	for (i = 0; i < 5; i++)
		name[i] = a[i];
	sort(name, 5);
	output(name, 5);
}*/
//比较字符串的大小
/*int compare(char* p1, char* p2)
{
	while ((*p1 == *p2)&&*p1!='\0')
	{
		p1++;
		p2++;
	}
	return *p1 - *p2;
}
void main()
{
	char a[100];
	char b[100];
	gets(a);
	gets(b);
	printf("%d",compare(a,b));
}*/
//删除字符串特定字母
/*void del(char* s, char c)
{
	int i,j=0;
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] != c)
		{
			s[j++] = s[i];
		}
	}
	s[j] = '\0';
	puts(s);
}
void main()
{
	char a[100], c;
	gets(a);
	scanf("%c",&c);
	del(a, c);
}*/
//逆序输出并统计位数
/*void main()
{
	int m,count=0,i, n;
	scanf("%d", &n);
	while (n)
	{
		m = n % 10;
		printf("%d",m);
		n = n / 10;
		count++;
	}
	printf("\n共%d位",count);
}*/
/*void main()
{
	int a[10];
	int i;
	for (i = 0; i < 10; i++)
		scanf("%d",&a[i]);
	int n,flag=0;
	printf("请输入要查询的数字；\n");
	scanf("%d",&n);
	for (i = 0; i < 10; i++)
	{
		if (a[i] == n)
		{
			flag = 1;
			break;
		}
	}
	if (flag == 0)
		printf("not found");
	else
		printf("第%d个",i+1);
}*/
//投票
/*struct student
{
	char name[10];
	int count;
};
void main()
{
	struct student stu[3] = { "li",0,"zh",0,"hj",0 };
	int i,j;
	char na[10];
	for (i = 0; i < 5; i++)
	{
		scanf("%s", na);
		for (j = 0; j < 3; j++)
			if (strcmp(na, stu[j].name) == 0)
			{
				stu[j].count++;
			}
	}
	for (i = 0; i < 3; i++)
		printf("%s：%d\n",stu[i].name,stu[i].count);
}*/
//圈留号
/*#define nmax 6
int main()
{
	int i, k, m, n, num[nmax];
		printf("please input the total of numbers:");
	scanf("%d", &n);
	for (i = 0; i < n; i++)
		num[i] = i + 1;
	i = 0;
	k = 0;
	m = 0;
	while (m < n - 1)
	{
		if (num[i] != 0) k++; //数数
		if (k == 3)
		{
			num[i] = 0; //退出
			k = 0; m++; //退出的总人数
		}
		i++;
		if (i == n) i = 0;
	}
	i = 0;
	while (num[i] == 0) i++;
	printf("%d is left\n", num[i]);

}*/
/*int main()
{
	int n;
	printf("输入人数：\n");
	scanf("%d", &n);


	int a[1000];
	int i, temp;

	int count = 0;
	temp = n;
	for (i = 0; i < n; i++)
	{
		a[i] = i + 1;
	}
	i = 0;   //重点  i重新赋值0从0开始
	while (n > 1)
	{
		if (a[i] != 0)   //不改变第一次报数值，只是让数字3的人为0
		{
			count++;
		}
		if (count == 3)
		{
			a[i] = 0;  //让数到3的人为0
			count = 0;
			n--;  //人数－1
		}
		i++;
		if (i == temp)//第一次循环结束
		{
			i = 0;
		}
	}
	for (i = 0; i < temp; i++)
	{
		if (a[i] != 0)  //此时所有数到3的人都清零了，只有剩下的那一个不为0
		{
			printf("余下的为：%d号\n", a[i]);
		}
	}
}*/
//公因数
/*int fun(int m, int n)
{
	int temp;
	if (n > m)
	{
		temp = n;
		n = m;
		m = temp;
	}
	while (n)
	{
		temp = m % n;
		m = n;
		n = temp;
	}
	return m;
}
void main()
{
	int n=32, m=24;
	printf("%d %d", n * m / fun(n, m), fun(n,m));
}*/
//计算e^x近似值
/*void main()
{
	float x,fz=1,fm=1,term=1,sum=0,temp=1;
	scanf("%f",&x);
	while (term >= 1e-6)
	{
		sum = sum + term;
		fz = fz * x;
		fm = fm * temp;
		temp++;
		term = fz / fm;
	}
	printf("%f",sum);
}*/
//判断回文
/*void main()
{
	char a[100],*p1,*p2;
	gets(a);
	int flag = 1;
	p1 = a;
	p2 = strlen(a) - 1 + a;
	while (p1 < p2)
	{
		if (*p1 != *p2)
		{
			flag = 0;
			break;
		}
		p1++;
		p2--;
	}
	if (flag == 1)
		printf("yes");
	else
		printf("no");
}*/
//转置
/*
void main()
{
	int n;
	int a[100][100];
	scanf("%d",&n);
	int i, j;
	for (i = 0; i <= n - 1; i++)
	{
		for (j = 0; j <= n - 1; j++)
			a[i][j] = i * n + j + 1;
	}
	printf("\n");
	for (i = 0; i <= n - 1; i++)
	{
		for (j = 0; j <= n - 1; j++)
		{
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
	printf("转置");
	int b[100][100];
	for (i = 0; i <= n - 1; i++)
	{
		for (j = 0; j <= n - 1; j++)
		{
			b[j][i] = a[i][j];
		}
	}
	printf("\n");
	for (i = 0; i <= n - 1; i++)
	{
		for (j = 0; j <= n - 1; j++)
		{
			printf( "%d ", b[i][j]);
		}
		printf("\n");
	}
}*/
//计算成绩等级
/*void main()
{
	int score;
	while (1)
	{
		scanf("%d", &score);
		if (score > 100 || score < 0)
			printf("Error data!");
		else
		{
			switch (score / 10)
			{
			case 9:printf("A"); break;
			case 8:printf("B"); break;
			case 7:printf("C"); break;
			case 6:printf("D"); break;
			default:printf("E"); break;
			}
		}
		printf("\n");
	}
}*/
//判断面积
/*void main()
{
	float a, b, c,s,area;
	scanf("%f%f%f",&a,&b,&c);
	if ((a + b > c) && (a + c > b )&&( c + b > a))
	{
		s = (a + b + c) / 2;
		area = sqrt(s * (s - a) * (s - b) * (s - c));
		printf("%.2f",area);
	}
	else
		printf("False");
}*/
//捐款
/*void main()
{
	int i;
	float mon, sum = 0;
	for (i = 1; i <= 1000; i++)
	{
		scanf("%f",&mon);
		sum += mon;
		if (sum > 20000)
			break;
	}
	printf("%d人：%.1f元",i,sum);
}*/
//计算Π
/*int main()
{
	float pi, sum, s;
	int i;
	sum = 0.0;
	i = 1;
	do {
		s = 1.0 / (i * i);
		sum += s;
		i++;
	} while (s > 1e-5);
	pi = sqrt(sum * 6);
	printf("%f\n", pi);
}*/
//pai近似值
/*void main()
{
	float pi,term=1,fz=1,fm=1,sum=0,temp=1;
	while (term >= 1e-6)
	{
		sum = sum + term;
		fz = fz * temp;
		fm = fm *(temp*2+1);
		term = fz / fm;
		temp++;
	}
	printf("%f",2*sum);
}*/
/*int main()
{
	float i, j, n, m, pi;
	n = 1.0;
	m = 1.0;
	i = 0.0;
	j = 1.0;
	pi = 0.0;
	while (n / m >= 1e-6)
	{
		pi += n / m;
		i++;
		j = j + 2;
		n = n * i;
		m = m * j;
	}
	printf("%f", 2 * pi);
	return 0;
}*/
//分式的加减
/*void main()
{
	float fz=2, fm=1, term, sum = 0, temp;
	int i;
	term = fz / fm;
	for (i = 0; i < 20; i++)
	{
		sum += term;
		temp = fz + fm;
		fm = fz;
		fz = temp;
		term = fz / fm;
	}
	printf("%f ",sum);
}*/
//1-该数素数之和
/*
prime(int n)
{
	int i = 2,found=1;
	for (i = 2; i < n; i++)
	{
		if (n % 2 == 0)
		{
			found = 0;
			break;
		}
	}
	if (n == 1)
		found = 0;
	return found;
}
void main()
{
	int sum=0,i,n;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		if (prime(i))
		{
			sum += i;
		}
	}
	printf("%d",sum);
}*/
//查找数据标号
/*int fun(int a[], int n, int* count)
{
	int i,found=0;
	for (i = 0; i < 10; i++)
	{
		if (a[i] == n)
		{
			found = 1;
			*count = i;
			break;
		}
	}
	return found;
}
void main()
{
	int n,p,a[10] = {1,2,3,4,5,6,7,8,9,0};
	scanf("%d",&n);
	if (fun(a, n,&p))
		printf("yes is %d",p);
	else
		printf("no found");
}*/
//字符串排序
/*void main()
{
	char a[5][50];
	int i,j;
	for (i = 0; i < 5; i++)
		gets(a[i]);
	//sort
	char b[50];
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5 - 1 - i; j++)
		{
			if (strcmp(a[j], a[j + 1]) > 0)
			{
				strcpy(b, a[j]);
				strcpy(a[j], a[j + 1]);
				strcpy(a[j + 1], b);
			}
		}
	}
	for (i = 0; i < 5; i++)
		puts(a[i]);
}*/
//字符串比较
/*int cmp(char* s1, char* s2)
{
	while ((*s1 == *s2) && (*s1 != '\0'))
	{
		s1++;
		s2++;
	}
	return *s1 - *s2;
}
void main()
{
	char a[100], b[100];
	gets(a);
	gets(b);
	if (cmp(a, b) > 0)
	{
		printf("%s>%s",a,b);
	}
	else
		if (cmp(a, b) == 0)
			printf("%s=%s",a,b);
		else
			if (cmp(a, b) < 0)
				printf("%s<%s",a,b);
}*/
//求一整数
/*void main()
{
	int i, x, y, z;
	
	for (i = 1;; i++)
	{
		x = sqrt(i + 100);
		y = sqrt(i + 168);
		if (x * x == i + 100 && y * y == i + 168)
		{
			printf("%d ", i);
			break;
		}
	}
}*/
//计算1-n!
/*void main()
{
	int n,i,tep=1;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		tep = tep * i;
		printf("%d!=%d\n",i,tep);
	}
}*/
//求截取字串
/*void main()
{
	char s[100] = "1234567890",b[100];
	int i, m, n,j;
	scanf("%d%d",&m,&n);
	for (i = m-1, j = 0; j < n; j++,i++)
	{
		b[j] = s[i];
	}
	b[j] = '\0';
	printf("%s",b);
}*/
//计算max分和id
/*struct student
{
	char id[100];
	int score;
};
void main()
{
	struct student stu[40];
	int i, n;
	printf("输入几个人：\n");
	scanf("%d",&n);
	for (i = 0; i < n; i++)
	{
		scanf("%s%d",stu[i].id,&stu[i].score);
	}
	int max = stu[0].score;
	for (i = 1; i < n; i++)
	{
		if (max < stu[i].score)
			max = stu[i].score;
	}
	for (i = 0; i < 40; i++)
	{
		if(max==stu[i].score)
		printf("%s %d \n",stu[i].id,stu[i].score);
	}
}*/
//递归
/*int fun(int m, int n)
{
	if (m > n)
		fun(m - n, n);
	if (m < n)
		fun(m, n - m);
	if (m == n)
		printf("%d ",m);
}
void main()
{
	int n, m;
	scanf("%d%d",&n,&m);
	fun(n, m);
}*/
//求数组的max的行和列
/*void main()
{
	int i, j, max, x = 0, y = 0;
	int a[3][4] = { {1,2,3,4},{9,8,7,6},{-10,10,-5,2} };
	max = a[0][0];
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (max < a[i][j])
			{
				x = i;
				y = j;
				max = a[i][j];
			}
		}
	}
	printf("max：%d \n行:%d 列:%d ",a[x][y],x,y);
}*/
/*void main()
{
	int a[20] = { 1,1 };
	int i;
	for (i = 2; i < 20; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	//输出
	for (i = 0; i < 20; i++)
	{
		if (i != 0 && i % 4 == 0)
			printf("\n");
		printf("%3d ",a[i]);
	}
}*/
/*int cal(int n)
{
	int i, s = 0, f = 1;
	for (i = 1; i <= n; i++)
	{
		s = s + i * f;
		f = -f;
	}
	return s;
}
void main()
{
	int n;
	scanf("%d",&n);
	printf("%d",cal(n));
}*/
//求素数
/*int isprime(int x)
{
	int i, found = 1;
	for (i = 2; i < x; i++)
		if (x % i == 0)
		{
			found = 0;
			break;
		}
	return found;
}
void main()
{
	int i;
	for (i = 100; i <= 999; i++)
	{
		if (isprime(i))
			printf("%d  ",i);
	}
}*/
//字符串连接
/*void main()
{
	char s[81], * p, * q;
	gets(s);
	p = s;
	while (*p) p++;
	q = p;
	p--;
	while (p >= s)
	{
		*q++ = *p--;
	}
	*q = '\0';
	puts(s);
}*/
/*void main()
{
	char s[81], * p;
	gets(s);
	p = s;
	while (*p)
		p++;
	printf("%d",p-s);
}*/
//平均温度
/*struct student
{
	char name[20];
	float chun;
	float xia;
	float qiu;
	float don;
	float aver;
};
void main()
{
	int i;
	struct student stu[5];
	for (i = 0; i < 5; i++)
	{
		scanf("%s %f %f %f %f", stu[i].name, &stu[i].chun, &stu[i].xia, &stu[i].qiu, &stu[i].don);
		stu[i].aver = (stu[i].chun + stu[i].xia + stu[i].qiu + stu[i].don) / 4;
	}
	struct student temp;
	int max = stu[0].aver;
	int j;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5 - 1 - i; j++)
		{
			if (stu[j].aver > stu[j + 1].aver)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
	{
		printf("%s %.2f %.2f %.2f %.2f\n",stu[i].name,stu[i].chun,stu[i].xia,stu[i].qiu,stu[i].don);
	}
}*/
//计算字符串
/*void cal(char s1[], char s2[], char s[])
{
	int i, j;
	for (i = 0; s1[i] != '\0'; i++)
		s[i] = s1[i];
	for (j = 0; s2[j] != '\0'; j++)
		s[i + j] = s2[j];
	s[i + j] = '\0';
}
void main()
{
	char s1[100], s2[100], s[100];
	gets(s1);
	gets(s2);
	cal(s1, s2, s);
	puts(s);
}*/
//迭代法求根
/*void main()
{
	float x, x1, a;
	scanf("%f",&a);
	x = a;
	x1 = (x + a / x) / 2;
	while (fabs(x1-x) >= 1e-5)
	{
		x = x1;
		x1 = (x + a / x) / 2;
	}
	printf("%f",x1);
}*/
/*int cal(int n)
{
	int i, s = 0, f = 1;
	for (i = 1; i <= n; i++)
	{
		s = s +i* f;
		f = -f;
	}
	return s;
}
void main()
{
	int n;
	scanf("%d",&n);
	printf("%d ",cal(n));
}*/
//成绩排名
/*struct student
{
	char name[100];
	char id[20];
	float c;
	float wei;
	float aveg;
};
void main()
{
	int i;
	struct student stu[5];
	for (i = 0; i < 5; i++)
	{
		scanf("%s%s%f%f", stu[i].name, stu[i].id, &stu[i].c, &stu[i].wei);
		stu[i].aveg = (stu[i].c + stu[i].wei) / 2;
	}
	//sort
	int j;
	struct student temp;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5 - 1 - i; j++)
		{
			if (stu[j].aveg < stu[j + 1].aveg)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
	{
		printf("%s:%.2f\n",stu[i].name,stu[i].aveg);
	}
	printf("平均分90+；\n");
	for (i = 0; i < 5; i++)
	{
		if (stu[i].aveg > 90)
			printf("%s %.2f\n",stu[i].name,stu[i].aveg);
	}
	printf("平均分60-；\n");
	for (i = 0; i < 5; i++)
	{
		if (stu[i].aveg <60)
			printf("%s %.2f\n", stu[i].name, stu[i].aveg);
	}
}*/
//输入16进制数转10进制
/*void main()
{
	int sum = 0,i,j;
	char a[80],b[80];
	int c[80],k;
	gets(a);
	j = 0;
	//设置取值范围
	for (i = 0; a[i]; i++)
	{
		if (a[i] >= 'a' && a[i] <= 'f' || a[i] >= 'A' && a[i] <= 'F' || a[i] >= '0' && a[i] <= '9')
			b[j++] = a[i];
	}
	b[j] = '\0';//加'\0'后期判别
	puts(b);
	k = 0;
	//设置初始值
	for (j = 0; b[j]; j++)
	{
		if (b[j] >= 'A' && b[j] <= 'Z')
			c[k] = b[j]-'A'+10;
		if (b[j] >= 'a' && b[j] <= 'z')
			c[k] = b[j]-'a'+10;
		if (b[j] >= '0' && b[j] <= '9')
			c[k] = b[j]-'0'+0;
		k++;
	}
	//计算
	for (j = 0; j<k; j++)
	{
		sum = sum * 16 + c[j];
		//printf("%d", c[j]);
	}
	printf("%d",sum);
}*/
//指针实现计算相应字符个数
/*int fun(char* ss, char c)
{
	int count = 0;
	while (*ss)
	{
		if (*ss == c)
		{
			count++;
		}
		ss++;

	}
	return count;
}
void main()
{
	char va[80], c;
	gets(va);
	c = getchar();
	printf("%d",fun(va, c));
}*/
//删除字符串相同的字母
/*void main()
{
	char a[80];
	gets(a);
	int i,k, j,count=strlen(a);
	for (i = 0; i < count - 1; i++)
	{
		for (k = j = i + 1; j < count; j++)
		{
			if (a[j] != a[i])
			{
				a[k++] = a[j];
			}
		}
		a[k] = '\0';
	}
	puts(a);
}*/
//ABCD-->ABCDDCBA
/*void main()
{
	char a[80] = "ABCD", * p, * q;
	q = a;
	while (*q)
		q++;
	p = q;
	q--;//退到\0前面一格
	while (q >= a)
		*p++ = *q--;
	puts(a);
}*/
//多项式
/*void main()
{
	float x;
	scanf("%f",&x);
	float term, sum = 1, fz=x, fm=1,flag=-1,tem=1;
	term = (flag*fz) / fm;
	while (fabs(term) >= 1e-6)
	{
		sum = sum + term;
		fz = fz * x;
		tem++;
		fm = fm * tem;
		flag = -flag;
		term = (flag*fz/fm);
		
	}
	printf("%f",sum);
}
void main()
{
	float sum = 1, item, sign = -1, fm, x, fz, i = 1;
	scanf("%f", &x);
	fz = x, fm = 1;
	item = fz / fm * sign;
	while (fabs(item) >= 1e-6)
	{
		sum += item;
		sign = -sign;
		fz = fz * x;
		i++;
		fm = fm * i;
		item = fz / fm * sign;
	}
	printf("%f",sum);
}*/
//赫巴德猜想
/*int fun(int n)
{
	int i,flag=1;
	for(i=2;i<n;i++)
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	if (i == 0)
		flag = 0;//1不是素数
	return flag;
}
void main()
{
	int n;
	scanf("%d",&n);
	int i,x1,x2,flag=1;
	for (x1 = 2; x1 <= n / 2; x1++)
	{
		x2 = n - x1;
		if (fun(x1) == 1 && fun(x2) == 1&&(x1+x2==n))
			break;
	}
	printf("%d = %d + %d",n,x1,x2);
}*/
//求字符串的长度
/*void main()
{
	char s[81], * p;
	gets(s);
	p = s;
	while (*p) p++;
	printf("%d",p-s);
}*/
//判断瑞年
/*void main()
{
	int year,flag=0;
	scanf("%d",&year);
	if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
		flag = 1;
	if (flag)
		printf("是闰年", year);
	else
		printf("不是闰年");
}*/
//吃饭先令
/*void main()
{
	int man, women, chi;
	printf("可能方案:\n");
	for (man = 0; man <= 10; man++)
	{
		for (women = 0; women <= 25; women++)
		{
			chi = 30 - man - women;
			if ((women + man + chi == 30) && (3 * man + 2 * women + chi) == 50)
			{
				printf("man:%d women:%d chi:%d\n",man,women,chi);
			}
		}
	}
}*/
//递归求字符串长度
/*
int fun(char *a)
{
	int i = 0;
	if (*a == '\0')
		return 0;
	else
		return 1 + fun(a+1);
}
void main()
{
	char a[80];
	gets(a);
	printf("%d",fun(a));
		
}*/
//计算pai
/*void main()
{
	float sum = 1, fz = 1, fm = 1, term = 1, i = 1;
	while (term >= 1e-6)
	{
		fz = fz * i;
		fm = fm * (2 * i + 1);
		term = fz / fm;
		sum = sum + term;
		i++;
	} 
		printf("%f", sum * 2);
}*/
//判断回文数
/*
void main()
{
	int n;
	scanf("%d",&n);
	int a[20],b[20],i,j;
	i = 0;
	//输入元素
	while (n)
	{
		a[i++] = n % 10;
		n = n / 10;
	};
	int k=0;
	//倒序插入新的数组
	for (i = i - 1; i >= 0; i--)
	{
		b[k++] = a[i];
	}
	//设立标志位并进行比较
	int flag = 1;
	for (i = 0; i < k; i++)
	{
		if (a[i] != b[i])
		{
			flag = 0;
			break;
		}
	}
	if (flag == 1)
		printf("yes");
	else
		printf("no");
}*/
//押题键盘输入字符串,判断数字字符个数
/*void main()
{
	char a[80];
	int i, count = 0;
	gets(a);
	for (i = 0; a[i] != '\0'; i++)
	{
		if (a[i] >= '0' && a[i] <= '9')
			count++;
	}
	printf("数字字符个数:%d",count);
}*/
//提取回车结束的字符串所有数字，转10进制输出
/*void main()
{
	char a[100];
	gets(a);
	int sum = 0, i;
	for (i = 0; a[i]; i++)
	{
		if (a[i] >= '0' && a[i] <= '9')
			sum = sum * 10 + a[i] - '0';
	}
	printf("%d",sum);
}*/
//3行文字一行80个字符
/*void main()
{
	char a[3][80];
	int zi[3] = { 0 };
	int qi[3] = { 0 };
	int shu[3] = { 0 };
	int kon[3] = { 0 };
	int i, j;
	for (i = 0; i < 3; i++)
		gets(a[i]);
	for (i = 0; i < 3; i++)
	{
		for (j = 0; a[i][j]; j++)
		{
			if (a[i][j] >= 'A' && a[i][j] < 'Z')
				zi[i]++;
			else if (a[i][j] >= 'a' && a[i][j] <= 'z')
				zi[i]++;
			else if (a[i][j] >= '0' && a[i][j] <= '9')
				shu[i]++;
			else if (a[i][j] == ' ')
				kon[i]++;
			else
				qi[i]++;
		}
		
	}
	for (i = 0; i < 3; i++)
	{
		printf("%d %d %d %d\n",zi[i],shu[i],kon[i],qi[i]);
	}
}*/
//判断回文
/*void  main()
{
	char a[80];
	gets(a);
	char* p, * q;
	q = a;
	while (*q)
		q++;
	q--;
	p = a;
	int flag = 1;
	while (q >= p)
	{
		if (*q != *p)
		{
			flag = 0;
			break;
		}
		q--;
		p++;
	}
	if (flag == 1)
		printf("yes");
	else
		printf("no");
}*/
//10个字符串排序
/*void main()
{
	char a[5][30];
	char b[30];
	int i,j;
	for (i = 0; i < 5; i++)
		gets(a[i]);
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5 - 1 - i; j++)
		{
			if (strcmp(a[j], a[j + 1]) > 0)
			{
				strcpy(b, a[j]);
				strcpy(a[j], a[j + 1]);
				strcpy(a[j + 1], b);
			}
		}
	}
	for (i = 0; i < 5; i++)
		puts(a[i]);
}*/
//求字符串的长度
/*void main()
{
	char *p,a[80];
	gets(a);
	int i;
	p = a;
	while (*p)
		p++;
	printf("字符个数:%d",p-a);
}*/
//字符串的复制
/*void fun(char* s1, char* s2)
{
	while ((*s1 = *s2) && (*s2 != '\0'))
	{
		s1++;
		s2++;
	}
	*s1 = '\0';
}
void main()
{
	char a[80],b[80];
	gets(b);
	fun(a, b);
	puts(a);
}*/
//字符串的连接
/*void fun(char* s1, char* s2)
{
	while (*s1)
		s1++;
	while ((*s1 = *s2) && (*s2 != '\0'))//赋值过程中必须带括号
	{
		s1++;
		s2++;
	}
	*s1 = '\0';
}
void main()
{
	char a[80], b[80];
	gets(a);
	gets(b);
	fun(a, b);
	puts(a);
}*/
//字符串的比较
/*int fun(char* s1, char* s2)
{
	while (*s1 == *s2 && *s1 != '\0')
	{
		s1++;
		s2++;
	}
	return *s1 - *s2;
}
void main()
{
	char a[80],b[80];
	gets(a);
	gets(b);
	printf("%d",fun(a,b));
}*/
//1+3+。。+99
/*void main()
{
	int i,sum=0;
	for (i = 1; i <= 99; i += 2)
		sum += i;
	printf("%d",sum);
}*/
//2+4+..+100
/*void main()
{
	int i, sum = 0;
	for (i = 2; i <= 100; i += 2)
		sum += i;
	printf("%d", sum);
}*/
//1-2+3-..-100
/*void main()
{
	int flag=1,i,sum=0;
	for (i = 1; i <= 100; i++)
	{
		sum = sum + i * flag;
		flag = -flag;
	}
	printf("%d",sum);
}*/
//1+1/2+1/3+..
/*void main()
{
	int i;
	float sum = 0;
	for (i = 1; i <= 100; i++)
	{
		sum = sum + 1.0 / i;
	}
	printf("%f",sum);
}*/
/*void main()
{
	int i=1;
	float sum = 0,fm=0;
	do
	{
		fm++;
		sum = sum + 1.0 / (fm * fm);
	} while ((1.0 / (fm * fm)) >= 1e-5);
	printf("%f",sqrt(sum*6));
	//方案二
	float pi, sum, s;
	int i;
	sum = 0;
	i = 1;
	do {
		s = 1.0 / (i * i);
		sum += s;
		i++;
	} while (s > 1e-5);
	pi = sqrt(sum * 6);
	printf("%f\n", pi);
	return 0;
}*/
//求Π的近似值
/*void main()
{
	float i = 1, sum = 1, fz = 1, fm = 1, term;
	term = fz / fm;
	do
	{
		//思路先求分子式在相加最后判断
		fz = fz * i;
		fm = fm * (2 * i + 1);
		term = fz / fm;
		sum = sum + term;
		i++;

	}while (term >= 1e-6);
	printf("%f",sum*2);
}*/
//1的1次方加2的2次方+..
/*void main()
{
	int i,n,sum=0,j,t;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		t = 1;
		for (j = 1; j <= i; j++)
		{
			t = t * i;
		}
		sum = sum + t;
	}
	printf("%d",sum);
}*/
//求分数的序列之和
/*void  main()
{
	float term,sum = 0, fz=2, fm=1, temp;
	int i;
	for (i = 0; i < 3; i++)
	{
		term = fz / fm;
		temp = fz + fm;
		fm = fz;
		fz = temp;
		sum = sum + term;
	}
	printf("%f",sum);
	//精度不一致无大碍
	int fz = 2, fm = 1, t, i;
	float sum;
	sum = fz * 1.0 / fm;
	for (i = 1; i <= 2; i++)
	{
		t = fz;
		fz = fz + fm;
		fm = t;
		sum = sum + fz * 1.0 / fm;
	}
	printf("sum=%f\n", sum);
	return 0;
}*/
//a+aa+aaa+aaaa+...
/*void main()
{
	int n,i, a,t=0, sum = 0;
	scanf("%d%d",&a,&n);
	for (i = 1; i <= n; i++)
	{
		t = t * 10 + a;
		sum = sum + t;
	}
	printf("%d",sum);
}*/
//求sinx
/*double jie(double n)
{
	int i;
	double sum = 1;
	for (i = 1; i <= n; i++)
		sum *= i;
	return sum;
}
double fa(double x,double n)
{
	int i;
	double sum = 1;
	for (i = 1; i <= n; i++)
		sum = sum * x;
	return sum;
}
void main()
{
	//3 0.141120 答案
	double x, sum = 0, t;
	int n = 0;
	scanf("%lf", &x);
	t = x;
	while (t >= 1e-6 || t <= -1e-6)
	{
		sum = sum + t;
		n = n + 1;
		t = -t * x * x / (2 * n) / (2 * n + 1);
	}
	printf("%lf", sum);
	return 0;
	//自编
	double x, sum = 0,i=1,flag=1;
	scanf("%lf",&x);
	do
	{
		sum = sum + (fa(x, i)/jie(i))*flag;
		i += 2;
		flag = -flag;
	} while ((fa(x, i) / jie(i)) * flag >= 1e-6 || (fa(x, i) / jie(i)) * flag <= -1e-6);
	printf("%f",sum);
}*/
//求n!
/*void main()
{
	int n,i,temp=1;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
		temp = temp * i;
	printf("%d!=%d",n,temp);
}*/
//输出0!-N!
/*void main()
{
	int n, i=0, temp = 1;
	scanf("%d", &n);
	do
	{
		if (i == 0)
			printf("0!=1\n");
		else
		{

			temp = temp * i;
			printf("%d!=%d\n", i, temp);
		}
		i++;
	} while (i <= n);
}*/
//删除数组的相同个数
/*void main()
{
	int a[10] = { 1,2,3,4,4,6,7,8,9,0 };
	int i, j, k=0,n,count=0;
	scanf("%d", &n);
	//查相同的个数
	for (i = 0; i < 10; i++)
		if (a[i] == n)
			count++;
	//冒泡排序
	for (i = 0; i < 10; i++)//循环次数
	{
		for (k = j = i + 1; j < 10; j++)//后一项
		{
			if (a[j] != n)
			{
				a[k++] = a[j];
			}
		}
	}
	for (i = 0; i < 10-count; i++)
		printf("%d ",a[i])；
}*/
//删除数组的相同个数
/*void main()
{
	int a[10] = { 1,2,3,4,4,6,7,8,9,0 };
	int b[10],n;
	scanf("%d",&n);
	int i, k = 0;
	for (i = 0; i < 10; i++)
		if (a[i] != n)
			b[k++] = a[i];
	for (i = 0; i < k; i++)
		printf("%d ",b[i]);
}*/
//删除数组的相同个数
/*void main()
{
	int a[10] = { 1,2,3,4,4,6,7,4,9,0 };
	int i, j, c, n = 0;
	scanf("%d", &c);
	for (i = 0; i < 10; i++)
	{
		if (a[i] == c)
		{
			n++;
			for (j = i; j < 10; j++)
			{
				a[j] = a[j + 1];
				i--;
			}
		}
	}
	for (i = 0; i < 10 - n; i++)
		printf("%d ",a[i]);
}*/
//fac(n)实现阶乘
/*double fac(int n)
{
	int num = 1;
	int i;
	if (n == 0)
		return 1;
	else
	{
		for (i = 1; i <= n; i++)
			num = num * i;
		return num;
	}
}
void main()
{
	int n,i;
	scanf("%d",&n);
	for (i = 0; i <= n; i++)
	{
		printf("%d!=%.2f\n", i,fac(i));
	}
}*/
//0！+1!+..n!
/*void main()
{
	int n,i=0,sum=1,temp=1;//0！=1
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		temp = temp * i;
		sum = sum + temp;
	}
	printf("%d",sum);
}*/
//斐波那契
/*void main()
{
	int a[20] = { 1,1 },i, j;
	for (i = 2; i < 20; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	for(i=0;i<20;i++)
	printf("%d ",a[i]);
}*/
//一位数的逆序数
/*void main()
{
	int sum=0,n,t;
	scanf("%d",&n);
	do
	{
		t = n % 10;
		n = n / 10;
		sum = sum * 10 + t;
	} while (n);
    printf("%d",sum);
}*/
//最大公因数
/*void main()
{
	int i,n,t, m;
	scanf("%d%d",&n,&m);
	if (m > n)
	{
		t = m;
		m = n;
		n = t;
	}
	while (m)
	{
		t = n % m;
		n = m;
		m = t;
	}
	printf("%d",n);
	//方法2
	while (m != n)
	{
		if (m > n)
			m = m - n;
		if (m < n)
			n = n - m;
	}
	printf("%d",m);
}*/
//完数
/*void main()
{
	int n;
	scanf("%d",&n);
	int i, sum = 0;
	for (i = 1; i < n; i++)
	{
		if (n % i == 0)
			sum += i;
	}
	if (sum == n)
		printf("yes");
}*/
//分解质因数
/*void main()
{
	int n, i=2, k = 0;
	scanf("%d", &n);
	printf("%d = ",n);
	while (n != i)
	{
		if (n % i == 0)
		{
			printf("%d*", i);
			n = n / i;
		}
		else
			i++;
	}
	printf("%d",n);
}*/
//分解质因数
/*void main()
{
	int n, i = 2, k = 0;
	scanf("%d",&n);
	printf("%d = ",n);
	while (n != i)
	{
		if (n % i == 0)
		{
			printf("%d * ", i);
			n = n / i;
		}
		else
			i++;
	}
	printf("%d",n);
}*/
//进制转换
/*int fun(int n)
{
	int i;
	if ((i = n / 2) > 0)
		fun(n / 2);
	printf("%d",n%2);
}
void main()
{
	int n;
	scanf("%d",&n);
	fun(n);
}*/
//上下金字塔
/*void main()
{
	int i, j, k;
	for (i = 1; i <= 4; i++)
	{
		for (j = 1; j <= 4 - i; j++)
			printf(" ");
		for (k = 1; k <= 2 * i - 1; k++)
			printf("*");
		printf("\n");
	}
	for (i = 3; i >= 1; i--)
	{
		for (j = 1; j <= 4 - i; j++)
			printf(" ");
		for (j = 1; j <= 2 * i - 1; j++)
			printf("*");
		printf("\n");
	}
}*/
//数字金字塔
/*void main()
{
	int i,j,k;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= 9 - i; j++)
			printf(" ");
		for (k = 1; k <= i; k++)
			printf("%d",k);
		for (j = i - 1; j >= 1; j--)
			printf("%d",j);
		printf("\n");
	}
}*/
//字母对称的金字塔
/*void main()
{
	int i, j, k;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= 9 - i; j++)
			printf(" ");
		for (k = 1; k <= i; k++)
			printf("%c", k+64);
		for (j = i - 1; j >= 1; j--)
			printf("%c", j+64);
		printf("\n");
	}
}*/
//非对称金字塔
/*void main()
{
	int i, j, k;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= 9 - i; j++)
			printf(" ");
		for (k = 1; k <= 2*i-1; k++)
			printf("%c", k+64);
		printf("\n");
	}
}*/
//写递归函数
/*int fact(int n)
{
	if (n == 0 || n == 1)
		return 1;
	else
		return n * fact(n - 1);
}
void main()
{
	int n;
	scanf("%d",&n);
	printf("%d",fact(n));
}*/
//递归求斐波那契数列前30项
/*int fib(int n)
{
	if (n == 1 || n == 0)
		return 1;
	else
		return fib(n - 1) + fib(n - 2);
}
void main()
{
	int i;
	for (i = 0; i < 20; i++)
		printf("%d  ",fib(i));
}*/
//求字符串的长度
/*int fun(char* s)
{
	if (*s == '\0')
		return 0;
	else
		return 1 + fun(s + 1);

}
void main()
{
	char str[60];
	gets(str);
	printf("%d",fun(str));
}*/
//递归实现n逆序
/*int fun(int n)
{
	int i;
	if (n <= 9)
		printf("%d",n);
	else
	{
		printf("%d",n%10);
		fun(n / 10);
	}
}
void main()
{
	int n;
	scanf("%d",&n);
	fun(n);
}*/
//递归逆序合成新数字
/*
int sum = 0;
int fun(int n)
{
	if (n <= 9)
		sum=sum * 10 + n;
	else
	{
		sum = sum * 10 + n % 10;
		fun(n / 10);
	}
	return sum;
}

void main()
{
	int n;
	scanf("%d",&n);
	printf("%d",fun(n));
}*/
//真题13-24 判别素数计算100-200
/*int fun(int n)//3167
{
	int i, flag = 1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	}
	if (n == 1)
		 flag = 0;
	return flag;
}
void main()
{
	int i;
	int sum = 0;
	if (fun(25))
		printf("yes");
	for (i = 100; i <= 200; i++)
	{
		if (fun(i))
			sum += i;
		
	}printf("%d  ",sum);
	
}
int prime(int n) {
	int i;
	if (n < 2) return 0;
	if (n == 2) return 1;
	for (i = 2; i <= sqrt(n) + 1; i++)
		if (n % i == 0) return 0;
	return 1;
}

int main() {
	int x, sum = 0;
	for (x = 101; x <= 200; x = x + 2) {
		if (prime(x))
			sum = sum + x;
	}
	printf("%d ", sum);
	return 0;
}*/
//字符串的比较
/*int fun(char* p1, char* p2)
{
	while (*p1!='\0'&& * p1 == *p2)
	{
		p1++;
		p2++;
	}
	return *p1 - *p2;
}
void main()
{
	char a[80];
	char b[80];
	gets(a);
	gets(b);
	printf("%d",fun(a, b));
}*/
//百分制成绩
/*void main()
{
	int a[10], i;
	for (i = 0; i < 10; i++)
		scanf("%d",&a[i]);
	for (i = 0; i < 10; i++)
	{
		switch (a[i] / 10)
		{
		case 9:printf("%d :'A'\n", a[i]); break;
		case 8:printf("%d :'B'\n", a[i]); break;
		case 7:printf("%d :'C'\n", a[i]); break;
		case 6:printf("%d :'D'\n", a[i]); break;
		default:printf("%d :'E'\n", a[i]); break;
		}
	}
}*/
//递归和非递归实现strlen功能
/*int func(char* s)
{
	if (*s == '\0')
		return 0;
	else
		return 1 + fun(s+1);
}
int fun(char* s)
{
	char* p;
	p = s;
	while (*p)
		p++;
	return p - s;
}
void main()
{
	char a[80];
	gets(a);
	printf("fun:%d \nfunc:%d",fun(a),func(a));
}*/
//10名同学平均分排序
/*struct student
{
	int id;
	char name[100];
	float yu;
	float shu;
	float ying;
	float avg;
};
void main()
{
	//101 li 90 90 90测试数据
	//102 zh 89 78 67
		//103 yu 89 78 67
		//104 op 90 90 98
		//105 io 85 45 56
	struct student stu[10];
	int i;
	//输入数据
	for (i = 0; i < 5; i++)
	{
		scanf("%d%s%f%f%f", &stu[i].id, stu[i].name, &stu[i].yu, &stu[i].shu, &stu[i].ying);
		stu[i].avg = (stu[i].shu + stu[i].ying + stu[i].yu) / 3;
	}
	//平均分排序
	int j;
	struct student temp;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5 - 1 - i; j++)
			if (stu[j].avg < stu[j + 1].avg)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
	}
	//顺序输出
	for (i = 0; i < 5; i++)
		printf("学号:%d 姓名:%s 语文;%.2f 数学:%.2f 英语:%.2f 平均成绩: %f.2\n",stu[i].id,stu[i].name,stu[i].yu,stu[i].shu,stu[i].ying,stu[i].avg);
}*/
//判定素数
/*void main()
{
	int n;
	scanf("%d",&n);
	int i;
	if (n == 1)
		printf("不是");
	else
	{
		for (i = 2; i < n; i++)
		{
			if (n % 2 == 0)
			{
				printf("不是");
				break;
			}
		}
		if (i == n)
			printf("是");
	}
}*/
//求pi近似值
/*void main()
{
	float pi,fz=1,fm=1,term,temp=1,sum=1;
	do
	{
		fz = fz * temp;
		fm = fm * (2 * temp + 1);
		term = fz / fm;
		sum = sum + term;
		temp++;
	} while (term >= 1e-6);
	printf("%f",sum*2);
}*/
//计算平均温度
/*struct student
{
	char name[10];
	float chun;
	float xia;
	float qiu;
	float don;
	float avg;
};
void main()
{
	struct student stu[5];
	int i;
	for (i = 0; i < 5; i++)
	{
		scanf("%s%f%f%f%f", stu[i].name, &stu[i].chun, &stu[i].xia, &stu[i].qiu, &stu[i].don);
		stu[i].avg = (stu[i].chun + stu[i].xia + stu[i].qiu + stu[i].don) / 4;
	}
	int j;
	struct student temp;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 5 - 1 - i; j++)
		{
			if (stu[j].avg > stu[j + 1].avg)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
		printf("%s %.2f %.2f %.2f %.2f %.2f\n",stu[i].name,stu[i].chun,stu[i].xia,stu[i].qiu,stu[i].don,stu[i].avg);
}*/
//计算3角形
/*void main()
{
	float a, b, c,s,are;
	scanf("%f%f%f",&a,&b,&c);
	if (a + b > c && a + c > b && c + b > a)
	{
		s = (a + b + c) / 2;
		are = sqrt(s * (s - a) * (s - b) * (s - c));
		printf("%.2f ",are);
	}
	else
		printf("False");
}*/
//累加求pai
/*void man()
{
	float i=0, term,sum = 0;
	do
	{
		i++;
		term = 1.0 / (i * i);
		sum = sum + term;
	}while (term >= 1e-5);
	printf("%f",sqrt(6*sum));
}
*/
//歌唱比赛构造函数
/*void input(int score[], int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		scanf("%d",&score[i]);
	}
}
int ssum(int score[], int n)
{
	int i,sum=0;
	for (i = 0; i < n; i++)
		sum += score[i];
	return sum;
}
int smax(int score[], int n)
{
	int i,max = score[0];
	for (i = 0; i < n; i++)
	{
		if (max < score[i])
			max = score[i];
	}
	return max;
}
int smin(int score[], int n)
{
	int i, min = score[0];
	for (i = 0; i < n; i++)
	{
		if (min > score[i])
			min = score[i];
	}
	return min;

}
int main()
{
	int score[5], max, min, sum;
	float aver;
	input(score, 5); //输入10个评委的评分
	sum = ssum(score, 5); //计算10个评委的评分之和
	max = smax(score, 5); //计算最高分
	min = smin(score, 5); //计算最低分
	aver = (sum - max - min) * 1.0 / (5 - 2); //计算学生的最终得分
	printf("%f\n", aver); //输出学生的最终得分 }
}*/
//菲薄前20项
/*void main()
{
	int a[20] = { 1,1 };
	int i, count = 0;
	for (i = 2; i < 20; i++)
		a[i] = a[i - 1] + a[i - 2];
	for (i = 0; i < 20; i++)
	{
		if (i != 0 && i % 4 == 0)
			printf("\n");
		printf("%d ", a[i]);
	}
}*/
//捐款活动
/*void main()
{
	float a[1000],n=0, sum = 0;
	int i;
	for (i = 0; i < 1000; i++)
	{
		scanf("%f",&a[i]);
		sum = sum + a[i];
		n++;
		if (sum > 20000)
		{
			break;
		}
	}
	printf("%.0f人捐款%.1f元,平均%.1f元/人",n,sum,sum*1.0/n);
}*/
//统计100-999个位数字为7的个数
/*int prime(int n)
{
	int i, flag=1;
	for(i=2;i<n;i++)
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	if (n == 1)
		flag = 0;
	return flag;
}
void main()
{
	int i,sum=0;
	for (i = 100; i <= 999; i++)
	{
		if (prime(i) && (i % 10 == 7))
			sum += i;
	}
	printf("%d",sum);
}*/
//switch 成绩
/*void main()
{
	int n;
	scanf("%d",&n);
	if (n > 100 || n < 0)
		printf("Error data!");
	else
		switch (n / 10)
		{
		case 9:printf("A"); break;
		case 8:printf("B"); break;
		case 7:printf("C"); break;
		case 6:printf("D"); break;
		default:printf("E"); break;
		}
}*/
//3x4矩阵输出最大值的下标和行列号
/*void main()
{
	int a[3][4] = { {1,2,3,4},{1,8,4,3},{9,4,2,6} };
	int ras, cas, i, j,max=a[0][0];
	for(i=0;i<3;i++)
		for(j=0;j<4;j++)
		{
			if (max < a[i][j])
			{
				ras = i;
				cas = j;
				max = a[i][j];
			}
		}
	printf("max:%d ras:%d cas:%d",a[ras][cas],ras,cas);
}*/
//计算字符串的长度
/*void main()
{
	char s[81], * p;
	gets(s);
	p = s;
	while (*++p);
		//p++;
	//计算sizeof while(*p++);*p++->'\0' p+1
	//计算strlen while(*++p);*++p->'\0' p
	printf("长度%d",p-s);
}*/
//打鱼晒网
/*void main()
{
	int n;
	scanf("%d",&n);
	if (n % 5 >= 1 && n % 5 <= 3)//第1-3天打鱼%5==1-3
		printf("打鱼");
	else
		printf("晒网");
}*/
//冒泡排序
/*void main()
{
	int a[10], flag = 1, i, j, t;
	for (i = 0; i < 10; i++)
	{
		scanf("%d",&a[i]);
	}
	for (i = 0; flag&&i < 9; i++)
	{
		flag = 0;
		for (j = 0; j < 10 - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
				flag = 1;
			}
		}
	}
	for (i = 0; i < 10; i++)
		printf("%d ",a[i]);
}*/
//1 -2 3 -4 ...前n项和
/*void main()
{
	int n,i,flag=1,sum = 0;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		sum = sum + i * flag;
		flag = -flag;
	}
	printf("%d ",sum);
}*/
//字符串逆置
/*void main()
{
	char s[81], * p, * q;
	gets(s);
	p = s;
	while (*p)
		p++;
	q = p;
	p--;
	while (p >= s)
	{
		*q++ = *p--;
	}
	*q = '\0';
	puts(s);
}*/
//分段函数
/*void main()
{
	double x,sum=0;
	scanf("%lf",&x);
	if (x <= -2)
	{
		sum = -exp(2 * x + 1) + 3;
	}
	else if (-2 < x && x <= 3)
	{
		sum = (2 * x - 1);
	}
	else if (x > 3)
	{
		sum = 2 * log10(3 * x + 5) - 11;
	}
	printf("%f",sum);
}*/
//计算数列的前n项和
/*void main()
{
	int term=0,i=1,n,sum=0;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		term = term * 10 + i;
		sum = sum + term;
	}
	printf("%d",sum);
}*/
//计算会费
/*struct Memlnfo
{
	char name[10];
	double wage;
	double bonus;
	double allowance;
	int due;
};
void main()
{
	int n,i,j;
	scanf("%d",&n);
	struct Memlnfo stu[30];
	//输入
	double base=0;
	for (i = 0; i < n; i++)
	{
		scanf("%s%lf%lf%lf", stu[i].name, &stu[i].wage, &stu[i].bonus, &stu[i].allowance);
		base = (stu[i].wage + stu[i].bonus + stu[i].allowance);
		//必须用double接收
		if (base <= 3000)
		{
			stu[i].due = (int)(base * (0.005));
		}
		else if (3000 < base && base <= 5000)
		{
			stu[i].due = (int)(base * (0.01));
		}
		else if (base > 5000)
		{
			stu[i].due = (int)(base * (0.015));
		}
	}
	//max；
	int max = stu[0].due;
	for (i = 0; i < n; i++)
	{
		if (max < stu[i].due)
			max = stu[i].due;
	}
	for (i = 0; i < n; i++)
		if (max == stu[i].due)
			printf("%s %d\n", stu[i].name, stu[i].due);
}*/
//邮费
/*void  main()
{
	char c;
	int ke, fee = 0;
	printf("请输入重量(克),选择是否加急(y/n):");
	scanf("%d%c", &ke, &c);
	if (ke <= 1000)
	{
		fee = 8;
	}
	else if (ke > 1000)
	{
		fee = fee + 8 + ((ke - 1000) / 500) * 3;
		if ((ke - 1000) % 500 != 0)
			fee = fee + 3;
	}
	if (c == 'y')
		fee = fee + 5;
	printf("应付邮费%d元",fee);
}*/
//移位
/*void main()
{
	int n,a[30],i,wei;
	printf("请输入数组的长度(<=100):");
	scanf("%d",&n);
	printf("请输入%d个数:",n);
	for (i = 0; i < n; i++)
		scanf("%d",&a[i]);
	printf("请输入移动的位置:");
	scanf("%d",&wei);
	int b[100],k=0;
	for (i = wei;i<n;i++)
	{
		b[k++] = a[i];
	}
	for (i = 0; i < wei; i++)
	{
		b[k++] = a[i];
	}
	printf("移动后数组:\n");
	for (i = 0; i < n; i++)
		printf("%d ",b[i]);
}*/
/*void main()
{
	int a[100], n, m, i, t, j;
	printf("请输入数组的长度(<=100):");
	scanf("%d", &n);
	printf("请输入10个数：");
	for (i = 0; i < n; i++)
		scanf("%d", &a[i]);
	printf("请输入移动的位数：");
	scanf("%d", &m);
	for (i = 1; i <= m; i++)//移动位数
	{
		t = a[0];
		for (j = 1; j < n; j++)//后一项赋值给前一项
			a[j - 1] = a[j];
		a[n - 1] = t;
	}
	printf("移动后数组：\n");
	for (i = 0; i < n; i++)
		printf("%d ", a[i]);
	return 0;
}*/
//数组插入
/*void main()
{
	int a[10] = { 1,2,3,4,6,7,8,9 };
	int n,i,j;
	scanf("%d",&n);
	for (i = 0; i < 9; i++)
		if (n < a[i])
			break;
	for (j = 8; j >= i; j--)
		a[j + 1] = a[j];
	a[i] = n;//a[i]处赋插入值
	for (i = 0; i < 10; i++)
		printf("%d,",a[i]);
}*/
//数组删除
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,3,8,3,9 };
	int n,i,k,j,count=0;
	scanf("%d",&n);
	for (k = 0; k < 10; k++)//循环找10次
	{
		//单个删除
		for (i = 0; i < 10-count; i++)
		{
			if (a[i] == n)
			{
				count++; break;
			}
		}
		for (j = i; j <=8; j++)//j追高赋到j=8,a[9]常量
		{
			a[j] = a[j + 1];
		}
	}
	for (i = 0; i < 10 - count; i++)
		printf("%d ",a[i]);
}*/
//数组移位
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,0,9 };
	int i,j, count = 0,t;
	
	int n;
	scanf("%d",&n);
	for (j = 0; j < n; j++)
	{
		t = a[0];
		for (i = 1; i < 10; i++)
			a[i - 1] = a[i];
		a[10-1] = t;
	}
	for (i = 0; i < 10; i++)
		printf("%d,",a[i]);
}*/
//学生结构体数组 学号排序
/*struct student
{
	char id[20];
	char name[20];
	float score1;
	float score2;
	float score3;
};
void main()
{
	struct student stu[50];
	int n,i;
	scanf("%d",&n);
	for (i = 0; i < n; i++)
		scanf("%s%s%f%f%f",stu[i].id,stu[i].name,&stu[i].score1,&stu[i].score2,&stu[i].score3);
	int j;
	struct student temp;
	for (i = 0; i < n - 1; i++)
	{
		for(j=0;j<n-1-i;j++)
			if (strcmp(stu[j].id, stu[j + 1].id) > 0)
			{
				temp = stu[j];
				stu[j] = stu[j + 1];
				stu[j + 1] = temp;
			}
	}
	for (i = 0; i < n; i++)
		printf("%s %s %.f %.f %.f\n",stu[i].id,stu[i].name,stu[i].score1,stu[i].score2,stu[i].score3);
}*/
//日常测试
/*void main()//菱形
{
	int i, j, k;
	for (i = 1; i <= 4; i++)
	{
		for (j = 1; j <= 4 - i; j++)
			printf(" ");
		for (k = 1; k <= 2*i-1; k++)
			printf("*");
		printf("\n");
	}
	for (i = 3; i>=1; i--)
	{
		for (j = 1; j <=4-i; j++)
			printf(" ");
		for (k = 1; k <= 2*i-1; k++)
			printf("*");
		printf("\n");
	}
}*/
//计算质因数
/*void main()
{
	int n;
	scanf("%d",&n);
	printf("\n%d=",n);
	int i = 2;
	for (i = 2; i <= n; i++)
	{
		while (n != i)
		{
			if (n % i == 0)
			{
				printf("%d*", i);
				n = n / i;
			}
			else
				break;
		}
	}
	printf("%d",n);
}*/
//m个位置开始复制
/*main()
{
	int m, n;
	char a[100], b[100];
	gets(a);
	scanf("%d", &m);
	
	int i;
	n = 0;
	for (i = m-1; a[i]; i++)
		b[n++] = a[i];
	b[n] = '\0';
	puts(b);
}*/
//易错题
/*int* p;
fun(int x, int *y)//fun(4,2)
{
	int z = 4;
	*p = *y+z;//6 *p=y->6
	x = *p - z;//2
	printf("%d %d %d\n",x,*y,*p);//2 6 6
}
void main()
{
	//p指向y y变p变 p变y变
	int x = 1, y = 2, z = 3;
	p = &y;
	fun(x + z, &y);//fun(4,2)
	printf("%d %d %d",x,y,*p);//1 6 6;
}*/
//计算年份的天数
/*main()
{
	int day, month, year, sum = 0, leap;
	printf("\nplease input year,month,day\n");
	scanf("%d%d%d", &year, &month, &day);
	switch (month - 1)
	{
	case 11:sum += 30;
	case 10:sum += 31;
	case 9:sum += 30;
	case 8:sum += 31;
	case 7:sum += 31;
	case 6:sum += 30;
	case 5:sum += 31;
	case 4:sum += 30;
	case 3:sum += 31;
	case 2:
		if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0))
			sum += 29;
		else
			sum += 28;
	case 1:sum += 31;
	case 0:sum += 0; break;
	default:printf("日期错误");
	}
	sum += day;
	printf("这一年的第%d 天。\n", sum);
}*/
//统计字符串在母串出现的次数
/*main()
{
	char s[80], sub[80];
	int n;
	gets(s);
	gets(sub);
	printf("%d\n", count(s, sub));
}
int count(char* p, char* q)
{
	int m, n, k, num = 0;
	for (m = 0; p[m]; m++)
		for (n = m,k=0; q[k] == p[n]; k++, n++)
			if (q[k + 1] == '\0')
			{
				num++; break;
			}
	return (num);
}*/
/*void main()
{
	//实现原理 a[i]和b[j]进行比较，如果b[j]下一项为0直接计数加一退循环
	char a[80]; char b[80];
	int i, j, k;
	printf("母串:\n");
	gets(a);
	printf("字串:\n");
	gets(b);
	int count = 0;
	for (i = 0; a[i]; i++)//一个一个查
	{
		for (j = 0, k = i; a[k] == b[j]; j++, k++)
		{
			if (b[j + 1] == '\0')
			{
				count++;
				break;
			}
		}
	}
	printf("%d ",count);
}*/
/*void main()
{
	char a[80]; char b[80];
	int i, j, k;
	printf("母串:\n");
	gets(a);
	printf("字串:\n");
	gets(b);
	int n = strlen(b),count=0;
	for (i = 0; a[i]; i++)
	{
		if (strncmp(a+i, b, n) == 0)
		{
			count += 1;
		}
	}
	printf("%d",count);
}*/
//9*9乘法口诀
/*void main()
{
	int i, j;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= i; j++)
			printf("%d*%d=%d ", j, i, i * j);
		printf("\n");
	}
}*/
//计算对角线元素之和
/*void main()
{
	int i, j,sum=0;
	int a[4][4] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (i == j||i+j==3)
			{
				sum += a[i][j];
			}
		}
	}
	printf("%d", sum);
}*/
/*#define n 4
struct student
{
	char stunum[6];
	char name[8];
	double score[3];
	double avr;
};
void main()
{
	int i;
	struct student stu[n];
	for (i = 0; i < n; i++)
	{
		scanf("%s%s%lf%lf%lf",stu[i].stunum,stu[i].name,&stu[i].score[0],&stu[i].score[1],&stu[i].score[2]);
		stu[i].avr = (stu[i].score[0] + stu[i].score[1] + stu[i].score[2]) / 3;
	}
	printf("%s %s %f",stu[3].stunum,stu[3].name,stu[3].avr);
}*/
//n偶数 1/2+1/4+...1/n n奇数 1/1+1/3+...+1/n
/*double fun(int n)
{
	double sum = 0,temp=1;
	int i;
	if (n % 2 == 0)//偶数
		temp = 2;
	for (; temp <= n; temp += 2)
	{
		sum = sum + 1.0 / temp;
	}
	return sum;
}
void main()
{
	double n;
	scanf("%lf",&n);
	printf("%f",fun(n));
	
}*/
//插入
/*void main()
{
	int a[10] = { 1,3,4,5,6 };
	int n,i,j;
	scanf("%d",&n);
	for (i = 0; i < 10; i++)
		if (a[i] > n)
			break;
	for (j = 4; j >= i; j--)
		a[j + 1] = a[j];
	a[i] = n;
	for (i = 0; i < 10; i++)
		printf("%d",a[i]);
}*/
//共用体
/*main()
{
	union
	{
		int i[2];
		int k;
		char c[4];
	}t, * s = &t;
	s->i[0] = 0x39;
	s->i[1] = 0x38;
	printf("%d ", s->k);//57
	printf("%c\n", s->c[0]);//9
}*/
//素数
/*int fun(int n)
{
	int i,flag=1;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	}
	return flag;
}
int main()
{
	int i,n;
	scanf("%d",&n);
	for (i = 1+n;; i++)
	{
		if (fun(i))
		{
			printf("%d",i);
			break;
		}
	}
}*/
//字符串最短
/*void main()
{
	char a[5][80];
	int i;
	for (i = 0; i < 5; i++)
		gets(a[i]);
	char b[80];
	strcpy(b, a[0]);
	for (i = 0; i < 5; i++)
	{
		if (strlen(a[i]) < strlen(b))
		{
			strcpy(b, a[i]);
		}
	}
	puts(b);
}*/
//pai
/*void main()
{
	float sum = 1, fz=1, fm = 1, term,i=1;
	do
	{
		fz = fz * i;
		fm = fm * (2 * i + 1);
		term = fz / fm;
		sum += term;
		i++;
	} while (term >= 1e-6);
	printf("%f",sum*2);
}*/
//数字去重复
/*void main()
{
	int a[20] = {1,2,3,4,4,5,6,3,4,5,6,6,6,7,8,5,3,3 };
	//排序
	int i, j, k,t;
	for (i = 0; i < 19; i++)
	{
		for (j = 0; j < 19 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	//去重复
	j = 1;
	k = a[0];
	for (i = 1; i < 20; i++)
	{
		if (k != a[i])
		{
			a[j++] = a[i];
			k = a[i];
		}
	}
	for (i = 0; i < j; i++)
		printf("%d ",a[i]);
}*/
//字符去重复
/*void main()
{
	char a[13] = { "aabbcdfsdasd" };
	int i, j, n,k;
	n = strlen(a);
	for (i = 0; i < 12; i++)
	{
		for (j = k = i + 1; j < 12; j++)
		{
			if (a[j] != a[i])
				a[k++] = a[j];
		}
		a[k] = '\0';
	}
	puts(a);
}*/
//100-999素数及和
/*int prime(int x)
{
	int i,flag=1;
	for (i = 2; i < x; i++)
	{
		if (x % i == 0)
		{
			flag = 0;
			break;
		}
	}
	if (x == 1)
		return 0;
	return flag;
}
void main()
{
	int i, sum = 0;
	for (i = 100; i <= 999; i++)
	{
		if (prime(i) == 1)
		{
			printf("%d ", i);
			sum = sum + i;
		}
	}
	printf("\nsum:%d",sum);
}*/
//2+22+222+222+...
/*void main()
{
	int term=0,n,i, a,sum=0;
	scanf("%d%d",&n,&a);
	for (i = 0; i < n; i++)
	{
		term = term * 10 + a;
		sum = sum + term;
	}
	printf("%d",sum);
}*/
//逆序
/*void swap(int* arr, int n)
{
	int i,t;
	for (i = 0; i < n / 2; i++)
	{
		t = arr[i];
		arr[i] = arr[n - i-1];
		arr[n - 1 - i] = t;
	}
}
void main()
{
	int a[] = { 2,4,6,8,10,12,14,16,18,20 };
	int i;
	swap(a, 10);
	for (i = 0; i < 10; i++)
		printf("%d ",a[i]);
}*/
//蠕虫问题
/*int main()
{
	int n, u, d, i, j, t = 0, sum = 0;
	scanf("%d %d %d", &n, &u, &d);
	while (sum <= n)//当虫子爬的距离大于井深，退出循环
	{
		sum += u;//先算虫子爬的距离
		t++;//向上爬的时间
		if (sum >= n)//这一步目的是判断虫子这一分钟爬到了井外，在下一分钟没有落下去之前
		{
			break;
		}
		sum -= d;//减去下一分钟落下去的距离
		t++;//落下去的时间
	}
	printf("%d\n", t);
	return 0;
}*/
//输入平均成绩统计不及格的门次
/*struct student
{
	float score[4];
	float sum;
	int fail;
};
void main()
{
	struct student stu[2];
	int i;
	for (i = 0; i < 2; i++)
	{
		stu[i].sum = 0;
		stu[i].fail = 0;
		scanf("%f%f%f%f",&stu[i].score[0],&stu[i].score[1], &stu[i].score[2], &stu[i].score[3]);
		stu[i].sum = (stu[i].score[0] + stu[i].score[1] + stu[i].score[2] + stu[i].score[3])/4;
		if (stu[i].score[0] < 60)
			stu[i].fail++;
		if (stu[i].score[1] < 60)
			stu[i].fail++;
		if (stu[i].score[2] < 60)
			stu[i].fail++;
		if (stu[i].score[3] < 60)
			stu[i].fail++;
	}
	for (i = 0; i < 2; i++)
	{
		printf("%.f %d\n", stu[i].sum, stu[i].fail);
	}
}*/
//菲薄前20
/*void main()
{
	int a[20] = { 1,1 };
	for (int i = 2; i < 20; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
	}
	for (int i = 0; i < 20; i++)
	{
		if (i != 0 && i % 4 == 0)
			printf("\n");
		printf("%-5d",a[i]);
	}
}*/
//字母排序
/*void sort(char* words[], int n)
{
	int i,j;
	char b[80];
	for (i = 0; i < n-1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (strcmp(words[j], words[j+1])>0)
			{
				strcpy(b, words[j]);
				strcpy(words[j], words[j + 1]);
				strcpy(words[j + 1], b);
			}
		}
	}
}
void main()
{
	char a[5][50],*word[5];
	int i;
	for (i = 0; i < 5; i++)
		gets(a[i]);
	for (i = 0; i < 5; i++)
		word[i] = a[i];
	sort(word, 5);
	puts("\n");
	for (i = 0; i < 5; i++)
		puts(a[i]);
}*/
//分解因数 90=2*3*3*5
/*int fun(int n)
{
	int flag = 1, i;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0)
		{
			flag = 0;
			break;
		}
	}
	if (n == 1)
		return 0;
	return flag;
}
void main()
{
	int n,i;
	scanf("%d",&n);
	printf("%d=",n);
	for (i = 2; i < n; i++)
	{
		while (n % i == 0&&fun(i))
		{
			printf("%d*",i);
			n = n / i;
		}
	}
	printf("%d",n);
}*/
//递归实现逆序
/*int fun(int n)
{
	int i;
	if (n< 9)
		printf("%d",n);
	else
	{
		printf("%d",n%10);
		fun(n / 10);
	}
}
void main()
{
	int n;
	scanf("%d",&n);
	fun(n);
}*/
//一堆数组求偶数max
/*int fun(int a[], int n)
{
	int i,max=a[0];
	for (i = 0; i < n; i++)
	{
		if (a[i] % 2 == 0 && a[i] > max)
			max = a[i];
	}
	printf("max：%d",max);
}
void main()
{
	int a[10] = { 1,3,56,2,7,8,3,2,89,56 };
	int i;
	fun(a,10);
}*/
/*double fun(int m)
{
	double sum = 0, i = 0,term,fz=1;
	do
	{
		term = 1.0 / fz;
		sum = sum + term;
		i++;
		fz = (i * 2 + 1);
		
	} while (fz <= 2 * m + 1);
	return sum;
}
void main()
{
	int n;
	scanf("%d",&n);
	printf("%f",fun(n));
}*/
//求1！-n！之和
/*int fun(int n)
{
	int i,s = 1;
	for (i = 1; i <= n; i++)
		s = s * i;
	return s;
}
void main()
{
	int i,n,sum=0;
	scanf("%d",&n);
	for (i = 1; i <= 20; i++)
		sum = sum + fun(i);
	printf("%d",sum);
}*/
//八进制
/*void main()
{
	char a[80],*p;
	scanf("%s",a);
	int sum = 0,t;
	p = a;
	t = *p - '0';
	while (*(++p))
	{
		t = t*8+*p-'0';
	}
	printf("%d",t);
}*/
//16进制转10进制
/*void main()
{
	int n,m;
	char a[80];
	scanf("%s",a);
	char* p;
	p = a;
	if (*p >= 'A')
		n = *p - 'A'+10;
	else
		n = *p - '0';
	while (*(++p))
	{
		if (*p >= 'A')
			m = *p - 'A'+10;
		else
			m = *p - '0';
		n = n * 16 + m;
	}
	printf("%d",n);
}*/
//投票
/*struct student
{
	char name[20];
	int count;
}stu[3] = {"li",0,"wa",0,"zh",0};
void main()
{
	int i,j;
	char a[30];
	for (i = 0; i < 5; i++)
	{
		gets(a);
		for(j=0;j<3;j++)
		if (strcmp(stu[j].name, a) == 0)
			stu[j].count=stu[j].count+1;
	}
	for (i = 0; i < 3; i++)
		printf("%s:%d\n",stu[i].name,stu[i].count);

}*/
//计算会费最多的会员姓名和会费
/*struct MemInfo
{
	char name[10];
	double wage;//工资
	double bonus;//奖金
	double allowance;//补贴
	double sum;//会费
	int due;
};
void main()
{
	struct MemInfo stu[100];
	int i;
	int N;
	scanf("%d",&N);
	for (i = 0; i < N; i++)
	{
		scanf("%s%lf%lf%lf", stu[i].name, &stu[i].wage, &stu[i].bonus, &stu[i].allowance);
		stu[i].sum = (stu[i].wage + stu[i].bonus + stu[i].allowance);
	}
	for (i = 0; i < N; i++)
	{
		if (stu[i].sum <= 3000)
		{
			stu[i].due = (int)(stu[i].sum * 0.5 / 100);
		}
		else if (3000 < stu[i].sum && stu[i].sum <= 5000)
		{
			stu[i].due = (int)(stu[i].sum * 1 / 100);
		}
		else if (5000 < stu[i].sum)
		{
			stu[i].due = (int)(stu[i].sum * 1.5 / 100);
		}
	}
	int max = stu[0].due;
	for (i = 0; i < N; i++)
	{
		if (stu[i].due > max)
			max = stu[i].due;
	}
	for (i = 0; i < N; i++)
	{
		if (stu[i].due == max)
			printf("%s:%d\n",stu[i].name,stu[i].due);
	}
}*/
//杨辉三角
/*void main()
{
	int i, j, a[10][10] = { 1 };
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j <= i; j++)
		{
			a[i][0] = 1;
			if (i == j)
				a[i][j] = 1;
			else
				a[i][j] = a[i - 1][j - 1] + a[i - 1][j];
		}
	}
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 10-1-i; j++)
			printf(" ");
		for (j = 0; j <=i; j++)
			printf("%d ", a[i][j]);
		printf("\n");
	}
}*/
/*void fun(char* s, char t[])
{
	int i,k=0;
	for (i = 0; *(s + i); i++)
	{
		if (*(s + i) % 2 == 0)
			t[k++] = *(s + i);
	}
	t[k] = '\0';
	puts(t);
}
void main()
{
	char a[50],b[50];
	gets(a);
	fun(a, b);
}*/
//删除重复字符串
/*void main()
{
	char a[80];
	gets(a);
	int i, j, k,n=strlen(a);
	for (i = 0; i<n; i++)
	{
		for (j = k = i + 1; j < n; j++)
		{
			if (a[j] != a[i])
			{
				a[k++] = a[j];
			}
		}
		a[k] = '\0';
	}
	puts(a);
}*/
//输出3位数字的素数
/*void main()
{
	int i,j,count=0;
	for (i = 100; i <= 999; i++)
	{
		for (j = 2; j < i; j++)
		{
			if (i % j == 0)
				break;
		}
		if (i == j)
		{
			if (count != 0 && count % 3 == 0)
				printf("\n");
			count++;
			printf("%d ",i);
		}
	}
}*/
//9*9乘法表
/*void main()
{
	int i, j;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= i; j++)
			printf("%dx%d=%d  ",j,i,i*j);
		printf("\n");
	}
}*/
//
/*void main()
{
	char c; int i;
	int a[10] = { 0 };
	while ((c = getchar()) != '#')
	{
		if (c >= '0' && c < '9')
			a[c - '0']++;
	}
	for (i = 0; i < 10; i++)
		printf("'%d'的个数为%d\n",i,a[i]);
}*/
//搬砖
/*void main()
{
	int i, j, k;
	for (i = 0; i <= 25; i++)//男人最多25人
	{
		for (j = 0; j <= 33; j++)//女人最多33人
		{
			k = 100 - i - j;//小孩
			if ((i + j + k == 100) && (i * 8 + j * 6 + k  == 200))
				printf("%d %d %d\n",i,j,k);
		}
	}

}*/
//转置加
/*void fun(int a[3][3], int b[3][3])
{
	int c[3][3],i,j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
			c[j][i] = a[i][j];
	}
	//求和
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
			b[i][j] = a[i][j] + c[i][j];
	}
}
void main()
{
	int a[3][3], b[3][3];
	int i, j;
	printf("输入9个数:\n");
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
			scanf("%d", &a[i][j]);
	}
	fun(a, b);
	printf("\n");
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
			printf("%d ", b[i][j]);
		printf("\n");
	}
}*/
//test
//递归函数正整数逆序
/*int fun(int n, int* m)//指针函数传值
{
	if (n < 10)//小于10结束
	{
		*m = (*m) * 10 + n;
	}
	else//大于10 取个位
	{
		*m = (*m) * 10 + n%10;
		fun(n / 10, m);
	}
	return *m;
}
void main()
{
	int n,k=0;
l1:
	scanf("%d",&n);
	if (n > 0)
		printf("%d", fun(n, &k));
	else
		goto l1;
}*/
//统计字符
/*int zifu;//全局变量
int shuzi;
int space;
int qita;
int count(char s[])//返回字符长度
{
	int sum = 0;
	int i;
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] >= '0' && s[i] <= '9')
		{
			shuzi++;
			sum++;
		}
		else if (s[i] >= 'a' && s[i] <= 'z'||s[i]>='A'&&s[i]<='Z')
		{
			zifu++;
			sum++;
		}
		else if (s[i]==' ')
		{
			space++;
			sum++;
		}
		else 
		{
			qita++;
			sum++;
		}
	}
	return sum;
}
void main()
{
	char s[100];
	gets(s);
	int sum;
	sum = count(s);
	printf("总长度:%d\n字符:%d\n数字:%d\n空格:%d\n其他字符:%d\n",sum,zifu,shuzi,space,qita	);

}*/
void main()
{
	int a[3][4] = {1,6,3,4,5,30,7,8,9,10,11,12};
	int i, j, p;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			printf("%d",a[i][j]);
		printf("\n");
	}
	for (i = 0; i < 3; i++)
	{
		p=0;
		for (j = 1; j < 4; j++)
			if (a[i][p] < a[i][j])
				a[i][p]=a[i][j];
		printf("%d\n",a[i][p]);
	}
}
#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>//调用输出语句
#include<math.h>//调用数学函数
#include<string.h>//strcat;
#include<stdlib.h>//rand
//比大小
/*void main()
{
	int a,b;
	printf("输入a和b\n");
	scanf("%d",&a);
	scanf("%d",&b);
	if(a>b)
		printf("max：%d",a);
	else
		printf("max:%d",b);
}*/
//用两个函数(主函数和被调用函数max)
/*int  main()
{
	int max(int x,int y);
	int a,b,c;
	scanf("%d",&a);
	scanf("%d",&b);
	c=max(a,b);
	printf("max=%d\n",c);
	return 0;

}
int max(int x ,int y)
{
	int z;
	if(x>y)
		z=x;
	else
		z=y;
	return z;
}*/
//求阶乘
/*void main()
{
	int s=1,c=2;
	for(int i=1;i<4;i++)//执行3次乘法运算(4！需要3次运算)&&while(c<=4)当C等于4的时候停止=4的阶乘
	{
	s=s*c;//NO.1*NO.2=NO.1
	c++;//NO.2自加一
	}
	printf("阶乘为%d",s);
}*/
//算法多项式符号异
/*int main()
{
	int sign=1;
	double deno = 2,sum=1.0,term;
	while(deno<=2)
	{
		sign = -sign;
		term = sign/deno;
		sum=sum+term;
		deno = deno+1;
	}
	printf("%.3f\n",sum);


}*/
//三角形面积
/*void main()
{
	double a,b,c,s,area;
	a=3.67;
	b=5.43;
	c=6.21;
	s=(a+b+c)/2;
	area=sqrt(s*(s-a)*(s-b)*(s-c));
	printf("a=%f,b=%f,c=%f\n",a,b,c);
	printf("area=%f\n",area);
}*/
//求方程的解
/*void main()
{
	double a,b,c,disc,x1,x2,p,q;
	scanf("%lf%lf%lf",&a,&b,&c);
	disc=b*b-4*a*c;
	if(disc<0)
		printf("无实根\n");
	else
	{
		x1=((-b)+sqrt(disc))/(2.0*a);
		x2=((-b)-sqrt(disc))/(2.0*a);
		printf("根:%.2lf,%.2lf",x1,x2);
	}
}*/
//捐款问题
/*void main()
{
	int amount,sum=0;
	int i;
	for(i=1;i<=1000;i++)
	{

		scanf("%d",&amount);
		sum+=amount;
		if(sum>10000)
			break;

	}printf("共%d元\n",sum);
	int aver;
	aver=sum/i;
	printf("平均%d元",aver);
}*/
//100-200不能被3 整除的数
/*void main()
{
	for(int i=100;i<=200;i++)
	{
		if(i%3==0)
		{
			continue;
		}
		printf("%d\t",i);
	}
}*/
//输出4X5的矩阵
/*void main()
{
	int n=0;
	for(int i=1;i<=4;i++)
	{
		for(int j=1;j<=5;j++)
		{
			if(n%5==0)
				printf("\n");n++;
		   printf("%d\t",i*j);
		}
		printf("\n");
	}
}*/
//迭代法
/*void main()
{
	int sign=1;
	double pi=0.0,n=1.0,term=1.0;
	while(fabs(term)>=1e-6)
	{
		pi=pi+term;//循环求累加
		n=n+2;//分母循环加二
		sign=-sign;//分子循环变换
		term=sign/n;//下一项分子
	}
	pi=pi*4;
	printf("pi=%10.8f\n",pi);
}*/
//斐波那契数列
/*void main()
{
	int f1=1,f2=1;
	for(int i=1;i<=20;i++)
	{
		printf("%12d %12d",f1,f2);
		if(i%2==0)
			printf("\n");
		f1=f1+f2;;
		f2=f2+f1;
	}
}*/
//判断大于3的整数,是否为素数
/*void main()
{
	int n,i;
	scanf("%d",&n);
	//int k;k=sqrt(n);
	for(i=2;i<n;i++)//i<k
	{
		if(n%i==0)break;
	}
	if(i<n) printf("%d不是素数",n);
	else printf("%d是素数",n);
}*/
//100-200的素数
/*void main()
{
	int n,a;
	for(int i=100;i<=200;i++)
	{
		for( a=2;a<i;a++)
		{
			if(i%a==0) break;
		}
		if(i==a) printf("%d\t",i);
	}
}*/
/*void main()
{
	int n, k, i, m = 0;
	for (n = 101; n <= 200; n = n + 2)
	{
		k = sqrt(n);
		for (i = 2; i <= k; i++)
			if (n % i == 0) break;
		if (i >= k + 1)
		{
			printf("%4d", n);
			m = m + 1;
		}
		if (m % 10 == 0) printf("\n");
	}
	printf("\n");
	return 0;
}*/
//译密码 china!->glmare! 需要注意的是w->z之间应减22才能构成循环
/*void main()
{
	char c;
	c = getchar();
	while (c != '\n')
	{
		if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		{
			if ((c >= 'W' && c <= 'Z' )|| (c >= 'w' && c <= 'z')) //c>='Z'&&C<='z-4'||c>'z'    c=c-26
				c = c - 22;
			c = c + 4;
		}
		printf("%c", c);
		c = getchar();
	}
	printf("\n");
	return 0;
}*/
//数组逆序输出10个元素
/*void main()
{
	int a[10], i;
	for (i = 0; i <= 9; i++)
	{
		a[i] = i;
	}
	for ( i = 9; i >= 0; i--)
	{
		printf("%d",a[i]);
	}
	printf("\n");
}*/
//数组斐波那契数列
/*void main()
{
	int i;
	int a[20] = {1,1};
	for (i = 2; i <20; i++)
		a[i] = a[i - 1] + a[i - 2];
	for (int i = 0; i <20; i++)
	{
		if (i % 5 == 0)
			printf("\n");
		printf("%12d", a[i]);
	}
	printf("\n");
}*/
//一维数组冒泡排序
/*void main()
{
	int a[10];
	int i, j, t;
	printf("输入10个数:\n");
	for (i = 0; i < 10; i++)//元素i个
		scanf("%d", &a[i]);
	for(i=0;i<10-1;i++)//在i-1个元素下比较j-i次
		for(j=0;j<10-1-i;j++)
			if (a[j] > a[j + 1])
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
	printf("排好的数:\n");
	for (i = 0; i < 10; i++)
		printf("%d",a[i]);
}*/
/*void main() {
	int a[10], i, j, max;
	for (i = 0; i < 10; i++) 
		scanf("%d", &a[i]);
	for (i = 0; i < 10 - 1; i++) //循环9次
	{
		for (j = 0; j < 10 - 1 - i; j++) 
		{
			if (a[j] > a[j + 1]) 
			{
				max = a[j];
				a[j] = a[j + 1];
				a[j + 1] = max;
			}
		}
	}
	printf("冒泡排序后的顺序为：");
	for (i = 0; i < 10; i++) {
		printf("%d ", a[i]);
	}
}*/
//二维数组行列转换 a[i][j]=b[j][i]
/*void main()
{
	int a[2][3] = { {1,2,3},{4,5,6} };
	int b[3][2], i, j;
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			printf("%5d",a[i][j]);
			b[j][i] = a[i][j];
		}
		printf("\n");
	}
	for (int i = 0; i <=2; i++)
	{
		for (int j = 0; j <=1; j++)
		{
			printf("%5d",b[i][j]);
		}
		printf("\n");
	}
}*/
//二维数组求最大元素值
/*void main()
{
	int i, j, row = 0, colum = 0, max;
	int a[3][4] = { {1,2,3,4},{9,8,7,6},{-10,10,-5,2} };
	max = a[0][0];//定义初始值为最大值
	for (int i = 0; i <= 2; i++)//主干程序
	{
		for (int j = 0; j <= 3; j++)
		{
			if (a[i][j] > max)
			{
				max = a[i][j];
				row = i;
				colum = j;
			}
		}
	}
	printf("max=%d\nrow=%d\ncolum=%d\n",max,row,colum);
}*/
//引用字符数组输入一个已知的字符串
/*void main()
{
	char c[] = {'I',' ','a','m',' ','a',' ','s','t','u','d','e','n','t','.'};//若单引号内部为2个字母输出最后一个
	for (int i = 0; i <= 14; i++)//数组长度
	{
		printf("%c",c[i]);
	}
	printf("\n");
}*/
//数组菱形
/*void main()
{
	char diamond[][5] = { {' ',' ','*'},{' ','*',' ','*'},{'*',' ',' ',' ','*'},{' ','*',' ','*'},{' ',' ','*'} };
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			printf("%c", diamond[i][j]);
		}
		printf("\n");
	}
}*/
//stract(字符数组1)(字符数组2)
/*void main()
{
	char str1[50] = {"People's Rebulic of "};
	char str2[] = {"China"};
	printf("%s",strcat(str1,str2));
}*/
//strcpy(字符数组1,字符数组2):全复制//strncpy(str1,str2,n):将str2的前n项复制到str1
//使用strncpy时应该将第一个str1赋初值'\0',memset(str1,'\0',sizeof(st1));
/*void main()
{
	char str1[10], str2[40]="china";
	memset(str1, '\0', sizeof(str1));
	//strcpy(str2,"china");
	strncpy(str1,str2,3);
	printf("%s",str1);
	
	char src[40];
	char dest[12];

	memset(dest, '\0', sizeof(dest));
	strcpy(src, "This is runoob.com");
	strncpy(dest, src, 10);

	printf("最终的目标字符串： %s\n", dest);
}*/
//strcmp字符串比较(strcmp(str1,str2)str>str2为正)
/*void main()
{
	char str1[] = "cog";
	char str2[] = "dog";
	if (strcmp(str1, str2) > 0)
	{
		printf("str1>str2");
	}
	else if (strcmp(str1, str2) == 0)
		printf("str1=str2");
	else if (strcmp(str1, str2) < 0)
		printf("str1<str2");
}*/
//strlen和sizeof字符串长度
/*void main()
{
	char str[10] = "china";
	char str1[] = { 'c','h','i','n','a' };
	char str2[] = "china";
	printf("strlen:%d\n",strlen(str));//5-
	printf("sizeof:%d\n", sizeof(str));//10
	printf("strlen:%d\n", strlen(str1));//37,随机数
	printf("sizeof:%d\n", sizeof(str1));//5
	printf("strlen:%d\n", strlen(str2));//5
	printf("sizeof:%d", sizeof(str2));//6
}*/
//输入一行字符统计其中有几个单词;※
/*void main()
{
	char string[81];
	int i, num = 0, word = 0;
	char c;
	gets(string);//接收字符串,现在单词位置不是空,前边为空,单词计数 加1
	for (i = 0; (c = string[i]) != '\0'; i++)
	{
		if (c == ' ')//当前为空
			word = 0;//没有新单词
		else if (word == 0)//现在不为空,前面是空
		{
			word = 1;//新单词出现
			num++;
		}
	}
	printf("单词个数:%d",num);
}*/
//键盘输入5个数输出大于0的数
/*void main()
{
	int i, a[5],max;
	for (int i = 0; i < 5; i++)
	{
		scanf("%d",&a[i]);
		
	}
	for (int i = 0; i < 5; i++)
	{
		if (a[i] > 0)
			printf("%3d",a[i]);
	}
}*/
//在数组中存5个数，求max,min,各自下标
/*void main()
{
	int a[5],max,min;
	for (int i = 0; i < 5; i++)
	{
		scanf("%d",&a[i]);
	}
	max = min = a[0];
	int j = 0, k = 0;
	for (int i = 0; i < 5; i++)
	{
		if (max < a[i]) { max = a[i]; j = i; }
		if (min > a[i]) { min = a[i]; k = i; }
	}
	printf("max:%d,min:%d,max的下标:%d,min的下标%d",max,min,j,k);
}*/
//数组转置
/*void main()
{
	int a[5][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16},{17,18,19,20} };
	int b[4][5];
	for (int i = 0; i < 5; i++)
		for (int k = 0; k < 4; k++)
			b[k][i] = a[i][k];
	for (int i = 0; i < 5; i++)
	{ 
		for (int k = 0; k < 4; k++)
			printf("%5d",a[i][k]);
		printf("\n");
	}
	printf("----------------------------\n");
	for (int k = 0; k < 4; k++)
	{
		for (int i = 0; i < 5; i++)
			printf("%5d", b[k][i]);
		printf("\n");
	}
}*/
//键盘输入若干学生计算平均成绩,输出高于平均分的人数和成绩
/*void main()
{
	float score[100], ave, sum = 0, x;
	int n = 0, count,i;
	scanf("%f",&x);
	while (x > 0 && n <= 100)
	{
		sum += x;
		score[n++] = x;//输入的数放到score数组中
		scanf("%f",&x);
	}
	ave = sum / n;
	printf("ave:%f\n",ave);
	for( i=0,count=0;i<n;i++)
		if (score[i] > ave)
		{
			printf("%f",score[i]);
			count++;
			if (count % 5 == 0) printf("\n");
		}
	printf("count=%d\n",count);
}*/
//1-5的阶乘
/*void main()
{
	int a,jec=1;
	int sum = 0;
	//scanf("%d",&a);
	for (int j = 1; j <= 5; j++)
	{
		jec = 1;
		for (int i = 1; i <= j; i++)//阶乘
		{
			jec = jec * i;
		}
		sum = sum + jec;
	}
	printf("%d",sum);
}*/
/*void main()
{
	int sum = 0,jec=1;
	for (int i = 1; i <= 5; i++)
	{
		jec = jec * i;
		printf("%d的阶乘%d\n",i,jec);
		sum += jec;
	}
	printf("总和:%d",sum);
}*/
//分数相加减
/*void main()
{
	int sign = 1; double pi = 0, n = 1, term = 1;
	while (fabs(term) >= 1e-6)
	{
		pi = pi + term;
		n = n + 2;
		sign = -sign;
		term = sign / n;
	}
	pi = pi * 4;
	printf("pi=%10.8f\n",pi);
}*/
//数组计算平均分
/*void main()
{
	int score[10],sum=0;
	int aver,count=0;
	for (int i = 0; i <= 9; i++)
	{
		scanf("%d",&score[i]);
		sum += score[i];
	}
	aver = sum / 10;
	for (int i = 1; i <= 9; i++)
	{
		if (score[i] > aver)
		{
			printf("大于平均分的分数:%3d\n",score[i]);
			count++;
		}
	}
	printf("%d人超过平均分",count);
}*/
//二维数组a[10][10]的对角线为1
/*void main()
{
	int a[10][10], i, j;
	srand(time(0));
	for (i = 0; i <= 9; i++)
	{
		for (j = 0; j <= 9; j++)
		{
			a[i][j] = rand() % 10;
			printf("%3d", a[i][j]);
		}
		printf("\n");
	}
	printf("-------------------------------->\n");
	for (i = 0; i <=9; i++)
	{
		for (j = 0; j <= 9; j++)
		{
			if (i == j || i + j == 9)
				a[i][j] = 1;
			else a[i][j] = 0;
			printf("%3d", a[i][j]);
		}
		printf("\n");
	}
}*/
//对角线求和
/*void main()
{
	int a[3][3] = { 1,2,3,4,5,6,7,8,9 }, i, j;
	int sum = 0, sum1 = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
			printf("%3d", a[i][j]);
		printf("\n");
	}
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)//后可跟sum+=a[i][i];sum1+=a[i][2-1];
		{
			if (i == j)//主对角线
				sum += a[i][j];
			if (i + j == 2)//斜对角线
				sum1 += a[i][j];
		}
	}
	printf("主对角线%d,斜对角线%d",sum,sum1);
}*/
//判断素数
/*void main()
{
	int a,i;
	scanf("%d",&a);
	for (i = 2; i <= a - 1; i++)
	{
		if (a % i == 0)
			break;
	}
	if (i == a)
		printf("%d是素数 ", a);
	else
		printf("不是素数");
}*/
//慈善捐款
/*void main()
{
	int a;
	float sum = 0, aver;;
	int i;
	for (i = 1; i <= 1000; i++)
	{
		scanf("%d",&a);
		sum += a;
		if (sum >= 20000)
			break;
	}
	aver = sum / i;
	printf("捐款平均金额:%.1f\n捐款人数:%d",aver,i);
}*/
//判断字符统计出字母，数字，空格和其他字符个数
/*void main()
{
	int zi=0, shu=0, kong=0, qi = 0;
	char c;
	while ((c = getchar()) != '\n')
		if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')
			zi++;
		else if (c >= '0' && c <= '9')
			shu++;
		else if (c == ' ')
			kong++;
		else qi++;
	printf("数字:%d,字母:%d,空格:%d,其他:%d",shu,zi,kong,qi);
}*/
//辗转法相除法求最大公因数
/*void main()
{
	int a, b,t,i;
	scanf("%d%d",&a,&b);
	if (b > a)
	{
		t = b;
		b = a;
		a = t;
	}
	while (b)
	{
		t = a % b;
		a = b;
		b = t;
	}
	printf("最大公因数%d\n",a);
}*/
//百钱百鸡
/*void main()
{
	int gon, mu, xiao;//gon<=20;mu<=33;xiao<=100
	for (gon = 0; gon <= 20; gon++)
		for (mu = 0; mu <= 33; mu++)
			for (xiao = 0; xiao <= 100; xiao++)
				if ((gon * 5 + mu * 3 + xiao / 3 == 100) && (gon + mu + xiao == 100))
					printf("公鸡:%d 母鸡:%d 小鸡:%d \n",gon,mu,xiao);
}*/
//译密码
/*void main()
{
	char c;
	//c = getchar();
	while ((c=getchar()) != '\n')
	{
		if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		{
			if ((c >= 'w' && c <= 'z' )||( c >= 'W' && c <= 'Z'))
				c -= 22;
			else 
				c += 4;
		}
		printf("%c",c);
		//c = getchar();

	}
}*/
//数组求平均值
/*void main()
{
	float average(float array[]);
	float score[10] = { 67.5,89.5,99,69,89.5,54.60,60,99.5,100,47.9 };
	printf("%.2f",average(score));

}
float average(float array[10])
{
	float sum = 0,aver;
	int i;
	for (i = 0; i <= 9; i++)
	{
		sum += array[i];
	}
	aver = sum / 10;
	return aver;
}*/
//函数数组选择法排序
/*void main()
{
	void sort(int array[], int n);
	int array[] = { 3,2,5,6,1,4 };
	sort(array, 6);
} 
void sort(int array[], int n)
{
	int i, j,t;
	for (i = 0; i < n - 1; i++)
	{
		for (j = i + 1; j < n; j++)
		{
			if (array[i] > array[j])
			{
				t = array[i];
				array[i] = array[j];
				array[j] = t;
			}
		}
	}
	for (i = 0; i < n; i++)
	{
		printf("%d",array[i]);
	}
}
*/
//函数调用查找
//函数调用求3x4矩阵的最大值
/*int main()
{
	int maxvalue(int array[][4]);
	int a[3][4] = { {1,3,5,7},{2,4,6,8},{15,17,34,12} };
	printf("max：%d",maxvalue(a));
}
int maxvalue(int array[][4])//最后一个方括号不能为空
{
	int m, j, i;
	m = array[0][0];
	for(i=0;i<3;i++)
		for (j = 0; j < 4; j++)
		{
			if (array[i][j] > m)
				m = array[i][j];
		}
	return m;
}*/
//函数调用复制字符串
/*void main()
{	void copy(char a[], char b[]);
	char a[20], b[20];
	gets(a);
	gets(b);
	copy(a, b);
	puts(a);
}
void copy(char a[],char b[])
{
	int i;
	for (i = 0; b[i] != '\0'; i++)
		a[i] = b[i];
	a[i] = '\0';
}*/
/*void main()
{
	void copy(char a[20], char b[20]);
	int a[20], b[20];
	printf("输入数组a:");
	gets(a);
	printf("输入数组b:");
	gets(b);
	copy(a, b);
	printf("复制后:\n");
	puts(a);
	
}
void copy(char a[20],char b[20])
{
	int i = 0;
	while (b[i]!='\0')
	{
		a[i] = b[i];
		i++;
	}
	a[i] = '\0';
}*/
//函数调用求字符的个数
/*void main()
{
	int count(char array[]);
	char a[20];
	gets(a);
	printf("%d",count(a));
}
int count(char array[])
{
	int i, n = 0;
	for (i = 0; array[i] != '\0'; i++)
		n++;
	return n;
}*/
//static函数变量值会改变,auto不会改变
/*void main()
{
	int fac(int n);
	int i;
	for (i = 1; i <= 5; i++)
	{
		printf("%d!=%d\n",i,fac(i));
	}
}
int fac(int n)
{
	static int f = 1;//f经过f*n后值发生改变
	f = f * n;
	return f;
}*/
//register寄存器变量动态的
//extern声明外部变量
//static声明外部变量,只限于本文件使用
//*q取q地址的内容,&q取q的地址23
//指针实现元素复制
/*void main()
{
	char b[100] = {"abc"};
	char a[35] = {"I am a student"};
	int i;
	for (i = 0; *(a + i) != '\0'; i++)
	{
		*(b+i) = *(a + i);
	}
	*(b+i) = '\0';
	printf("%s",b);
}*/
//指针实现回文
/*void main()
{
	char a[80] = { '\0' }, * p = a, * q = a;
	printf("输入一个字符串:\n");
	gets(q);
	q = a + strlen(a) - 1;
	while(p<q)
		if (*p != *q)
		{
			break;
		}
		else { p++; q--; }
	if (p < q)
		printf("不是回文\n");
	else
		printf("是回文\n");
}*/
/*void main()
 {
	char a[80] = { '\0' }, *p =a, * q=a;
	gets(p);
	p = a;
	q = a+strlen(a) - 1;
	while (p < q)
	{
		if (*p != *q)
		{
			break;//表示不是huiwen
		}
		else 
		{
			p++;
			q--;
		}
	}
	if (p == q)
	{
		printf("是回文\n");
	}
	else
		printf("不是回文");
}*/
//指针实现逆序指定字符串
/*void main()//实现原理第一个和最后一个进行交换
{
	char a[] = { "china is people is country" };
	char* p , * q; 
	char t;//
	gets(a);
	p = a;
	q = strlen(a) - 1 + a;
	for (; p < q; p++, q--) 
	{
		t = *p;
		*p = *q;
		*q = t;
	}
	puts(a);
}*/
//三个字符串找最大值字符串//运用strcmp函数
/*void main()
{
	char a[80] = { '\0' }, b[80] = { '\0' }, c[80] = { '\0' };
	char* p = a, * q = b, * w = c, * t=NULL;
	printf("输入3个字符:\n");
	gets(p); gets(q); gets(w);
	puts(p); puts(q); puts(w);
	t = p;
	if (strcmp(t, q) < 0)
		t = q;
	if (strcmp(t, w) < 0)
		t = w;
	printf("maximum country name is:\n");
	puts(t);
}*/
//三个字符串找最长的字符串
/*void main()
{
	char a[80] = { "meiguo" }, b[80] = { "zhongguo" }, c[80] = { "yinguosadasdasda" };
	char* p = a, * q = b, * w = c;
	if(strlen(p)<strlen(q))
		strcpy(p,q);
	if (strlen(p) < strlen(w))
		strcpy(p,w);
	puts(p);
}*/
//三个字符串由大到小开始输出
/*void main()
{
	char a[80] = { "bmeiguo" }, b[80] = { "azhongguo" }, c[80] = { "cyingguo" }, t[80] = { '\0' };
	char* p=a, * q = b, * w = c;
	printf("Former order:\n");
	puts(p); puts(q); puts(w);
	printf("--->\n");
	//举例strcmp(a,b)<0 ,a<b进行交换
	if (strcmp(p, q) < 0)//p<q
	{
		strcpy(t, p);
		strcpy(p, q);
		strcpy(q, t);
	}
	if (strcmp(p, w) < 0)//p<w
	{
		strcpy(t, p);
		strcpy(p, w);
		strcpy(w, t);
	}
	if (strcmp(q, w) < 0)//q<w
	{
		strcpy(t, q);
		strcpy(q, w);
		strcpy(w, t);
	}
	printf("Final order:\n");
	puts(p); puts(q); puts(w);
}*/
//指针实现连接2个字符串,长的串在前，短的在后
/*void main()
{	
	char a[] = { '\0' }, b[] = { '\0' },*p=a, * q=b;
	p = a, q = b;
	gets(p), gets(q);
	if (strlen(p) > strlen(q))
	{
		strcat(p, q);
		puts(p);
	}
	else
	{
		strcat(q, p);
		puts(q);
	}
}*/
//指针变量定义函数(无法进行分情况处理)
/*void main()//错误示范
{
	int amax(int a, int b);
	int amin(int a, int b);
	int (* p)(int a, int b);
	int a,b,c,n;
	printf("输入a 和 b：\n");
	scanf("%d%d",&a,&b);
	printf("please choose 1 or 2\n");
	scanf("%d",&n);
	if (n == 1)//错误原因语句未闭合,要用else结尾闭合✳
		p = amax;
	else if (n == 2)
		p = amin;
	c = (*p)(a, b);//?
	printf("a:%d\n,b=%d\n",a,b);
	if (n == 1) 
		printf("max=%d\n", c);
	else printf("min=%d\n",c);
}
int amax(int a, int b)
{
	int max;
	if (a > b)
		max = a;
	else
		max = b;
	return max;
}
int amin(int a, int b)
{
	int min;
	if (a < b)
		min = a;
	else
		min = b;
	return min;
}*/
/*void main()//正确示范
{
	int funmax(int x, int y);
	int funadd(int x, int y);
	int funsub(int x, int y);
	int (*p)(int , int);
	int a, b,n=0;
	printf("请输入a,b,c，c:3是求max,c2是求和,c?是减法\n");
	scanf("%d%d%d",&a,&b,&n);
	if (n == 3)
		p = funmax;
	else if (n == 2)
		p = funadd;
	else
		p = funsub;
	int count;
	count = (*p)(a, b);
	printf("最终数值:%d",count);

}
int funmax(int x, int y)
{
	if (x > y)
		return x;
	else return y;
}
int funadd(int x, int y)
{
	int z=0;
	z = x + y;
	return z;
}
int funsub(int x, int y)
{
	int z = 0;
	z = x - y;
	return z;
}*/
//指针实现有若干学生成绩，要求用户输入学生号后输出该学生的全部成绩,
/*void main()
{
	float score[][4] = { {60,70,80,90},{56,89,67,88},{34,78,90,66} };
	float* search(float(*pointer)[4], int n);//定义函数
	float* p;
	int i, m;
	printf("输入学号");
	scanf("%d",&m);
	p = search(score, m);
	for (i = 0; i < 4; i++)
		printf("%5.2f\t",*(p+i));
}
float* search(float(*pointer)[4], int n)//取出第n号的首地址
{
	float* pt;
	pt = *(pointer + n);//pt=pointer[n][0]
	return (pt);
}*/
/*void main()
{
	int score[][4] = { {60,70,80,90},{56,89,67,88},{34,78,90,66} };
	int* search(int(*a)[4], int n);
	int* p;
	int i, m;
	scanf("%d",&m);
	p = search(score, m);
	for (i = 0; i < 4; i++)
	{
		printf("%3d",p[i]);
	}
	
}
int* search(int a[][4], int n)//定义指针函数
{
	int* pt;//pt取a[n][0]地址
	pt = *(a + n);
	return pt;
}*/
//将若干字符串按字母顺序由小到大输出
/*void main()
{
	void sort(char* name[], int n);
	void print(char* name[], int n);
	char* name[] = { "Follow me","BASIC","Great wall","FORtran","Computer design" };
	int n = 5;
	sort(name, n);
	print(name, n);
}
void sort(char* name[], int n)//排序
{
	char* temp;
	int i, j, k;
	for (i = 0; i < n - 1; i++)
	{
		k = i;
		for (j = i + 1; j < n; j++)
		
			if (strcmp(name[k], name[j])> 0)
				k = j;
			if (k != i)
			{
				temp = name[i];
				name[i] = name[k];
				name[k] = temp;
			}
	}
}
void print(char* name[], int n)//输出
{
	int i;
	for (i = 0; i < n; i++)
		printf("%s\n",name[i]);
}
 */
/*void main()//自编
{
	char *a[] = {"Dasic","Yellow","ABC","Bsc","Sidjo"};
	int n = 4;
	void print(char* name[], int n);
	void sort(char* name[], int n);
	sort(a, 4);
	print(a,4);


}
void sort(char *name[],int n)//输出
{
	int i, j;
	char* temp;
	for (i = 0; i < n-1; i++)//循环次数
	{
		for (j = i + 1; j < n; j++)//选择排序
		{
			if (strcmp(name[i], name[j]) > 0)//当第1个字符串大于第2个字符串时进行交换（实现小到大排序）
			{
				temp = name[i];
				name[i] = name[j];
				name[j] = temp;
			}
		}
	}
}
void print(char* name[], int n)//输出
{
	int i;
	for (i = 0; i < n; i++)
		printf("%s\n", name[i]);
}*/
//字符串的连接不用函数,用数组和指针
/*void main()
{
	void connect(char* a, char* b);
	char a[20] = { "ABCD" };
	char b[20] = { "EFGH" };
	connect(a, b);
	puts(a);
}
void connect(char* a, char* b)
{
	int i,j;
	for (i = 0; *(a+i) != '\0'; i++);
	for (j = 0; *(b+j) != '\0'; i++,j++)
	{
		*(a+i) = *(b+j);
	}
	a[i] = '\0';
}*/
//判断字符串是否是回文数字,用数组和指针
/*void main()
{
	void huiwen(char* a);
	char a[80] = { '\0'};
	gets(a);
	huiwen(a);
	
}
void huiwen(char *a)
{
	char * p, * q;
	p = a; q = a + strlen(a) - 1;
	//for (; p < q; p++, q--)//两种循环for和while任选一
	//{
	//		if (*p != *q)
	//		break;
	//}
	while (p < q)
	{
		if (*p != *q)
			break;
		else
		{
			p++, q--;
		}
	}
	if (*p == *q)
		printf("是回文");
	else
		printf("非回文");
}*/
//字符串逆序输出相反字符，指针实现函数功能
/*void main()
{
	void fan(char* a);
	char a[] = { "china" };
	fan(a);

}
void fan(char *a)
{
	int p = strlen(a) - 1;
	for (p; p >= 0; p--)
	{
		printf("%c",a[p]);
	}
}*/
//冒泡排序(相邻两个数排序)
/*void main()
{
	int a[6] = { 1,2,3,4,5,6 };
	int i, j,t;
	for (j = 0; j < 5; j++)
	{
		for (i = 0; i < 6-1-i; i++)
		{
			if (a[i] > a[i + 1])
			{
				t = a[i];
				a[i] = a[i + 1];
				a[i + 1] = t;
			}
		}
	}
	for (i = 0; i < 6; i++)
	{
		printf("%d",a[i]);
	}
}*/
//选择排序
/*void main()
{
	int arr[10] = { 2,4,2,1,4,5,53,5,5,39 };
	int i, j, t;
	for (i = 0; i < 9; i++)
	{
		for (j = i + 1; j < 9; j++)
		{
			if (arr[i] > arr[j])
			{
				t = arr[i];
				arr[i] = arr[j];
				arr[j] = t;
			}
		}
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d ",arr[i]);
	}
}*/
//转置
/*void main()
{
	int a[2][3] = { 1,2,3,4,5,6 };
	int b[3][2],i,j;
	for(i=0;i<2;i++)
	{
		for (j = 0; j < 3; j++)
		{
			b[j][i] = a[i][j];
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
	printf("----->\n");
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 2; j++)
		{
			printf("%d ",b[i][j]);
		}
		printf("\n");
	}
}*/
/*void main()
{
	int a[3][3] = {1,2,3,4,5,6,7,8,9};
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("% d",a[j][i]);
		}
		printf("\n");
	}
}*/
//每人的3门课程求平均成绩和各门课程的平均成绩
/*void main()
{
	int a[][3] = { {78,89,56},{69,70,89},{60,45,67} };
	int  i, j;
	float sum = 0,aver=0;
	printf("成绩为:\n");
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d ", a[i][j]);
		}
		printf("\n");
	}
	printf("------>\n");
	for (i = 0; i < 3; i++)
	{
		sum = 0; aver = 0;
		for (j = 0; j < 3; j++)
		{
			sum += a[i][j];
			aver += a[j][i];
		}
		sum = sum / 3;
		aver = aver / 3;
		printf("No.%d名平均的成绩%.2f\n",i+1, sum);
		printf("N0.%d科目的平均成绩为%.2f",i+1,aver);
		printf("\n");
	}
}*/
//杨辉三角形
/*void main()
{
	int i, j;
	int a[10][10] = { 0 };
	for (i = 0; i < 10; i++)
	{
		a[i][0] = 1;
		a[i][i] = 1;
	}
	for (i = 2; i < 10; i++)
	{
		
		for (j = 1; j < i; j++)
		{
			a[i][j] = a[i - 1][j] + a[i - 1][j - 1];
		}
	}
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j <= i; j++)
		{
			printf("%4d",a[i][j]);
		}
		printf("\n");
	}
}*/
/*void main()
{
	int i, j;
	int a[10][10];
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j <= i; j++)
		{
			if (i == j || j == 0)
				a[i][j] = 1;
			else
				a[i][j] = a[i - 1][j] + a[i - 1][j - 1];
				printf("%5d",a[i][j]);
		}
		printf("\n");
	}
}*/
//输入10个成绩，求平均成绩,输出低于平均成绩的分数
/*void main()
{
	int i; float aver = 0, score[10];
	printf("please input 10 students:\n");
	for (i = 0; i < 10; i++)
		scanf("%f",&score[i]);
	for (aver = 0, i = 0; i < 10; i++)
		aver = aver + score[i];
	aver = aver / 10;
	printf("aver=%.2f\n",aver);
	for (i = 0; i < 10; i++)
	{
		if (score[i] < aver)
			printf("%.2f",score);
	}
}*/
//输入10个数，输出其中的最大数并与之互换
/*void main()
{
	int a[10] = { 2,3,4,2,2,5,4,6,2,9 };
	int i,j=0,t,max=a[0];
	for (i = 1; i < 10; i++)
	{
		if (max < a[i])
		{
			max = a[i];
			j = i;
		}
	}
	t = a[0];
	a[0] = a[j];
	a[j] = a[0];
	printf("max:%d\n",max);
	for (i = 0; i < 10; i++)
	{
		printf("%d ",a[i]);
	}
}*/
//数组处理求斐波那契数列
/*void  main()
{
	int i; int f[20] = { 1,1 };
	for (i = 2; i < 20; i++)
	{
		f[i] = f[i - 2] + f[i - 1];//核心
	}
	for (i = 0; i < 20; i++)
		printf("%d ", f[i]);
}*/
//输入一行字符，统计其中各个大写字母或数字出现的次数
/*void main()
{
	char ch;
	int num[26] = { 0 },i;
	while ((ch = getchar()) != '\n')
		if (ch >= 'A' && ch <= 'z')
			num[ch - 'A']++;//核心
	for (i = 0; i < 26; i++)
	{
		printf("%c:%d\n",'A'+i,num[i]);
	}
}*/
/*void main()
{
	int a,i;
	int num[10] = { 0 };
	while ((a = getchar()) != '\n')
	{
		if (a >= '0'&& a <= '9')
		{
			num[a-'0']++;
		}
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d出现了%d次\n",i, num[i]);
	}
}*/
//结构体变量成员的引用,学生的学号姓名性别住址放一个结构体变量中,输出学生的信息
/*void main()
{
	struct student 
	{
		long int num;
		char name[20];
		char sex;
		char addr[20];
	}a = { 10101,"Li min",'M',"123 Beijing road" };
	printf("No.%ld\nname:%s\nsex:%c\naddress:%s\n",a.num,a.name,a.sex,a.addr);
}*/
/*void main()//自编
{
	struct student
	{
		int  num;
		char name[20];
		int score;
	}a, b;
	scanf("%d%s%d",&a.num,a.name,&a.score);
	scanf("%d%s%d", &b.num, b.name, &b.score);
	printf("num:%d,name:%s,score:%d\n",a.num,a.name,a.score);
	printf("num:%d,name:%s,score:%d\n", b.num, b.name,b.score);
}
*/
//结构体数组的定义(统计选民选3个人的票数)
/*void main()
{
	struct person//定义结构体
	{
		char name[20];
		int count;
	}leader[3] = {"Li",0,"zhang",0,"sun",0};

	int i, j;
	char leadername[20];//输入选票人
	for (i = 0; i < 3; i++)//比较次数
	{
		scanf("%s",leadername);
		for (j = 0; j < 3; j++)
		{
			if (strcmp(leadername, leader[j].name) == 0)//因为strcmp是字符串的比较
				leader[j].count++;
		}
	}
	printf("最后各自得票数:\n");
	for (i = 0; i < 3; i++)
	{
		printf("%5s:%d\n",leader[i].name,leader[i].count);
	}
}*/
//结构体数组的排序
/*struct student
	{
		int num;
		char name[20];
		float score;
	};
void main()
{
	struct student stu[5] = { {10101,"zhang",78},
		{10103,"wang",98.5},
		{10106,"Li",86},
		{10108,"Ling",73.5},
		{10110,"Fun",100} };
	struct student temp;//交换时temp的类型
	const int n = 5; int i, j, k;
	for (i = 0; i < n-1; i++)//选择排序
	{
		for (j = i + 1; j < n; j++)
		{
			if (stu[i].score > stu[j].score)
			{
				temp = stu[i];
				stu[i] = stu[j];
				stu[j] = temp;

			}
		}
	}
	for (i = 0; i < 5; i++)
	{
		printf("%6d %8s %6.2f\n",stu[i].num,stu[i].name,stu[i].score);
	}
}*/
//结构体指针变量输出结构体输出成员信息
/*void main()
{
	struct student
	{
		long num;
		char name[20];
		char sex;
		float score;
	};
	struct student stu;
	struct student* p;
	p = &stu;
	stu.num = 10101;
	strcpy(stu.name, "Li Lin");
	stu.sex = 'M';
	stu.score = 89.5;
	printf("N0.%ld\nname:%s\nsex:%c\nscore:%5.1f\n",stu.num,stu.name,stu.sex,stu.score);
}*/
//字符串的最大值
/*void main()
{
	char a[10], b[10], c[10], max[10];
	gets(a); gets(b); gets(c);
	strcpy(max, a);
	if (strcmp(max, b) < 0) strcpy(max, b);
	if (strcmp(max, c) < 0) strcpy(max, c);
	printf("%s\n",max);
}*/
/*void main()
{
	char str[3][10], max[10];
	int i;
	for (i = 0; i < 3; i++)
		gets(str[i]);
	strcpy(max, str[0]);
	for (i = 0; i < 3; i++)
		if (strcmp(max, str[i]) < 0)//关键
			strcpy(max, str[i]);
	printf("\nthe largest:\n%s\n", max);
}*/
//输入a,n分别为2，6计算2+22+222+2222+22222+222222
/*void main()
{
	int a, n;
	int i, sum = 0;
	printf("输入个体元素和最高位数:\n");
	scanf("%d%d",&a,&n);
	int t=a;//初始化变量
	for (i = 0; i < n; i++)
	{
		sum = sum + t;//分别累加计算
		a = a * 10;//取最高位
		t = t + a;//累加求t
		
	}
	printf("sum:%d",sum);
}*/
/*
void main()
{
	int fun(int x, int n);
	int i, n, num, sum = 0;
	printf("请输入元素和数字常数\n");
	scanf("%d%d", &num, &n);
	for (i = 1; i <= n; i++)
		sum += fun(num, i);
	printf("%d", sum);
}
int fun(int x, int n)
{
	int i, count = 0;
	for (i = 0; i < n; i++)
	{
		count = count * 10 + x;
	}
	// printf("%d", count);
	return count;
}*/

//矩阵a(3x3)的主对角线之和
/*void main()
{
	int a[3][3] = { 1,2,3,4,5,6,7,8,9 };
	int i, j;
	int sum = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d ",a[i][j]);
			if (i == j)
			{
				sum += a[i][j];
			}
		}
		printf("\n");
	}
	printf("--------------->\n");
	printf("主对角线的和：%d",sum);
}*/
//输入一个字符串按反序排放，主函数输入输出字符串
/*void main()
{
	char ch[80] = {'\0'};
	char pai(int ch[]);
	gets(ch);
	pai(ch);
	puts(ch);
}
char pai(char ch[])
{
	int end, start;
	char temp;
	end = strlen(ch) - 1;
	start = 0;
	for (; start < end; end--, start++)
	{
		temp = ch[start];
		ch[start] = ch[end];
		ch[end] = temp;
	}
}*/
//函数调用字符串连接
/*void main()
{
	char jie(char ch[], char sd[]);
	char ch[80] = {'\0'};
	char sd[40] = {'\0'};
	gets(ch);
	gets(sd);
	jie(ch, sd);
	puts(ch);

}
char jie(char ch[],char sd[])
{
	int i;
	int m;
	for (i = 0;ch[i]!='\0'; i++);
	for (m = 0; ch[m]!='\0'; m++, i++)
	{
		ch[i] = sd[m];
	}
	ch[i] = '\0';
}*/
//函数调用实现将元音字母复制到另一字符串; aoeiou
/*void main()
{
	void copy(char sd[], char ch[]);
	char ch[256] = { '\0'};
	gets(ch);
	char sd[256] = { '\0'};
	copy(sd,ch);
	puts(sd);

}
void copy(char sd[], char ch[])
{
	int i=0,j=0;
	while (ch[i] != '\0')
	{
		if (ch[i] == 'a' || ch[i] == 'A' || ch[i] == 'o' || ch[i] == 'O' || ch[i] == 'e' || ch[i] == 'E' || ch[i] == 'u' || ch[i] == 'U' || ch[i] == 'v' || ch[i] == 'V'|| ch[i] == 'i' || ch[i] == 'I')
		{
			sd[j] = ch[i];
			j++;
		}
		i++;
	}
}*/
//函数调用输入4位数字，每两个数字键有一个空格
/*void main()
{ 
	void fenjie(int a);
	int a;
	scanf("%d", &a);
	fenjie(a);
}
void fenjie(int a)
{
	int  b, c, d,e;
	b = a / 1000;
	c = a / 100 % 10;
	d = a / 10 % 10;
	e = a % 10;
	printf("%d %d %d %d",b,c,d,e);
}*/
//函数调用统计此字符串的字母数字空格和其他字符的个数主函数输入字符串以及输出上述的结果
/*int zimu = 0, shuzi = 0, kongge = 0, qita = 0, i;
void main()
{
	int count(char ch[]);
	char ch[36] = {'\0'};
	gets(ch);//scanf以空格为终止
	count(ch);
	printf("字母:%d 数字:%d 空格:%d 其他:%d ",zimu,shuzi,kongge,qita);
}
int count(char ch[])
{
	for (i = 0; ch[i] != '\0'; i++)
	{
		if ((ch[i] >= 'A' && ch[i] <= 'Z') || (ch[i] >= 'a' && ch[i] <= 'z'))
			zimu++;
		else if (ch[i] >= '0' && ch[i] <= '9')
			shuzi++;
		else if (ch[i] ==' ')
			kongge++;
		else qita++;
	}
}*/
//函数调用输出中最长的单词
/*void main()
{
	void count(char str[], char word[]);
	char line[256] = "please input the text contejsodija[nt or web address to be translated";
	char word[256] = { 0};
	count(line, word);
	printf("%s",word);
}
void count(char str[], char word[])
{
	int i, j;
	i = 0,j = 0;
	int len = 0;
	while (str[i] != '\0')
	{
		j = i;                                                                             
		while (str[j] != '\0'&&str[j]!=' ')
			j++;
		len = j - i;
		if (len > strlen(word))
		{
			strncpy(word, str + i, len);
		}
		j++;
		i++;
	}
}*/
//函数调用实现10个数字小到大排序(冒泡)
/*void main()
{
	char a[] = {"bacdhskehgy"}; int i, j;int z;
	z = strlen(a);
	for (i = 0; i < z-1; i++)
	{
		for (j = 0; j < z-1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				int t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	for (i = 0; i < z; i++)
	{
		printf("%c ",a[i]);
	}
	printf("\n");
	printf("%d",z);
}*/
/*void main()
{
	char a[] = { "bacdhskehgy" }; 
	void port(char a[]);
	port(a);
	
}
void port(char a[])
{
	int i, j; int z;
	z = strlen(a);
	for (i = 0; i < z - 1; i++)
	{
		for (j = 0; j < z - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				int t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	for (i = 0; i < z; i++)
	{
		printf("%c ", a[i]);
	}
	printf("\n");
	printf("数组个数:%d", z);
}*/
//递归求勒让德多项式的值
/* void main()
{
	float poly(int n,int x);
	int n,x;
	scanf("%d%d",&n,&x);
	float z;
	z=poly(n,x);
	printf("%.2f ",poly(n,x));
}
float poly(int n,int x)
{
	if (n == 0)
		return 1;
	else if (n == 1)
		return x;
	return ((2 * n - 1) * x - poly(n - 1, x) - (n - 1) * poly(n - 2, x)) / n;
}*/
//进制转换✳
/*void main()
{
	int trans(char a[]);
	char a[] = {'\0'};
	scanf("%c",&a);
	trans(a);
	printf("%d",trans(a));
}
int trans(char a[])
{
	int result = 0,i=0;
	while (a[i] != '\0')
	{
		if (a[i] >= 'a' && a[i] <= 'z')
			result = result * 16 + a[i] - 'a' + 10;
		else if (a[i] >= 'A' && a[i] <= 'Z')
			result = result * 16 + a[i] - 'A' + 10;
		else
			result = result + a[i];
		return result;
	}
}*/
//关于指针的测试指针交换不影响原ab的值
/*void main()
{
	int a = 10, b = 100;
	int* a1, * b1;
	a1 = &a, b1 = &b;
	int* t;
	t=a1;
	a1 = b1;
	b1 = t;
	printf("%d,%d\n",*a1,*b1);//100,10
	printf("%d,%d", a, b);//10,100
}*/
//用指针实现比大小
/*void main()
{
	int a, b, *t;
	int* a1, * a2;
	scanf("%d%d",&a,&b);
	a1 = &a, a2 = &b;
	if (a>b)
	{
		t = a1;
		a1 = a2;
		a2 = t;
	}
	printf("%d,%d\n",a,b);
	printf("%d,%d",*a1,*a2);
}*/
//指针函数调用比大小
/*void main()
{
	void swap(int* p1,int *p2);
	int a, b;
	int* pt1, * pt2;
	scanf("%d%d",&a,&b);
	pt1 = &a;
	pt2 = &b;
	if (a < b)
		swap(pt1, pt2);
	printf("max:%d,min:%d\n",a,b);
}
void swap(int* p1, int* p2)
{
	int temp;
	temp = *p1;
	*p1 = *p2;
	*p2 = temp;
}
*/
//关于指针传递的错误示范
/*void main()
{
	void swap(int* p1,int *p2);
	int a, b;
	int* pt1, * pt2;
	scanf("%d%d",&a,&b);
	pt1 = &a;
	pt2 = &b;
	if (a < b)
		swap(pt1, pt2);
	printf("max:%d,min:%d\n",*pt1,*pt2);
}
void swap(int* p1, int* p2)
{
	int *temp;//函数调用传递需要使用值传递，而不是地址传递
	temp = p1;
	p1 = p2;
	p2 = temp;
}*/
//讨论指针*p++
/*void main()
{
	int a[10] = { 1,2,3,4,5 };
	int i;
	int* q;
	q = a;
	//q++;
	//printf("%d, ", *q);//2
	printf("%d",*q++);//1先算q++
}*/
//指针实现函数调用将数组的n个整数按相反顺序存放
/*void main()
{
	void inv(int x[], int n);
	int i, a[10] = { 3,7,9,11,0,6,7,5,4,2 };
	printf("The original array:\n");
	for (i = 0; i < 10; i++)
	{
		printf("%d ",a[i]);
	}
	printf("\n");
	inv(a, 10);
	printf("The array has been inverted :\n");
	for (i = 0; i < 10; i++)
	{
		printf("%d ", a[i]);
	}
}
void inv(int *x, int n)//第一位和最后一位进行交换,或者写void inv (int x[],int n))
{
	int temp, i, j, m = (n - 1) / 2;
	for (i = 0; i <= m; i++)//交换次数
	{
		j = n - 1 - i;//最后元素
		temp = x[i];
		x[i] = x[j];
		x[j] = temp;
	}
}*/
//用指针方法对10个整数进行大到小排序
/*void main()
{
	void sort(int x[], int n);
	int a[10] = { 1,10,3,8,5,6,7,4,9,2 };
	int* p,i;
	p = a;
	printf("The orginal array:\n");
	for (i = 0; i < 10; i++)
	{
		printf("%d ",*p);
		p++;
	}
	printf("\n");
	sort(a, 10);
	for (p=a,i = 0; i < 10; i++)
	{
		printf("%d ", *p);
		p++;
	}
}
void sort(int x[],int n)//输入数组和元素个数(本题使用选择排序)
{
	int i, j,t;
	for (i = 0; i < n - 1; i++)
	{
		for (j = i + 1; j < n; j++)
		{
			if (x[j] > x[i])
			{
				t = x[j];
				x[j] = x[i];
				x[i] = t;
			}
		}

	}
}*/
//输入2个整数让用户选择1或2,1,max；2,min
/*int smax(int x, int y)
{
	int z;
	if (x > y)
		z = x;
	else z = y;
	return z;
}
int smin(int x, int y)
{
	int z;
	if (x < y)
		z = x;
	else z = y;
	return z;
}
void main()
{
	int a, b, c, n;
	int (*p)(int x, int y);
	printf("please input a and b:\n");
	scanf("%d%d", &a, &b);
	printf("choose 1 or 2:\n");
	scanf("%d", &n);
	if (n == 1)
		p = smax;
	else if (n == 2)
		p =smin;
	c = (*p)(a, b);
	printf("a=%d,b=%d\n",a,b);
	if (n == 1) 
		printf("max:%d\n", c);
	else printf("min:%d\n",c);
}*/
//找出不及格的课程的学生及学生号
/*int main()
{
	float score[][4] = { { 60,70,80,90 } ,{56,89,67,88},{34,78,90,66} };
	float* search(float pointer[][4]);
	float* p;
	int i, j;
	for (i = 0; i < 3; i++)
	{
		p = search(score + i);
		if (p == *(score + i))
		{
			printf("No.%d score：",i);
			for (j = 0; j < 4; j++)
				printf("%5.2f ",p[j]);
			printf("\n");
		}

	}
}
float* search(float pointer[][4])
{
	int i = 0;
	float* pt;
	pt = NULL;
	for (; i < 4; i++)
		if (pointer[0][i] < 60)
			pt = *pointer;
	return pt;
}*/
/*int main()
{
	float score[][4] = { { 60,70,80,90 } ,{56,89,67,88},{34,78,90,66} };
	float* search(float pointer[][4]);
	float* p;
	int i, j;
	for (i = 0; i < 3; i++)
	{
		p = search(score + i);
		if (p == score[i])
		{
			printf("No.%d score：",i);
			for (j = 0; j < 4; j++)
				printf("%5.2f ",p[j]);
			printf("\n");
		}
	}
}
float* search(float pointer[][4])
{
	int i = 0;
	float* pt;
	pt = NULL;
	for (; i < 4; i++)
		if (pointer[0][i] < 60)
			pt = *pointer;
	return pt;//有不及格pt为首地址的内容,都及格为空
}*/
//基础结构体变量存放学生信息
/*void main()
{
	struct student
	{
		long int num;
		char name[20];
		char sex;
		char addr[20];
	}a = { 10010,"Li Lin",'M',"123 Beijin" }, b;
	b = a;
	printf("No.%ld\nname:%s\nsex:%c\naddress:%s\n",a.num,a.name,a.sex,a.addr);
	printf("No.%ld\nname:%s\nsex:%c\naddress:%s\n", b.num, b.name, b.sex, b.addr);
}*/
//结构体变量输入两个学生的学号姓名和成绩输出成绩较高的学生的学号姓名和成绩
/*void main()
{
	struct student
	{
		int num;//数字结构体变量输入时应该加&符
		char name[20];//字符结构体变量输入不加&符
		float score;
	}a,b;
	printf("Please input a score:\n");
	scanf("%d%s%f",&a.num,a.name,&a.score);
	printf("please input b score:\n");
	scanf("%d%s%f", &b.num, b.name, &b.score);
	printf("分数较高的同学信息:\n");
	if (a.score > b.score)
		printf("num:%d\nname:%s\nscore:%f\n", a.num, a.name, a.score);
	else if (a.score < b.score)
		printf("num:%d\nname:%s\nscore:%f\n", b.num, b.name, b.score);
	else
		printf("两者一样高\n");
}*/
//结构体数组候选人选票
/*void main()
{
	struct vote
	{
		char name[20];
		int count;
	}leader[3] = {"li",0,"zhang",0,"wang",0};
	char leadername[20];
	int i;
	for (i = 0; i < 5; i++)
	{
		scanf("%s", leadername);
		for (int j = 0; j < 3; j++)
			if (strcmp(leadername, leader[j].name) == 0)//判断标准相等计数
				leader[j].count++;
	}
	printf("\nresult:\n");
	for (i = 0; i < 3; i++)
	{
		printf("%5s:%d\n",leader[i].name,leader[i].count);
	}
}*/
//n个学生的信息(包括学号,姓名,成绩)按照成绩的高低顺序输出学生信息
/*struct student
{
	int num;
	char name[20];
	float score;
};
void main()
{
	struct student stu[5] = { {100,"Li",98},{101,"zhang",99},{102,"wang",96},{103,"zhao",90},{104,"yuan",99} };
	struct student temp;
	const int n = 5;//类似define
	int i, j, k;
	printf("order is：\n");
	for (i = 0; i < 4; i++)
	{
		for (j = i + 1; j < 5; j++)
		{
			if (stu[j].score > stu[i].score)
			{
				temp = stu[j];
				stu[j] = stu[i];
				stu[i] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
	{
		printf("%6d %8s %6.2f\n",stu[i].num,stu[i].name,stu[i].score);
		printf("\n");
	}
}*/
//结构体数组的指针输出全部学生的信息
/*struct student
{
	int num;
	char name[20];
	char sex;
	int age;
};
void main()
{
	struct student stu[3] = { {100,"Li",'M',18},{101,"yuan",'M',19},{103,"guo",'M',45} };
	struct student* p;
	printf("  N0. name                  sex age\n");
	for (p = stu; p < stu + 3; p++)
		printf("%5d %-20s %2c %4d\n",p->num,p->name,p->sex,p->age);
	return 0;
}*/
//输入ABCD返回ABCDDCBA;
/*void main()
{
	char s[81], * p, * q;
	int i=0;
	gets(s);
	p = s; q = s;
	//遍历字符串到'\0';
	for (i = 0; *(p + i) != '\0'; i++)
		printf("%c",*(p+i));
	for (i = 0; *(q+i) != '\0'; i++);
	for (; i >= 0; i--)
		printf("%c",*(q+i));
}*/
/*void main()
{
	char s[81], * p, * q;
	gets(s);
	//遍历数组到最后
	for (q = s; *q != '\0'; q++);
	//去除掉空格
	p = q - 1;
	//把要复制的给前一个遍历到最后的地址
	while (p >= s)
		*q++ = *p--;
	//结尾加'\0'
	*q = '\0';
	puts(s);
}*/
#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<time.h>
#include<string.h>
//输出左平行四边形
/*void main()
{
	int i,j;
	for(int i=1;i<=4;i++)//行
	{
		for(int k=1;k<=2*i-2;k++)//空
		{
			printf(" ");
		}
		for(int j=1;j<=5;j++)//列
		{
			printf("*");
		}
		printf("\n");
	}

}*/
//输出1900-2000的瑞年
/*void main()
{
	int year;
	for(int year=1900;year<=2000;year++)
	{
	if(year%4==0&&year%100!=0||year%400==0)
	printf("%d年份为瑞年\n",year);
	}
}*/
//一维数组求10以内的最大值
/*void main()
{
	int i,max,a[10];
	for(int i=0;i<10;i++)
	{
		scanf("%d",&a[i]);
		max=a[0];
	}
	for(int i=0;i<10;i++)
	{
		if(max<a[i])
			max=a[i];

	}
	printf("最大值是max:%d",max);
}*/
//数字逆序输出
/*void hello(int n)
{
	char ch;
	if(n<=1)
	{
		ch =getchar();
		printf("相反顺序出结果\n");
		putchar(ch);
	}
	else
	{
		ch = getchar();
		hello(n-1);//?
		putchar(ch);
	}

}
int main()
{
	int n =0;
	int i=5;
	printf("输入5个字符\n");
	hello(i);
	printf("\n");
	return 0;

}*/
//求最大值
/*void main()
{
	int a,b,c,max;
	printf("输入a的值\n");
	scanf("%d",&a);
	printf("输入b的值\n");
	scanf("%d",&b);
	printf("输入c的值\n");
	scanf("%d",&c);
	max=(a>b?(a>c?a:c):(b>c?b:c));
	printf("max:%d",max);
}*/
//输出最大值
/*void main()
{
	int a,b,c;
	printf("输入a的值\n");
	scanf("%d",&a);
	printf("输入b的值\n");
	scanf("%d",&b);
	printf("输入c的值\n");
	scanf("%d",&c);
	int t;
	if(b>a)
	{
		t=b;
		b=a;
		a=t;

	}
	if(c>a)
	{
		t=c;
		c=a;
		a=t;
	}
	if(c>b)
	{
		t=c;
		c=b;
		b=t;
	}
	printf("%d,%d,%d\n",a,b,c);
}*/
//输入摄氏温度，化为华氏温度f=(9/5)*c+32
/*void main()
{
	double c;
	double f;
	scanf("%lf",&c);
	f=(9.0/5)*c+32;
	printf("%.2lf摄氏度对应的华氏温度是%.2lf\n",c,f);
}*/
//编程序，输入三个数，输出其中最小值
/*void main()
{
	int a,b,c;
	scanf("%d%d%d",&a,&b,&c);
	int max;
	max=(a>b?(a>c?a:b):(b>c?b:c));
	printf("%d",max);
}*/
//编程序，输入三个数，从小到大排序。
/*void main()
{
	int a,b,c;
	scanf("%d%d%d",&a,&b,&c);
	int t;
	if(a>b)
	{
		t=a;
		a=b;
		b=t;
	}
	if(a>c)
	{
		t=a;
		a=c;
		c=t;
	}
	if(b>c)
	{
		t=b;
		b=c;
		c=t;
	}
	printf("%d,%d,%d",a,b,c);
}*/
//编写程序，要求输入x的值后，输出y的值-5<x<0 x-1;x=0 x;0<x<10 x+1
/*void main()
{
	int x;
	scanf("%d",&x);
	int t;
	t=0;
	if((x>-5)&&(x<10))
	{
	if((x>-5)&&(x<0))
	{
		t=x-1;
	}
	else if(x==0)
	{
		t=x;
	}
	else if((x>0)&&(x<10))
	{
		t=x+1;
	}
	printf("%d",t);
	}
	else
	{
		printf("条件有误");
	}
}*/
//分段函数 x<1 x;1<=x<10 2x-1;x>=10 3x-11
/*void main()
{
	int x,y=0;
	scanf("%d",&x);
	if(x<1)
	{
		y=x;
	}else if(x>=1&&x<10)
	{
		y=2*x-1;
	}else if(x>=10)
	{
		y=3*x-11;
	}
	printf("%d",y);

}*/
//switch分段90-100 优秀 80-89:良好 70-79:中等 60-69:及格 x<60不及格
/*void main()
{
	int x;
	printf("输入成绩:");
	scanf("%d",&x);
	switch(x/10)
	{
	case 10:
	case 9:printf("优秀\n");break;
	case 8:printf("良好\n");break;
	case 7:printf("中等\n");break;
	case 6:printf("及格\n");break;
	case 5:
	case 4:
	case 3:
	case 2:
	case 1:printf("不及格\n");break;
	default:printf("输入有误\n");break;
	}
}*/
//switch分段0-9:A 10-19:B;20-29:C;30-49:D 50以上:E
/*void main()
{
	int age;
	scanf("%d",&age);
	switch(age/10)
	{
	case 0:printf("A");break;
	case 1:printf("B");break;
	case 2:printf("C");break;
	case 3:
	case 4:printf("D");break;
	default:printf("E");break;
	}
}*/
//三角形成立条件 若成立求三角形面积
/*void main()
{
	float a,b,c,q;
	double area;
	scanf("%f%f%f",&a,&b,&c);
	if(a+b>c&&a+c>b&&b+c>a)
	{
		q=(a+b+c)/2;
		area=sqrt(q*(q-a)*(q-b)*(q-c));
		printf("三角形的面积是%7.2lf",area);
	}else
	{
		printf("不构成三角形的条件\n");
	}
}*/
//实现简单计算器,switch;
/*void main()
{
	double a,b;
	char c;
	scanf("%lf",&a);
	scanf("%c",&c);
	scanf("%lf",&b);

	switch(c)
	{
	case '+' :{printf("%.2lf+%.2lf=%.2lf",a,b,a+b);}break;
	case '-' :{printf("%.2lf-%.2lf=%.2lf",a,b,a-b);}break;
	case '*' :{printf("%.2lf*%.2lf=%.2lf",a,b,a*b);}break;
	case '/' :{
				if(b==0)
				{
					printf("除数不能为零\n");
				}else
				{
					printf("%.2lf/%.2lf=%.2lf",a,b,a/b);
				 }
			  }
	}

}*/
//年增长率为7%，10年后与现在相比,增添多少百分比p=(1+r)^n
/*void main()
{
	float p,r;
	int n;
	r=0.07;
	n=10;
	p=pow(1+r,n);
	printf("%f",p);
}*/
//存款利率
/*void main()
{
	int p=1000;
	int n=5;
	float r1=0.015,r2=0.021,r3=0.0275,r5=0.03,r0=0.0035;
	float p1=p*(1+n*r5);
	float p2=p*(1+2*r2)*(1+3*r3);
	float p3=p*(1+3*r3)*(1+2*r2);
	float p4=p*pow(1+r1,n);
	float p5=p*pow(1+r0/4,4*n);
	printf("%0.2f\n",p1);
	printf("%.2f\n",p2);
	printf("%.2f\n",p3);
	printf("%.2f\n",p4);
	printf("%.2f\n",p5);
}*/
//china密码
/*void main()
{
	char a,b,c,d,e;
	a=getchar()+4;
	b=getchar()+4;
	c=getchar()+4;
	d=getchar()+4;
	e=getchar()+4;
	putchar(a);
	putchar(b);
	putchar(c);
	putchar(d);
	putchar(e);
	char a,b,c,d,e;
	scanf("%c%c%c%c%c",&a,&b,&c,&d,&e);
	a=a+4;
	b=b+4;
	c=c+4;
	d=d+4;
	e=e+4;
	printf("%c%c%c%c%c",a,b,c,d,e);
}*/
//圆半径求周长,圆面积,圆球表面积,圆球体积,圆柱体积
/*void main()
{
	double r=1.5;
	double h=3;
	double p=3.14;
	//圆周长
	double s;
	s=2*p*r;
	printf("圆周长:%.2lf\n",s);
	//圆面积
	double S;
	S=p*r*r;
	printf("圆面积:%.2lf\n",S);
	//圆球表面积
	double s1;
	s1=4*p*r*r;
	printf("圆球表面积:%.2lf\n",s1);
	//圆球体积
	double s2;
	s2=(4/3)*p*r*r*r;
	printf("圆球体积:%.2lf\n",s2);
	//圆柱体体积
	double s3;
	s3=p*r*r*h;
	printf("圆柱体体积:%.2lf\n",s3);
}*/
//键盘输入小于1000的数，求整数平方根
/*void main()
{
	double a;
	int c;
	scanf("%lf",&a);
	if(a>=1000)
	{
		printf("重新输入");
	}
	else
	{
		c=sqrt(a);
		printf("%d",c);
	}
}*/
//分段函数
/*void main()
{
	int x,y;
	printf("x=");
	scanf("%d",&x);
	if(x<1)
	{
		y=x;
		printf("y=%d",y);
	}else if(x>=1&&x<10)
	{
		y=2*x-1;
		printf("y=%d",y);
	}else if(x>=10)
	{
		y=3*x-11;
		printf("y=%d",y);
	}
}*/
//给一个不多于5位的正整数①求几位数②分别输出每一位数字③逆序输出
/*void main()
{
	int a;
	scanf("%d",&a);
	if(a>=0&&a<=99999)
	{
		if(a>10000)
		{
			printf("5位数");
		}else if(a>1000&&a<10000)
		{
			printf("4位数");
		}else if(a>100&&a<1000)
		{
			printf("3位数");
		}else if(a>10&&a<100)
		{
			printf("2位数");
		}else if(a>=0&&a<10)
			printf("1位数");

	}else
	{
		printf("输入数字应该为正整数");
	}
}*/
/*void main()
{
	int a;
	scanf("%d",&a);
	int a1,a2,a3,a4,a5;
	if(a>10000)
	{
		a1=a/10000;
		a2=(a%10000)/1000;
		a3=(a%1000)/100;
		a4=(a%100)/10;
		a5=a%10;
		printf("%d,%d,%d,%d,%d\n",a1,a2,a3,a4,a5);
	}
	else if(a>1000)
	{
		a2=(a%10000)/1000;
		a3=(a%1000)/100;
		a4=(a%100)/10;
		a5=a%10;
		printf("%d,%d,%d,%d",a2,a3,a4,a5);
	}
	else if(a>100)
	{
		a3=(a%1000)/100;
		a4=(a%100)/10;
		a5=a%10;
		printf("%d,%d,%d\n",a3,a4,a5);
	}
	else if(a>10)
	{
		a4=(a%100)/10;
		a5=a%10;
		printf("%d,%d\n",a4,a5);}
	else if(a>0)
	{
		a5=a%10;
		printf("%d\n",a5);}
}*/
/*void main()
{
	//a1输出个位数a%10;
	//a2输出十位数(a/10)%10;
	//a3输出百位数(a/100)%10;
	//a4输出千位数(a/1000)%10;
	//a5输出万位数(a/10000)%10;
	int a;
	scanf("%d",&a);
	int a1,a2,a3,a4,a5;
	if(a>=0){a1=a%10;printf("%d,",a1);}
	if(a>=10){a2=(a/10)%10;printf("%d,",a2);}
	if(a>=100){a3=(a/100)%10;printf("%d,",a3);}
	if(a>=1000){a4=(a/1000)%10;printf("%d,",a4);}
	if(a>=10000){a5=(a/10000)%10;printf("%d\n",a5);}
}*/
//输出200以内既能被3整除又能被7整数的数并统计个数。
/*void main()
{
	for(int i=1;i<=200;i++)
	{
		if(i%3==0&&i%7==0)
		{
			printf("%d\n",i);
		}
	}
}*/
//编程序，输入10个整数，统计并输出其中正数、负数和零的个数
/*void main()
{
	int a;
	int z=0,f=0,zero=0;
	for(int i=1;i<=10;i++)
	{scanf("%d",&a);
	if(a>0)
	{z++;}
	if(a==0)
	{zero++;}
	if(a<0)
	{f++;}}
	printf("正数%d,零%d,负数%d",z,zero,f);
}*/
//折叠n次到8848m
/*void main()
{
	int h=0;
	float n=1;
	while(h<=8848000)
	{
		n++;
		h=pow(2,n);//2的n次方
	}
	printf("折叠%.2f次",n);
}*/
//菱形
/*void main()
{
	for(int i=1;i<=5;i++)//控制行
	{
		for(int j=1;j<=5-i;j++)
		{
			printf(" ");
		}
		for(int k=1;k<=2*i-1;k++)
		{
			printf("*");
		}
		printf("\n");
	}
	for(int a=5;a>=1;a--)//控制行
	{
		for(int b=1;b<=5-a;b++)
		{
			printf(" ");
		}
		for(int c=1;c<=2*a-1;c++)
		{
			printf("*");
		}
		printf("\n");
	}
}*/
/*void main()
{
	for(int i=1;i<=3;i++)
	{
		for(int j=1;j<=3-i;j++)
			printf(" ");
		for(int j=1;j<=2*i-1;j++)
			printf("*");
		printf("\n");
	}
	for(int i=2;i>=1;i--)
	{
		for(int j=1;j<=3-i;j++)
			printf(" ");
		for(int j=1;j<=2*i-1;j++)
			printf("*");
		printf("\n");
	}
}*/
/*void main()
{
	printf("输入上三角数:");
	int a;
	scanf("%d",&a);
	for(int i=1;i<=a;i++)
	{
		for(int j=1;j<=a-i;j++)
			printf(" ");
		for(int j=1;j<=2*i-1;j++)
			printf("*");
		printf("\n");
	}
	for(int i=a-1;i>=1;i--)
	{
		for(int j=1;j<=a-i;j++)
			printf(" ");
		for(int j=1;j<=2*i-1;j++)
			printf("*");
		printf("\n");
	}
}*/
//判断是否为素数
/*void main()
{
	int a,i;
	scanf("%d",&a);
	for ( i = 2; i < a; i++)
	{
		if (a % i == 0)
			break;	
	}
	//if (i < a) printf("%d不是素数", a);
	//else printf("%d是素数", a);
	if (i == a)
		printf("%d是素数", a);
	else printf("不是素数");
}*/
//分子2，分母1，分子3，分母2，循环20次求和
/*void main()//交换必须使用中间变量
{
	double sum = 0, f1 = 1, f2 = 2, fenzi,t;

	for (int i = 1; i <=20; i++)
	{
		
		fenzi = f2 / f1;
		sum += fenzi;
		t = f2;
		f2 = f1 + f2;
		f1 = t;
	}
	printf("%lf",sum);
}*/
//逆序输出1234;
/*void main()
{
	int a;
	int t;
	scanf("%d", &a);
	do
	{
		t=a % 10;
		printf("%d",t);
		a=a / 10;
	} while (a > 0);
}*/
//数字金字塔 右部分用ascll表
/*void main()
{
	int i, j, k;
	for (i = 1; i <= 9; i++)
	{
		for (j = 9; j > i; j--)
			printf(" ");
		for (k = 1; k <= i; k++)
			printf("%c",48+k);
		for (k = i; k > 1; k--)
			printf("%c",48+k-1);
		printf("\n");
	}
}*/
/*void main()
{
	for (int i = 1; i <= 9; i++)
	{
		for (int j = 1; j <= 9 - i; j++)
			printf(" ");
		for (int k = 1; k <= i; k++)
			printf("%d",k);
		for (int k = i; k > 1; k--)
			printf("%d",k-1);
		printf("\n");
	}
}*/
//求最大公因数和最小公倍数除数和余数作除法，当余数为0 取除数为最大公因数 两个自然数的乘积=最大公倍数*最小公倍数
/*void main()
{
	int a, b,t;
	printf("输入2个数:\n");
	scanf("%d",&a);
	scanf("%d",&b);
	if (b > a)//选最大值
	{
		t = a;
		a = b;
		b = t;
	}
	int total;//定乘积
	total = a*b;
	int r;
	while (b != 0)//反复除
	{
		r = a % b;
		a = b;
		b = r;
	}
	printf("%d为最大公约数\n",a);
	printf("%d为最小公倍数\n",total/a);
}*/
//一行字符统计英文字母，空格，数字，其他字符的个数(若getchar没在循环体里会吞字)
/*void main()
{
	char c;
	int e = 0, k = 0, s = 0, o = 0;
	while ((c=getchar()) != '\n')
	{
		if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
			e++;
		else if (c == ' ')
			k++;
		else if (c >= '0' && c <= '9')
			s++;
		else o++;
	}
	printf("英文字母:%d,空格:%d,数字:%d,其他:%d",e,k,s,o);
}*/
//键盘输入n个位a;计算结果
//解析:确定n项，个数为a;sum=a*10^(0,1,2)+前一项数字
/*void main()
{
	int n;
	double  a, singlenum = 0, totalnum = 0;
	scanf("%d %lf",&n,&a);
	for (int i = 0; i < n; i++)
	{
		singlenum = a * pow(10, i) + singlenum;
		totalnum += singlenum;
	}
	printf("%lf\n",totalnum);
}*/
//求各个阶乘的和1!+...20！的和
/*void main()
{
	double sum=0;
	for (int a = 1; a <= 20; a++)
	{
		//求阶乘
		double num = 1;
		for (int i = a; i >0; i--)
		{
			num *= i;
		}
		sum += num;
	}
	printf("%lf",sum);	
}*/
//3个求和 和1求k1-100的和,和2求1-50k方的和,和3求分母1-10,分子为1的和
/*void main()
{
	double sum1 = 0;
	for (int i = 1; i <= 100; i++)
		sum1 += i;
	printf("表达式1为%lf\n",sum1);
	double sum2=0;
	for (int a = 1; a <= 50; a++)
	{
		sum2 += pow(a, 2);
	}
	printf("表达式2为%lf\n",sum2);
	double tern=0, sum3=0;
	for (int x = 1; x <= 10; x++)
	{
		tern = 1.0 / x;
		sum3 += tern;
	}
	printf("表达式3为%lf\n",sum3);
	printf("中和为%lf",sum1+sum2+sum3);
}*/
//水仙花
/*void main()
{
	int ge, shi, bai;
	int i;
	for (i = 100; i <= 999; i++)
	{
		ge = i % 10;
		bai =i / 100;
		shi = i / 10 % 10;
		if (ge * ge * ge + shi * shi * shi + bai * bai * bai == i)
		{
			printf("%d\n", i);
		}
	}
}*/
//求完数
/*void main()
{
	for (int data = 2; data <= 1000; data++)
	{
		int sum = 0;
		for (int factor = 1; factor <= data /2; factor++)
		{
			if (data % factor == 0)
			{
				sum += factor;  
			}
		}
		if (sum == data)
		{
			printf("%d its facators are ", data);
			for (int factor = 1; factor <= data/2 ; factor++)
			{
				if (data % factor == 0)
				{
					printf("%d,", factor);
				}

			}
			printf("\n");
		}
		
	}
}*/
//求分数的前20项和
/*void main()
{
	double fenzi = 2;
	double fenmu = 1;
	double tern,sum=0;
	for (int i = 1; i <= 20; i++)
	{
		tern = fenzi / fenmu;
		sum += tern;
		//double temp = fenzi;
		fenzi = fenmu+fenzi;
		fenmu = fenzi - fenmu;//分子已经改变了初值 fenmu=temp;
	}
	printf("%lf", sum);
}*/
//小球落体运动100米高
/*void main()
{
	double h = 100, sum=0;
	for (int i = 1; i <= 10; i++)
	{
		sum = sum + h;
		h = h / 2;
		sum += h;
	}
	sum = sum - h;
	printf("总共%lf米,第10次弹跳高度为%lf米",sum,h);
}*/
//猴子吃桃
/*void main()
{
	int day = 9;
	int dayhou = 1;
	int dayqian;
	while (day > 0)
	{
		dayqian = (dayhou + 1) * 2;
		dayhou = dayqian;
		day--;
	}
	printf("%d",dayqian);
}*/
//迭代法求根号a 
/*void main()
{
	float a, x0, x1;
	printf("输入要开根号的数:\n");
	scanf("%f",&a);
	
	x0 = a / 2;
	x1 = (x0 / +a / x0) / 2;
	while (fabs(x0 - x1) >= 1e-5)
	{
		x0 = x1;
		x1 = (x0 + a / x0) / 2;
	}
	printf("%f的平方根为%f\n",a,x1);
}*/
//菱形
/*void main()
{
	for (int i = 1; i <= 4; i++)
	{
		for (int j = 1; j <=4 - i; j++)
			printf(" ");
		for (int x = 1; x <= 2 * i - 1; x++)
			printf("*");
		printf("\n");
	}
	for (int i = 3; i >= 1; i--)
	{
		for (int j = 1; j <= 4 - i; j++)
			printf(" ");
		for (int x = 1; x <= 2 * i - 1; x++)
			printf("*");
		printf("\n");
	}
}*/
//输出大于10000的第一个素数
/*void main()
{
	int i, a;
	for (i = 10000; ; i++)
	{
		for ( a = 2; a <= i - 1; a++)
		{
			if (i % a == 0)
				break;
		}
		if (i == a)
		{
			printf("%d是素数\n", i); break;
		}
		
	}
}*/
//小于10000的5个素数
/*void main()
{
	int i, j,n=0;
	for (i = 10000;i>=2; i--)
	{
		for (j = 2; j <= i - 1; j++)
			if (i % j == 0)
				break;
		if (i == j)
		{ 
			printf("%5d",i);
			n++;
			if (n == 5)
				break;
		}
	}
}*/
//输入一个偶数分解为素数
/*void main()
{
	int i, n, n1, n2;
	printf("输入一个偶数:");
	scanf("%d",&n);
	for (n1 = 2; n1 <= n / 2; n1++)
	{
		n2 = n - n1;
		for (i = 2; i < n1; i++)
			if (n1 % i == 0)
				break;
		if (i < n1)//i<n1不是偶数重新分配
			continue;
		for (i = 2; i < n2; i++)
			if (n2 % i == 0)
				break;
		if (i == n2)
			break;
	}
	printf("%d可分解为%d和%d",n,n1,n2);
}*/
//输入10个学生的成绩
/*void main()
{
	double sum = 0, score, aver;
	int i, count = 0;
	for( i=1;i<=3;i++)
	{
		
		sum += score;
	}
	aver = sum / 3;
	for (i = 1; i <= 3; i++)
	{
		scanf("%lf",&score);

		if (score > aver)
			count++;
	}
	printf("平均分:%lf",aver);printf("过平均分:%d",count);
}*/
//数组10个数去重复
/*void main()
{
	int a[10];
	int i,j;
	srand(time(NULL));
	for ( i = 0; i <10; i++)
	{
		a[i] = rand() % 11;
		printf("%3d",a[i]);
	}
	printf("\n");
	for ( i = 0; i < 9; i++)
	{
		for ( j = i + 1; j < 10; j++)
			if (a[j] == a[i])
				a[j] = 1;
		for ( i = 0; i < 10; i++)
			if (a[i] != 1)
				printf("%3d",a[i]);
	}
}*/
//数组掷筛子
/*void main()
{
	int i, num[100],times[6] = { 0 };
	for (i = 0; i <= 99; i++)
	{
		num[i] = rand() % 6+1;//输出1-6个数
		times[num[i] - 1]++;
		printf("%3d",num[i]);
	}
	printf("\n");
	for (i = 0; i < 6; i++)
		printf("%d出现%d次\n",i+1,times[i]);
}*/
//一个数组中能被3整除的数
/*void main()
{
	int i, j=0, a[20], b[20];
	srand(time(0));
	for (i = 0; i <=19; i++)
	{
		a[i] = rand() % 90;
		printf("%3d",a[i]);
	}
	printf("\n----------------->\n");
	for (i = 0; i <=19; i++)
	{
		if (a[i] % 3 == 0)
		{
			b[j] = a[i];//j=0若放回原来数组a[j++]=a[i];
			j++;
		}
	}
	printf("----------------->\n");
	for (i = 0; i < j; i++)
	{
		printf("%3d",b[i]);
	}
}*/
//5行3列的二维数组存储5名学生3门课程的考试成绩，计算每名学生的平均成绩
/*void main()
{
	int i, j;
	double sum, s[5][3] = { { 82.5,90,78.5 },{75,88,92.5},{95,65,70},{81,72.5,86.5},{89,98,66} };
	for (i = 0; i < 5; i++)
	{
		sum = 0;
		for (j = 0; j < 3; j++)
		{
			sum += s[i][j];
		}
		printf("第%d个aver=%3.1f\n",i+1,sum/3);
	}
}*/
//定义4x4的格子，输出左下角(右上角)的元素和和
/*void main()
{
	int a[4][4] = { 1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8 };
	int i, j,sum=0,sum1=0,sum2=0,sum3=0;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d",a[i][j]);
		}
		printf("\n");
	}
	printf("\n左下角----------------->\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j <= i; j++)
		{
			printf("%3d",a[i][j]);
			sum1 += a[i][j];
		}
		printf("\n");
	}
	printf("左上角\n----------------->\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4 - i; j++)
		{
			printf("%3d",a[i][j]);
			sum += a[i][j];
		}
		printf("\n");
	}
	printf("右上角\n------------------>\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < i; j++)
		{
			printf("   ");
		}
		for (j = i; j < 4; j++)
		{
			printf("%3d", a[i][j]);
			sum2 += a[i][j];
		}
		printf("\n");
	}
	printf("右下角\n------------------>\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 3 - i; j++)
		{
			printf("   ");
		}
		for (j = 3 - i; j < 4; j++)
		{
			printf("%3d", a[i][j]);
			sum3 += a[i][j];
		}
		printf("\n");
	}
	printf("左上角的和为%d,左下角的和为%d\n",sum,sum1);
	printf("右上角的和为%d,右下角的和为%d\n", sum2,sum3);
}*/
//数组查看字符串的小写大写字母数字的个数
/*void main()
{
	char a[100] = { "abc123456aSD"};
	int i,count=0,zimu=0,xiaoxie=0;
	for (i = 0; a[i] != 0; i++)
	{
		if (a[i] >= '0' && a[i] <= '9')
		{
			count++;
		}
		if (a[i] >= 'A' && a[i] <= 'Z')
			zimu++;
		if (a[i] >= 'a' && a[i] <= 'z')
			xiaoxie++;
	}
	printf("数字个数%d\n",count);
	printf("字母个数%d\n", zimu);
	printf("小写个数%d\n", xiaoxie);
}*/
//strcmp
/*void main()
{
	int k, count = 0;
	char a[100] = { "asscd" };
	char b[20] = { "c" };
	k = strcmp(a, b);
	if (k == 0)
	{
		printf("==");
	}
	if (k > 0)
	{
		printf(">");
	}
	if (k < 0)
	{
		printf("<");
	}printf("%d",k);
}*/
//1000以内的完全数
/*void main()
{
	int i, j;
	for (i = 3; i <=1000; i++)
	{
		int sum = 0;
		for (j = 1; j <=i/2; j++)
		{
			if (i % j == 0)
				sum+=j;
		}
		if (i==sum)
			printf("%d\n",i);
	}
}*/
//大于2的偶数分解为2个素数之和
/*void main()
{
	int i, n1,n2,n;
	scanf("%d",&n);
	for (n1 = 3; n1 <= n / 2; n1++)//先取出一半
	{
		n2 = n - n1;
		for (i = 2; i < n1; i++)
		{
			if (n1 % i == 0)
				break;
		}//求素数
		if (i < n1)
			continue;
		for (i = 2; i < n2; i++)
		{
			if (n2 % i == 0)
				break;
		}
		if (i == n2)
			break;
	}
	printf("%d is %d and %d",n,n1,n2);
}*/
//求n个阶乘的和
/*void main()
{
	int i, n,sum=0;
	int a = 1;
	scanf("%d",&n);
	//求阶乘
	for (i = 1; i <= n; i++)
	{
		a = a * i;
		sum += a;
	}
	printf("阶乘:%d，多个阶乘和为%d",a,sum);
}*/
//一个编好序的数组插入到另一个编好序的数据，要求插入后的程序仍然按升序排列
/*void main()
{
	int a[5] = { 1,4,5,8,9 };
	int b[5] = { 2,6,8,10,11 };
	int c[10];
	int i=0, j=0, k = 0;
	while (i < 5 && j < 5)//取2个数组的最小值
	{
		if (a[i] < b[j])
		{
			c[k++] = a[i++];
		}
		else {
			c[k++] = b[j++];
		}
	}
	while (i < 5)
		c[k++] = a[i++];
	while (j < 5)
		c[k++] = b[j++];
	
	for (k = 0; k < 10; k++)
		printf("%d\t",c[k]);
}*/
//用筛选法求100以内的素数
/*void main()
{
	int i,j;
	int array[100];
	for (i = 0; i < 100; i++)//数组赋值1-100；
	{
		array[i] = i + 1;
	}
	array[0] = 0;
	for (i = 1; i <= 100; i++)
	{
		if ( array[i]==0)
			continue;
		for (j = i + 1; j < 100; j++)
		{
			if (0 != array[j] && array[j] % array[i] == 0)//%两端不能为0
			{
				array[j] = 0;
			}
		}
	}
	for (i = 0; i < 100; i++)
		printf("%d,",array[i]);
}*/
//选择对10个数据进行排序
/*void main()
{
	int a[10] = { 1,3,5,7,9,2,4,6,8,0 };
	int i, j,t;
	for (i = 0; i < 10; i++)
	{
		printf("%d,",a[i]);
	}
	for (i = 0; i < 9; i++)
	{
		for(j=i+1;j<10;j++)
		{
			if (a[i] > a[j])
			{
				t = a[i];
				a[i] = a[j];
				a[j] = t;
			}
		}
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d,",a[i]);
	}
}*/
//3x3的对角线之和
/*void main()
{
	int a[3][3] = { 1,2,3,4,5,6,7,8,9 };
	int i,j,sum1=0,sum2=0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
	for(i=0;i<3;i++)
	{ 
		sum1 = a[i][i] + sum1;
		sum2 = a[i][2 - i] + sum2;
		printf("\n");
	}
	printf("左角线:%d,右对角线:%d",sum1,sum2);
}*/
//输入一个数字按照具体顺序插入排序好的数列中
/*void main()
{
	int a[5] = { 1,2,3,5 };
	int i, j, k1;
	scanf("%d",&k1);
	for (i = 0; i < 4; i++)
	{
		if (a[i] > k1)
			break;
	}
	for (j = 3; j >= i; j--)
		a[j + 1] = a[j];
	a[i] = k1;
	for (i = 0; i < 5; i++)
		printf("%d,",a[i]);
}*/
//逆序输出数组的值
/*void main()
{
	int a[5] = { 0,1,2,3,4 };
	for (int i = 4; i >= 0; i--)
	{
		printf("%d,",a[i]);
	}
}*/
//输出杨辉三角的左下10行
/*void main()
{
	int a[10][10];
	int i, j;
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j <= i; j++)
		{
			if (j == 0 || i == j)
				a[i][j] = 1;
			else 
				a[i][j] = a[i - 1][j] + a[i - 1][j - 1];
		}
	}
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j <=i; j++)
		{
			printf("%3d  ",a[i][j]);
		}
		printf("\n");
	}
}*/
//删除字符数组的空格
/*void main()
{
	int i, j;
	char count[] = {"china is country"};
	
	for (i = j = 0; count[i] != '\0'; i++)
	{
		if (count[i] != ' ')
		{
			count[j] = count[i];
			j++;
		}
	}
	count[j] = '\0';
	printf("%s\n",count);
}*/
//统计字符数组的个数
/*void main()
{
	char str[100];
	int i, count[26] = { 0 };
	gets(str);
	for (i = 0; str[i] != '\0'; i++)
		if (str[i] >= 'A' && str[i] <= 'Z')
			count[str[i] - 'A']++;
	for (i = 0; i < 26; i++)
		printf("%c字母%d个\n",65+i,count[i]);
}*/
//判断是否为回文字符串
/*void main()
{
	char m[100];
	int i, j, flag = 1;;
	printf("输入字符串:\n");
	gets(m);
	j = strlen(m);
	for (i = 0; i <= j / 2; i++)
	{
		if (m[i] != m[j - i - 1])
		{
			flag = 0;
			break;
		}
	}
	if (flag)
		printf("Yes\n");
	else
		printf("NO\n");
}*/
//调用函数求x的y次方
/*void main()
{
	float power(float x, int y);
	printf("输入浮点数和次方整数:\n");
	float x;int  y; float p;
	scanf("%f%d", &x, &y);
	if (x == 0 && y < 0)
		printf("Error\n");
	else
	{
		p = power(x,y);
		printf("%f的%d次方为%8.2f\n",x,y,p);
	}
}
float power(float x, int y)
{
	int i;
	float result = 1;
	if (y == 0 && x != 0)
		result = 1;
	else if (x == 0 && y == 0)
		result = 0;
	else if (y > 0)
		for (i = 1; i <= y; i++)
			result = result * x;
	else
	{
		for (i = 1; i <= abs(y); i++)
			result = result * x;
		result = 1.0 / result;
	}
	return result;
}*/
//调用函数求闰年
/*void main()
{
	int nian(int year);
	int year;
	scanf("%d",&year);
	if (nian(year))
	{
		printf("闰年\n");
	}
	else printf("平年\n");
}
int nian(int year)
{
	int leap = 0;
	if ((year % 400 == 0) || (year % 100 != 0 && year % 4 == 0))
		leap = 1;
	return leap;
}*/
//调用函数求水仙花数
/*void main()
{
	int sxh(int n);
	int i;
	for (i = 100; i <= 999; i++)
	{
		if (sxh(i) == 1)
			printf("%d ", i);
	}
}
int  sxh(int n)
{
	int a, b, c;
	int flag=0;
	a = n / 100;
	b = n % 100 / 10;
	c = n % 10;
	if (n == a * a * a + b * b * b + c * c * c)
		flag = 1;
	
	return flag;
}*/
//调用函数素数
/*void main()
{
	int susu();
	printf("%d ", susu());
}
int susu()
{
	int i,j;
	for (i = 100; i <= 200; i++)
	{
		for (j = 2; j <= i - 1; j++)
		{
			if (i%j==0)
				break;
		}
		if (j == i)
			printf("%d\n",j);
	}
}*/
//调用函数求max;
/*void main()
{
	int a, b, c, d;
	int max1(int a, int b, int c, int d);
	scanf("%d%d%d%d",&a,&b,&c,&d);
	printf("max:%d",max1(a,b,c,d));
}
int max1(int a,int b,int c,int d)
{
	int m;
	m = max2(a, b);
	m = max2(m, c);
	m = max2(m, d);
	return m;
}
int max2(int a,int b)
{
	return(a > b ? a : b);
}*/
//调用递归函数求年龄
/*void main()
{
	int age(int x);
	int i;
	for (i = 1; i <= 5; i++)
	{
		printf("No.%d的年龄为%d\n",i,age(i));
	}
}
int age(int x)
{
	int n;
	if (x == 1)
		n = 10;
	else
		n = age(x - 1) + 2;
	return n;
}*/
//调用函数求阶乘
/*void main()
{
	int a;
	int i,sum=0;
	int fac(int n);
	scanf("%d",&a);
	printf("%d!=%d\n",a,fac(a));
	for (i = 1; i <= a; i++)
	{
		sum = fac(i) + sum;
	}
	printf("%d",sum);
}
int fac(int n)
{
	int f;
	if (n == 1 || n == 0)
		f = 1;
	else f = fac(n - 1) * n;
	return f;
}*/
//调用递归函数求猴子吃桃
/*void main()
{
	int taozi(int day);
	printf("%d",taozi(1));
}
int taozi(int day)
{
	int num;
	if (day == 10)
		num = 1;
	else
		num = (taozi(day + 1) + 1) * 2;
	return num;
}*/
//判断一个数是否为素数
/*void main()
{
	int i;
	int t;
	printf("数字:\n");
	scanf("%d",&t);
	for (i = 2; i <=t - 1; i++)
	{
		if (t % i == 0)
			break;
	}
	if (i == t)
		printf("t是素数", t);
	else
		printf("t不是素数",t);
}*/
//判断打鱼筛网
/*void main()
{
	int a;
	printf("天数:");
	scanf("%d",&a); 
	int b;
	b = a % 5;
	if (b <= 3)
		printf("Fishing");
	else printf("Drying");
}*/
//判断21世纪中截至某个年份以来的闰年年份，若输出非21世纪的年份输出Invalid year!,若无闰年输出None
/*void main()
{
	int year;
	scanf("%d",&year);
	if (year < 2000)
		printf("INvalid year!\n");
	else
	{
		int i,sum=0;
		for(i=2001;i<=year;i++)
		if ((i % 400 == 0) || (i % 4 != 0 && i % 100 == 0))
		{
			sum++;
			printf("%d ",i);
		}
		if (sum == 0)
			printf("None");
	}
}*/
//水仙花
/*void main()
{
	int a,b,c;
	for (int i = 100; i <= 999; i++)
	{
		a = i / 100;
		b = i / 10 % 10;
		c = i % 10;
		if (i == a * a * a + b * b * b + c * c * c)
			printf("%d ",i);
	}
}*/
//函数调用运算符号
/*void main()
{
	int data1, data2;
	char op;
	scanf("%d%c%d", &data1, &op, &data2);
	switch (op)
	{
	case'+':
		printf("%d+%d=%d\n", data1, data2, data1 + data2);
		break;
	case'-':
		printf("%d-%d=%d\n", data1, data2, data1 - data2);
		break;
	case'*':
		printf("%d*%d=%d\n", data1, data2, data1 * data2);
		break;
	case'/':
		if (0 == data2)
			printf("Division by zero!\n");
		else
			printf("%d/%d=%d\n", data1, data2, data1 / data2);
		break;
	default:
		printf("Invalid operator!\n");
	}
}*/
/*void main()
{
	int a,c;
	char b;
	int op(int a, char b, int c);
	scanf("%d%c%d",&a,&b,&c);
	printf("%d",op(a,b,c));
}
int op(int a,char b,int c)
{
	int z;
	switch (b)
	{
	case '+':z = a + c; return z; break;
	case '-':z = a - c; return z; break;
	case '*':z = a * c; return z; break;
	case '/':
		if (c == 0)
			printf("除数不为零");
		else
			z = a / c; return z; break;

	}
}*/
//函数调用输入10进制，输出2进制
/*void main()
{
	int n, a[200];
	int i = 0;
	printf("请输入十进制数n：");
	scanf("%d", &n);
	while (n)
	{
		a[i] = n % 2;
		i = i + 1;
		n = n / 2;
	}
	for (i--; i >= 0; i--)//i--退回原i值
		printf("%d", a[i]);
	printf("\n");
}*/
/*int main()//函数调用递归
{

	int x;
	scanf("%d", &x);
	trans(x);
	return 0;
}
int trans(int num)
{
	int a;
	if (num < 2)
	{
		printf("%d", num);
	}
	else
	{
		a = num % 2; //取余得到对应的数字
		num = num / 2;//除二进行下一步计算
		trans(num);
		printf("%d", a);
	}
	return 0;
}*/
/*void main()
{
	int x;
	int trans(int num);
	scanf("%d", &x);
	trans(x);
	//return 0;
}
int trans(int num)
{
	int a=1;
	if (num ==1)
	{
		printf("%d", num);
		//return a = 1;
	}
	else
	{
		a = num % 2; //取余得到对应的数字
		num = num / 2;//除二进行下一步计算
		trans(num);
		printf("%d", a);
		//return a;
	}
	//return 0;
}*/
/*void main()
{
	int a;
	void dectobin(int dec);
	printf("\n");
	scanf("%d",&a);
	dectobin(a);
}
void dectobin(int dec)
{
	if (dec > 0)
	{
		dectobin(dec / 2);
		printf("%d",dec%2);
	}
}*/
//函数调用输10进制，输出n进制
/*void main()
{
	int x,n;
	int trans(int x,int n);
	printf("输入一个10进制数:\n");
	scanf("%d%d",&x,&n);
	trans(x, n);
	//printf("二进制:"); trans(x,n);
	//printf("\n");
	//printf("8进制:%o\n",x);
	//printf("16进制:%x\n",x);
}
int trans(int x, int n)//不完美
{
	int num = 1;
	if (x == 1)
	{
		printf("%d ", num);
	}
	else if (x == 0) {
		return 0;
	}
	else if(x>=2)
	{
		num = x % n;
		x = x / n;
		trans(x, n);
		if (x >= 0 && x <= 9)
			printf("%d ", num);
	}
}*/
/*int digui(int n, char s[16], int b)//递归法(完美)
{
	if (n == 0)
		return 0;
	digui(n / b,s,b);
	printf("%c", s[n % b]);
	return 0;
}
int main()
{
	int n,b;
	scanf("%d%d", &n,&b);//n:10进制数,b:n进制
	char str[16] = "0123456789ABCDEF";

	if (n == 0)
		printf("0");
	else
		digui(n, str,b);
	return 0;
}*/
/*void main()
{
	int n, b;
	char a[16] = { "0123456789ABCDEF" };
	scanf("%d%d",&n,&b);
	trans(n, a, b);
}
int trans(int n, char a[16], int b)
{
	if (n == 0)
		printf("%d",n);
		//return 0;
	else 
	{
		trans(n / b, a, b);
		printf("%c", a[n % b]);
	}
}*/
/*void trans(int dec, int n)
{
	if (dec > 0)
	{
		trans(dec / n, n);
		printf("%d",dec%n);
	}
}
void main()
{
	int a, n;
	printf("输入转换的10进制数\n");
	scanf("%d%d",&a,&n);
	trans(a,n);
}*/
//函数调用comb Cm,n=n!/(m!(n-m)!),运用jec(阶乘)函数
/*void main()
{
	int jec(int x);
	float comb(int m, int n);
	int m, n;
	printf("输入m和n:\n");
	printf("注意n>m\n");
	scanf("%d%d", &m, &n);
	if (n <= m)
	{
		printf("非法或分式无意义\n");
	}
	else {
		printf("m的阶乘:%d\n", jec(m));
		printf("n的阶乘:%d\n", jec(n));
		printf("comb函数的数值为:%.2f", comb(m, n));
	}
}
int jec(int x)
{
	int j = 1;
	int i;
	for (i = 1; i <= x; i++)
	{
		j = j * i;
	}
	return j;
}
float comb(int m, int n)
{
	int c;
	c = 1.0*jec(n) / (jec(m) * jec(n - m));
	//printf("%.2f",c);
	return c;
}*/
//函数调用任意大于2 的偶数可以分解为素数之和
/*void main()
{
	int i;
	int susu(int x);
	int even(int x);
	scanf("%d",&i);
	
	if(i%2==0)
		even(i);
	else 
		printf("不满足题意,重新输入\n");

}
int susu(int x)//判断素数
{
	int i ;
	for (i = 2; i <= x - 1; i++)
	{
		if (x % i == 0)
		{
			return 0;
			break;
		}
	}
	if (i == x)
		return 1;
}
int even(int x)//执行分解
{
	int i;
	for (i = 2; i <= x / 2; i++)
	{
		if(susu(i))
			if (susu(x - i))
			{
				printf("%d=%d+%d\n", x, i, x - i);
				return;
			}
	}
}*/

//函数调用countc,形式参数array,统计数组中大写字母的数目
/*void main()
{
	char a[255];
	int len;
	scanf("%s",a);
	len = countc(a);
	printf("大写字母%d",len);
}
int countc(char array[])
{
	int i, len = 0;
	for (i = 0; i != '\0'; i++)
	{
		if ((array[i] >= 'A') && (array[i] <= 'Z'))
			len++;
			return len;
	}
}*/
//求一个3x4的矩阵各列元素平均值
/*void main()
{
	int a[3][4] = {4,2,2,4,2,3,4,5,6,7,6,9};
	int i,j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
	printf("---->\n");
	float num[4] = { 0 };
	float sum;
	for (i = 0; i < 4; i++)
	{
		sum = 0;
		for (j = 0; j < 3; j++)
		{
			sum = sum+1.0*a[j][i] / 3;
			printf("%d ",a[j][i]);
		}
		num[i] = sum;
		printf("\n");
	}
	for (i = 0; i < 4; i++)
	{
		printf("%.2f  ",num[i]);
	}
}*/
//调用函数link 要求S1连接到S3,S2连接到S3，输出字符串的长度
/*void main()
{
	int link(char s1[], char s2[], char s3[]);
	char s1[40], s2[40], s3[80];
	int len;
	printf("输入连续的2个字符串");
	scanf("%s%s",s1,s2);
	len = link(s1, s2,s3);
	printf("字符串的长度%d\n",len);


}
int link(char s1[], char s2[], char s3[])//计算字符串的长度
{
	int i, len=0;
	for (i = 0; s1[i] != '\0'; i++)
	{
		s3[len] = s1[i]; 
		len++;
	}
	for (i = 0; s2[i] != '\0'; i++)
	{
		s3[len] = s2[i];
		len++;
	}
	s3[len] = '\0';
	return len;
}*/
//调用函数评委打分
/*void main()
{
	void input(int a[], int n);
	int ssum(int a[], int n);
	int smax(int a[], int n);
	int smin(int a[], int n);
	int a[10], max, min, sum;
	float aver;
	input(a, 10);
	sum = ssum(a,10);
	max = smax(a, 10);
	min = smin(a,10);
	aver = (sum - max - min) / 8.0;
	printf("max:%d,min:%d,sum:%d,aver:%.2f\n",max,min,sum,aver);

}
void input(int a[], int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		scanf("%d",&a[i]);
	}
}
int ssum(int a[], int n)
{
	int i, sum = 0;
	for (i = 0; i < n; i++)
	{
		sum = sum + a[i];
	}
	return sum;
}
int smax(int a[], int n)
{
	int i, max;
	max = a[0];
	for (i = 0; i < n; i++)
		if (max < a[i])
			max = a[i];
	return max;
}
int smin(int a[], int n)
{
	int i, min;
	min = a[0];
	for (i = 0; i < n; i++)
	{
		if (min > a[i])
			min = a[i];
	}return min;
}*/
//调用函数把字符串大写字母变成小写字母,主函数输入字符串调用函数uptolow
/*void main()
{
	void uptolow(char array[]);
	char a[255];
	int i;
	scanf("%s",a);
	uptolow(a);
	//printf("%s",a);
	puts(a);
}
void uptolow(char array[])
{
	int i;
	for(i=0;array[i]!='\0';i++)
	{
		if ((array[i] >= 'A') && (array[i] <= 'Z'))
		{
			array[i] += 32;
		}
	}
}*/
//函数调用实现连接函数
/*void main()
{
	void connect(char a[], char b[]);
	char a[100], b[100];
	scanf("%s",a);
	scanf("%s",b);
	connect(a, b);
	printf("%s",a);
}
void connect(char a[], char b[])
{
	int i, j;
	for (i = 0; a[i] != '\0'; i++);
		for (j = 0; a[j] != '\0';i++,j++)
		a[i] = b[j];
	a[i] = '\0';
}
*/
//用指针打印整个数组元素(一级指针)
/*void main()
{
	int a[10] = { 0 };
	int *pa = a;
	for (int i = 0; i < 10; i++)
	{
		*pa = i + 1;//内容++;
		pa++;//所在地址++;
	}
	for (int i = 0; i < 10; i++)
		printf("%d ",a[i]);
}*/
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int *p = a;
	int sz =sizeof(a)/sizeof(a[0]);
	for (int i = 0; i < sz; i++)
	{
		printf("%d ",*p);
		p++;
	}
}*/
/*int my_strlen(char* str)
{
	char* start = str;   // 将初始指针保存
	while (*str != '\0')
	{
		str++;//str进行了一次+1;不满足条件结束循环
	}
	return str - start;  // 末尾指针-初始指针
}
int main()
{
	char a[] = "abcdef";
	int len = my_strlen(a);
	printf("%d\n", len);   // 6
	return 0;
}*/
//二级指针:指针变量也是变量，是变量就有地址，那指针变量的地址就放在二级指针里面
/*void main()
{
	int a = 10;
	int* p = &a;
	int** pp = &p;
	// p=&a,a的地址给p,*p把a的内容给*p;把p的地址给*pp,*pp=&p,**pp是内容
	printf("%d",**pp);//10
	return 0;
}*/
/*void main()
{
	int a = 10;
	int *p;
	p = &a;
	int **pp=&p;
	*p = 20;
	printf("%d\n",a);//20
	*(*pp) = 30;
	printf("%d",a);//30
}*/
//二级指针和二维数组连用
/*void main()
{
	int arr1[] = { 1,2,3,4,5 };
	int arr2[] = { 2,3,4,5,6 };
	int arr3[] = { 3,4,5,6,7 };
	int arr4[] = { 4,5,6,7,8 };
	int* arr[4] = { arr1,arr2,arr3,arr4 };
	for (int i = 0; i <4; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			printf("%d ",*(*(arr+i)+j));//*(a+i)=>a[i],*(*(arr+i)+j)=>arr[i][j]
		}
			printf("\n");
	}
}*/
//输入a和b两个整数,求max,用指针处理变量的值(交换物理地址)
/*void main()
{
	int* p1, * p2, a=8, b=9, * p;//定义指针与交换的指针是同类型(提前定好),可以发生交换
	p1 = &a; p2 = &b;
	if (a < b)
	{
		p = p1;//因为*p的p代表地址与*p1和*p2是同级的,所以交换了*p1与*p2的值
		p1 = p2;
		p2 = p;
	}
	printf("%d,%d\n",*p1,*p2);//9 8
	printf("%d,%d",a,b);//8,9
}*/
/*void fun(int* a, int* b)
{
	int* k;//只是交换了地址没转换值
	k = a;//因为*k与*a,*b不同级，a代表地址,*k中的k也是地址,所以他们只交换地址
	a = b;
	b = k;
}
void main()
{
	int a = 3;
	int b = 6;
	int *x = &a;
	int *y = &b;
	fun(x, y);//后定义交换指针类型,其中值不变
	printf("%d,%d,%d,%d",a,b,*x,*y);//3 6 3 6
}*/
//函数调用指针交换a和b
/*void main()
{
	int swap(int *x, int *y);
	int x=8, y=9;
	int* p1, * p2, * p;
	p1 = &x, p2 = &y;
	printf("调用前:\nx:%d,y:%d\n",x,y);//8,9
	swap(p1,p2);
	printf("进行调用后:\n");
	printf("x:%d,y:%d\n", x, y);//9,8
	printf("*p1:%d,*p2:%d\n",*p1,*p2);//9,8
}
int swap(int *a, int *b)//※极为重要
{
	int t;//定义int整形变量
	t = *a; //因为*a代表x,*a是整形,所以定义了整形t，转换了原本的值和,*a;
	*a = *b;
	*b = t;
}*/
//输入3个数由大到小交换,用exchage函数，swap函数
/*void main()
{
	void exchage(int* p1, int* p2, int* p3);
	int a, b, c;
	int* p1, * p2, * p3;
	scanf("%d%d%d",&a,&b,&c);
	p1 = &a, p2 = &b, p3 = &c;
	exchage(p1, p2, p3);
	printf("%d,%d,%d",a,b,c);
}
void exchage(int *q1,int *q2,int *q3)
{
	void swap(int* p1, int* p2);
	if (*q1 < *q2) swap(q1, q2);
	if (*q1 < *q3) swap(q1, q3);
	if (*q2 < *q3) swap(q2, q3);
}
void swap(int *p1,int *p2)
{
	int t;
	t = *p1;
	*p1 = *p2;
	*p2 = t;
}*/
//函数调用指针变量指向数组元素[a[i] == *(a+i)]
/*void main()
{
	int a[10];
	int* p, i;
	p = a;
	printf("输入10个数:\n");
	for (i = 0; i < 10; i++)
	{
		scanf("%d",&p[i]);
	}
	for (i = 0; i < 10; i++)
	{
		printf("%4d",p[i]);
	}
}*/
/*void main()
{
	int* p, a[10];
	for (p = a; p < (a + 10); p++)//p与a连接
	{
		scanf("%d", p);//p=&a[i]
	}
	for (p = a; p < (a + 10); p++)
		printf("%4d",*p);
}*/
//指针逆序
/*void main()
{
	int a[5] = { 0 }, * p = NULL, sum = 0;
	for (p = a; p < (a + 5); p++)
		scanf("%d",p);
	for (p = a+4; p >=a; p--)//逆序输出
	{
		printf("%4d",*p);
	}
}*/
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,9,0 }, t = 0, * p = NULL, * q = NULL;
	for (p = a; p < a + 10; p++)
	{
		printf("%4d",*p);
	}
	printf("\n");
	p = a;//p是第1个元素
	q = a + 9;//q是最后一个元素
	while (p < q)
	{
		t = *p;
		*p = *q;
		*q = t;
		p++;
		q--;
	}
	//for (p = a, q = p + 9; p<q; p++, q--)
	//{
	//t=*p;
	//*p=*q;
	//*q=t;
	// }
	for (p = a; p < a + 10; p++)
		printf("%4d",*p);
}*/
//数组表示斐波那契数列
/*void main()
{
	int i;
	int f[20] = { 1,1 };
	for (i = 2; i < 20; i++)
	{
		f[i] = f[i - 1] + f[i - 2];//f[2]=f[1]+f[0];
	}
	for (i = 0; i < 20; i++)
	{
		if (i % 5 == 0)
			printf("\n");
		printf("%12d ",f[i]);
	}
}*/
//关于排序插入删除的联系
/*void main()//冒泡排序
{
	int a[10] = { 1,2,3,7,5,6,4,8,9,0 };
	int i, j,t;
	for (i = 0; i < 9; i++)//循环次数
	{
		for (j = 0; j < 10 - 1 - i; j++)//j:0~9，冒泡排序j 0——n-1-i;
		{
			if (a[j]>a[j + 1])//冒泡排序相邻的进行调换,从小到大>，从大到小《
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	for (i = 0; i <= 9; i++)
	{
		printf("%d ",a[i]);
	}
}*/
/*void main()//选择排序
{
	int a[10] = { 1,2,3,7,5,6,4,8,9,0 };
	int i, j, t;
	for (i = 0; i < 9; i++)
	{
		for (j = i + 1; j < 10; j++)
		{
			if (a[i] > a[j])
			{
				t = a[i];
				a[i] = a[j];
				a[j] = t;
			}
		}
	}
	for (i = 0; i <= 9; i++)
	{
		printf("%d ",a[i]);
	}
}*/
/*void main()//插入(未排序直接插入)
{
	int a[11] = { 1,2,3,7,5,6,4,8,9,0 };//10个数a[0]-a[9]
	int i, j,t;
	scanf("%d",&t);
	for (i = 0; i < 10; i++)//比较趟数
	{
		if (a[i] > t)
			break;
	}
	for (j = 9; j >= i; j--)
		a[j + 1] = a[j];//将a[10]<-a[9]
	a[i] = t;
	for(i=0;i<11;i++)
	{
		printf("%d\t",a[i]);
	}
}*/
/*void main()//删除指定元素
{
	int a[10] = { 1,2,3,7,5,6,4,8,9,0 };
	int i, j, t;
	scanf("%d",&t);
	for (i = 0; i < 10; i++)//进行遍历
	{
		if (t == a[i])
			break;
	}
	for (j = i; j <9; j++)//倒数第一个元素0-9
	{
		a[j]=a[j+1];//a[8]<-a[9]
	}
	for (i = 0; i < 9; i++)//删除一个余九个元素
	{
		printf("%d ",a[i]);
	}
}*/
//转置
/*void main()
{
	int a[2][3] = { {1,2,3},{4,5,6} };
	int b[3][2], i, j;
	printf("array:\n");
	for (i = 0; i < 2; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d ",a[i][j]);
			b[j][i] = a[i][j];//核心
		}
		printf("\n");
	}
	printf("转置后:\n");
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 2; j++)
		{
			printf("%d ",b[i][j]);//赋值完成后输出b[i][j];
		}
		printf("\n");
	}
}*/
//二维数组求最大元素的值，以及所在的行号和列号
/*void main()
{
	int a[3][4] = { {1,2,3,4},{9,8,7,6},{-10,10,-5,2} };
	int i, j, row = 0, cloum = 0, max;
	max = a[0][0];
	for (i = 0; i <= 2; i++)
	{
		for (j = 0; j <=3; j++)
		{
			printf("%4d ",a[i][j]);
			if (max < a[i][j])
			{
				max = a[i][j];
				row = i;
				cloum = j;
			}
		}
		printf("\n");
	}
	printf("max: %d\n行: %d\n列: %d\n",max,row,cloum);
}*/
//strcat
/*void main()
{
	char str1[30] = { "people is Republic of" };
	char str2[] = { "china" };
	strcat(str1, str2);
	printf("%s\n",str1);
	puts(str1);
}*/
//strcpy 格式strcpy(str1,str2);将str2复制给str1;会将'\0'一并复制过去
/*void main()
{
	char str1[30] = { "people is Republic of" };
	char str2[] = { "china" };
	strcpy(str1, str2);
	puts(str1);//china因为str1把str2的'\0'一并复制了过去
}*/
//strncpy 格式strncpy(str1,str2,n) 将str2的前n项赋值给str1;前n项没有'\0'
/*void main()
{
	char str1[30] = { "people is Republic of" };
	char str2[] = { "china" };
	//puts(strncpy(str1, str2, 3));//给str1复制的是str2的chi
	char a[50] = "abcdefgh";
	char b[] = "ABCD";
	strncpy(a,b,2);//ABcdefgh
	puts(a);//ABCD
	//puts(strncpy(a, b, 2));
	//printf("%c",a[5]);
	
}*/
//输入一行字符统计其中有几个单词,单词之间用空格分开
/*void main()
{
	char string[81];
	int i, num = 0, word = 0;
	char c;
	gets(string);
	for (i = 0; (c = string[i]) != '\0'; i++)
	{
		if (c == ' ') word = 0;
		else if (word == 0)
		{
			word = 1;
			num++;
		}
	}
	printf("word个数:%d",num);
}*/
//指针实现输入一个整形数组,输出max,min,aver
/*void main()
{
	int a[10], max, min, * p;
	float aver;
	printf("输入10个整数");
	for (p = a;p < a + 10; p++)//用地址来for循环
	{
		scanf("%d",p);
	}
	max = *a, min = *a,aver=0;
	for (p = a; p < a + 10; p++)
	{
		if (max < *p) max = *p;
		if (min > *p) min = *p;
		aver += *p;
	}
	aver =aver/ 10;
	printf("max:%d\nmin=%d\naver=%d\n",max,min,aver);
}*/
//指针实现对N个整数升序并输出,要求用函数void sort(int *array,int n),N个整数和N在主程序中输入，在主函数中输出排序的结果
/*void main()//主函数输入,子函数进行排序冒泡或者选择
{
	void sort(int* array, int n);
	void so(int* array, int n);
	int a[8], n, * p = a, i = 0, j = 0, k = 0, t = 0;
	printf("请输入n的值:\n");
	scanf("%d",&n);
	printf("请给数组赋值:\n");
	for (i = 0; i < n; i++)
		scanf("%d",&a[i]);
	//sort(a, n);
	so(a, n);//自编
	for (i = 0; i < n; i++)
		printf("%5d",*(p+i));//*(p+i)->p[i]
	printf("\n");
}
void sort(int* array, int n)
{
	int i, j, k, t;
	for (i = 0; i < n - 1; i++)
	{
		k = i;
		for (j = i + 1; j < n; j++)
			if (array[k] > array[j])
				k = j;
		t = array[i];
		array[i] = array[k];
		array[k] = t;
	}
}
void so(int* array, int n)//自编
{
	int i, j, t;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (array[j] > array[j + 1])
			{
				t = array[j];
				array[j] = array[j + 1];
				array[j + 1] = t;
			}
		}
	}
}*/
//指针实现找出最大值 5个学生有学号学习成绩求max
/*void main()
{
	int num[5] = {0}, * p = NULL;
	float score[5] = { 0.0 }, * q = NULL, * w = NULL;
	for (p = num, q = score; p < num + 5; p++, q++)
		scanf("%d%f",p,q);
	for (p = num; p < num + 5; p++)
		printf("%8d",*p);
	printf("\n");
	for (q = score; q < score + 5; q++)
		printf("%8.2f\n",*q);
	printf("\n");
	w = score;//初始化
	for (q = score + 1; q < score + 5; q++)
		if (*w < *q) w = q;
	printf("number=%d,score=%2.f\n",num[w-score],score[w-score]);
}*/
/*void main()
{
	int num[5] = { 0 }, * p = NULL;
	float score[5] = { 0.0 }, * q = NULL, * w = NULL;
	for (p = num, q = score; p < num + 5; p++, q++)//输入学号分数
		scanf("%d%f",p,q);
	for (p = num; p < num + 5; p++)
		printf("%4d",*p);
	printf("\n");
	for (q = num; q < score + 5; q++)
		printf("%.2f",*q);
	printf("\n");
	w = score;//score 的初值给w;
	for (q = score + 1; q < score + 5; q++)
		if (*w < *q) w = q;//w为max
	printf("num=%d\nscore=%.2f\n",num[w-score],score[w-score]);//w-score  :max的w-score的初始变量为元素下标
}*/
//指针实现数组排序
/*void main()
{
	int a[8] = { 34,56,45,57,69,48,79,61 };
	int i, j, * p = a,t;
	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j < 8 - 1 - i; j++)
		{
			if (p[j] > p[j + 1])
			{
				t = p[j];
				p[j] = p[j + 1];
				p[j + 1] = t;
			}
		}
	}
	for (i = 0; i < 8; i++)
		printf("%5d",*(p+i));
}*/
//数组逆序输出两端互换值
/*void main()
{
	int i, a[10] = { 3,7,9,11,0,6,7,5,4,2 };
	for (i = 0; i < 10; i++)
	{
		printf("%4d",a[i]);
	}
	printf("\n");
	int m,j,t; m = 10 / 2;
	for (i = 0; i < m; i++)
	{
		j = 10-1-i;
		t = a[i];
		a[i] = a[j];
		a[j] = t;
	}
	printf("修正后:\n ");
	for (i = 0; i < 10; i++)
	{
		printf("%4d",a[i]);
	}
}*/
/*void main()
{
	void inv(int x[], int n);
	int i, a[10] = { 3,7,9,11,0,6,7,5,4,2 };
	int* q = a;
	for (q = a; q <a+10; q++)
	{
		printf("%4d", *q);
	}
	printf("\n");
	q = a;//※需要赋首地址 若没有,q++后,此时q指向数组最后一个元素;
	inv(q, 10);
	printf("修正后:\n ");
	for (q = a; q <a+ 10; q++)
	{
		printf("%4d", *q);
	}
}
void inv(int x[], int n)//指针实现函数调用
{
	int temp, * i, * j;
	for (i = x, j = n - 1 + x; i < j; i++, j--)//i指向首元素,j指向末元素
	{
		temp = *i;
		*i = *j;
		*j = temp;
	}
}
void iniv(int x[], int n)//数组实现a[1]<-->a[9],a[2]<-->a[8]
{
	int temp, i, j, m = n / 2;
	for (i = 0; i < m; i++)
	{
		j = n - 1 - i;
		temp = x[i];
		x[i] = x[j];
		x[j] = temp;
	}
}*/
//输出二维数组
/*void main()
{
	float f[3][4] = { {0.0,0.1,0.2,0.3},{1.0,1.1,1.2,1.3},{2.0,2.1,2.2,2.3} };
	float* pf;
	int i, j;
	pf = f[0];//二维数组与一维数组的定义异同
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%.2f ", *pf);
			pf++;
		}
		printf("\n");
	}
}*/
/*void main()
{
	float f[3][4] = { {0.0,0.1,0.2,0.3},{1.0,1.1,1.2,1.3},{2.0,2.1,2.2,2.3} };
	float* pf;
	pf = f[0];
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%.2f ",*((pf+i)+j));
		}
		printf("\n");
	}
}*/
//行列输出二维数组
/*void main()//列指针输出二维数组 列指针为一个一个输出所以第一个p地址指向a[0]
{
	int a[3][4] = { {1,3,5,7},{9,11,13,15},{17,19,21,23 } };
	int * p;
	for (p=a[0]; p < a[0] + 12; p++)
	{
		printf("%d ",*p);
	}
}
void main()//行指针输出二维数组 行指针为到点输出，需要定义一个int(*p)[4]来存放二维数组
{
	int a[3][4] = { {1,3,5,7},{9,11,13,15},{17,19,21,23 } };
	int (*p)[4] =a;//核心
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			printf("%d ",*(*(p+i)+j));
	}
}*/
//指针实现查询3个学生4分成绩并求平均值
/*void main()
{
	void average(float* p, int n);
	void search(float(*p)[4], int n);
	void bujige(float(*p)[4], int n);
	float score[3][4] = { {65,57,59,70},{80,87,40,81},{90,99,100,98} };
	//average(*score,12);//成绩和人数
	//(score, 2);//输入地址和学号
		bujige(score, 3);
}
void average(float *p,int n)//求平均值
{
	float* pend, sum = 0,aver;
	pend = p + n - 1;
	for (p; p < pend; p++)
	{
		sum += (*p);
	}
	aver = sum / n;
	printf("average=%5.2f\n",aver);
}
void search(float (*p)[4],int n)//求某个学生的成绩
{
	int i;
	printf("NO.%d\n",n);
	for (i = 0; i < 4; i++)
		printf("%5.2f ",p[n][i]);
}
void bujige(float(*p)[4], int n)//求不及格的成绩
{
	int i, j, flag;
	for (i = 0; i < 3; i++)
	{
		flag = 0;
		for (j = 0; j < 4; j++)
			if (p[i][j] <= 60)
			{
				printf("No.%d\n", i);
				for (j = 0; j < 4; j++)
					printf("%5.2f ", p[i][j]);
				printf("\n");
			}
	}
}*/
//指针行列地址的分辨
/*void main()
{
	int a[3][4] = { {2,4,6,8},{10,12,14,16},{18,20,22,24 }};
	int i, * ip, (*p)[4];
	p = a + 1;
	ip = p[0];
	printf("a:%d\n",a);//地址
	printf("p:%d\n", p);//地址
	printf("a+1:%d\n", a+1);//地址
	printf("p[0]:%d\n", p[0]);//地址
	printf("*p[0]:%d\n", *p[0]);//10
	printf("p[0]+1:%d\n", p[0]+1);//地址
	printf("*(p[0]+1):%d\n", *(p[0]+1));//14
}*/
//字符串的连接用指针的函数
/*void main()
{
	char* p1, * p2, s1[100], s2[100];
	printf("输入字符串:\n");
	gets(s1);
	printf("输入字符串2:\n");
	gets(s2);
	for (p1 = s1; *p1; p1++);
	for (p2 = s2; *p2; *p1++ = *p2++);
	*p1 = '\0';
	printf("%s",s1);
}*/
//字符串的连接用函数(字符数组作为形参)
/*void main()
{
	char a[20], b[20];
	gets(a);
	gets(b);
	cat(a, b);
	puts(a);
}
void cat(char a[], char b[])
{
	int aa, bb, i, j;
	aa = strlen(a);
	bb = strlen(b);
	for (i = aa, j = 0; j < bb; i++, j++)
		a[i] = b[j];
	a[i] = '\0';
}*/
//二维指针
/*void main()
{
	int a[5] = { 1,3,5,7,9 };
	int* name[5] = {&a[0],&a[1],&a[2],&a[3],&a[4]}, i;
	int** p;
	p = name;
	for (i = 0; i < 5; i++)
	{
		printf("%d ",**p);//13579
		p++;;
	}
}*/
//输入16进制数转10进制
/*void main()
{
	int trans(char hex[]);
	char a[60] = {0};
	scanf("%s",&a);
	int result;
	result = trans(a);
		printf("%d",result);
}
int trans(char hex[])
{
	int result = 0;
	int i = 0;
	while (hex[i] != '\0')
	{
		if (hex[i] >= 'a' && hex[i] <= 'z')
			result = result * 16 + hex[i] - 'a' + 10;
		else if (hex[i] >= 'A' && hex[i] <= 'Z')
			result = result * 16 + hex[i] - 'A' + 10;
		else result = result * 16 + hex[i] - '0';
		i++;
	}
	return result;
}*/
//指针实现3个整数小到大输出(排序题)
/*void main()
{
	int a[5] = { 0 };
	int i;
	for (i = 0; i < 3; i++)
		scanf("%d", &a[i]);
	void sort(int a[], int n);
	sort(a, 3);
	
}
void sort(int a[], int n)
{
	int i,j,temp;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				temp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < n; i++)
	{
		printf("%d ",a[i]);
	}
}
*/
//指针实现3个字符串小到大输出
/*void main()
{
	char sort(char a[], char b[]);
	char a[30] = {"china"  };
	char b[30] = {"japan"};
	char c[30] = {"bmerican"};
	char* n1, * n2, * n3,*t;
	n1 = a; n2 = b; n3 = c;
	sort(a, b);
	sort(a, c);
	sort(b, c);
	printf("%s\n%s\n%s\n",a,b,c);

}
char sort(char a[], char b[])
{
	char c[100];
	if (strcmp(a, b) > 0)//if(a>b)
	{
		strcpy(c, a);    //c=a;
		strcpy(a, b);    //a=b;
		strcpy(b, c);    //b=c;
	}
}*/
//输入10个数，max放最后，min给第一个;
/*int main() {
	int a[5] = { 3,1,2,5,4};
	int min = a[0];
	int max = a[0];
	int minxia = 0;
	int maxxia = 0;
	int i,t;
	for (i = 1; i < 5; i++) 
	{
		if (a[i] < min)
		{
			min = a[i];
			minxia = i;
		}
		if (a[i] > max)
		{
			max = a[i];
			maxxia = i;
		}
	}
	for (i = 0; i < 5; i++)
	{
		if (i == 0)
		{
			t = a[0];
			a[0] = a[minxia];
			a[minxia] = t;
		}
		if (i == 4)
		{
			t = a[4];
			a[4] = a[maxxia];
			a[maxxia] = t;
		}
	}
	for (int i = 0; i < 5; i++)
	{
		printf("%d ",a[i]);
	}
}*/
/*int main()//升级版
{
	int a[] = { 3,1,2,5,4,3,2,6,9,10 };
	int count=sizeof(a)/sizeof(a[0]);
	printf("数组元素个数:%d",count);
	printf("\n");
	int min = a[0];
	int max = a[0];
	int minxia = 0;
	int maxxia = 0;
	int i, t;
	for (i = 1; i < count; i++)
	{
		if (a[i] < min)
		{
			min = a[i];
			minxia = i;
		}
		if (a[i] > max)
		{
			max = a[i];
			maxxia = i;
		}
	}
	for (i = 0; i < count; i++)
	{
		if (i == 0)
		{
			t = a[0];
			a[0] = a[minxia];
			a[minxia] = t;
		}
		if (i == count-1)
		{
			t = a[count-1];
			a[count-1] = a[maxxia];
			a[maxxia] = t;
		}
	}
	for (int i = 0; i < count; i++)
	{
		printf("%d ", a[i]);
	}
}*/
//函数调用求1的1次方到5的5次方
/*void main()
{
	int fang(int n);
	int n;
	printf("输入要到n方的数字:\n");
	scanf("%d",&n);
	int sum = 0;
	for (int i = 1; i <= n; i++)
	{
		sum += fang(i);
	}
	printf("1的1次方加到输入的n次方位:\n%d",sum);
}
int fang(int n)//求n的n方
{
	int i,count=1;
	for (i = 0; i < n; i++)
	{
		count = count * n;
	}
	//printf("%d",count);
	return count;
}*/
//1-3报数
/*void main()
{
	int count;
	int arr[128];
	int digit = 1;
	printf("输入总人数:");
	scanf("%d",&count);
	int remain = count;
	while (remain > 1)
	{
		for (int i = 1; i <= count; i++)
		{
			if (arr[i] == 3)
				continue;
			arr[i] = digit;
			if (digit == 3)
			{
				digit = 0;
				remain--;
			}
			digit++;
		}
	}
	for (int i = 1; i <= count; i++)
	{
		if (arr[i] != 3)
		{
			printf("剩余的人是%d号\n",i);
			break;
		}
	}
}*/
//结构体变量计算该日是一年的第几天
/*struct data
{
	int year;
	int month;
	int day;
};
int main()
{
	int days[] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };
	struct data d;
	printf("输入数据\n");
	scanf("%d%d%d",&d.year,&d.month,&d.day);
	int day = 0;
	for (int i = 1; i <= d.month; i++)
	{
		day += days[i];
	}
	if ((d.year % 4 == 0) && (d.year % 100 != 0) || (d.year % 400 == 0))
	{
		if (d.month > 2)
			++day;
	}
	printf("第%d天",day);
}*/
//函数结构体编写函数print
/*struct student
{
	int num;
	char name[20];
	int score[3];
};
void print(struct student *arr,int sum)//输出
{
	for(int i=0;i<sum;i++)
	printf("%d %s %d %d %d\n",arr[i].num,arr[i].name,arr[i].score[0],arr[i].score[1],arr[i].score[2]);
}
void main()
{
	struct student arr[3];
	void print(struct student* arr, int sum);
	for (int i = 0; i < 3; i++)
	{
		scanf("%d %s %d %d %d",&arr[i].num,arr[i].name,&arr[i].score[0],&arr[i].score[1],&arr[i].score[2]);
	}
	print(arr, 3);
}*/
//10个学生,学生数据包括学号姓名3门课程的成绩,输入10个学生的成绩,输出3门课程的总平均成绩,以及最高分学生的数据
/*#define Len 20
#define STUCNT 3
typedef struct student
{
	int num;
	char name[Len];
	int score[3];
	float avg;
}student;

int main()
{
	student arr[STUCNT];
	int maxI;
	float maxavg = 0.0;
	printf("输入%d个学生数据:学号,姓名,成绩1,成绩2,成绩3\n",STUCNT);
	for (int i = 0; i < STUCNT; i++)
	{
		float avg = 0.0;
		scanf("%d %s",&arr[i].num,arr[i].name);
		for (int j = 0; j < 3; j++)
		{
			scanf("%d",&arr[i].score[j]);
			avg += arr[i].score[j];
		}
		avg /= 3;
		arr[i].avg = avg;
		if (avg > maxavg)
		{
			maxavg = avg;
			maxI = i;
		}
	}
	printf("学号,姓名,成绩1,成绩2,成绩3,平均成绩\n");
	for (int i = 0; i < STUCNT; i++)
	{
		printf("%d %s ",arr[i].num,arr[i].name);
		for (int j = 0; j < 3; j++)
		{
			printf("%d ",arr[i].score[j]);
		}
		printf("%f\n",arr[i].avg);
	}
	printf("平均成绩最高的学生\n");
	printf("%d %s %d %d %d %f\n",arr[maxI].num,arr[maxI].name,arr[maxI].score[0],arr[maxI].score[1],arr[maxI].score[2],arr[maxI].avg);
}*/
/*struct student//自编
{
	int num;
	char name[20];
	int  score[3];
	float avg;
}a[3];
void main()
{
	int i,j,maxi;
	float maxavg = 0;
	for (i = 0; i < 3; i++)
	{
		float avg = 0;
		scanf("%d %s ",&a[i].num,&a[i].name);
		for (j = 0; j < 3; j++)
		{
			scanf("%d",&a[i].score[j]);
			avg += a[i].score[j];
		}
		avg /= 3;
		a[i].avg = avg;//给平均数
		if (avg > maxavg)//求平均数和第I项
		{
			maxavg = avg;
			maxi = i;
		}
	}
	for (i = 0; i < 3; i++)
	{
		printf("%d %s ", a[i].num, a[i].name);
		for (j = 0; j < 3; j++)
		{
			printf("%d ",a[i].score[j]);
		}
		printf("%.2f ",a[i].avg);
		printf("\n");
	}printf("输出最高分的学生信息\n");
		printf("%d %s %d %d %d %.2f\n", a[maxi].num, a[maxi].name, a[maxi].score[0], a[maxi].score[1], a[maxi].score[2], a[maxi].avg);
}*/
//随机输入5个数存入一个数组中,输出数组的最小值,确定最小值的下标的操作在fun函数中实现
/*int fun(int a[], int num)
{
	int i,min = 0;
	for (i = 1; i < 5; i++)
	{
		if (a[min] > a[i])
			min = i;
	}
	return min;
}
void main()
{
	int a[5],i;
	for (i = 0; i < 5; i++)
	{
		scanf("%d",&a[i]);
	}
	int y;
	y = fun(a, 5);
	printf("%d",a[y]);
}*/
//4x4的二维数组,求对角线的元素值之和,求转置
/*void main()
{
	int a[4][4] = { 1,2,3,5,5,6,7,8,9,10,11,12,13,14,15,16 };
	int i, j;
	printf("原数组为:\n");
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d ",a[i][j]);
		}
		printf("\n");
	}
	printf("---------------->\n");
	//求元素值的和
	int sum = 0,xie=0;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (i == j)
				sum += a[i][i];
		}
		xie += a[i][3 - i];
	}
	printf("主对角线：%d,斜对角线：%d\n",sum,xie);
	//转置
	int b[4][4];
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			b[j][i] = a[i][j];
		}
	}
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d",b[i][j]);
		}
		printf("\n");
	}
}*/
//一个函数，输出整数n的所有素数因子
/*void main()
{
	int n;
	void print_prime(int n);
	scanf("%d", &n);
	print_prime(n);
}
void print_prime(int n)//
{
	int i = 2;
	int prime(int m);
	for (i = 2; i <= n; i++)
	{
		if (prime(i) == 1)
			if (n % i == 0)
				printf("%d\n", i);
	}
}
int prime(int m)//判断素数返回1或0
{
	int i;
	for (i = 2; i <= sqrt(m); i++)
		if ((m % i) == 0)
			return 0;
	return 1;
}*/
/*void main() {//输入60 2235
	int n, i;
	scanf("%d", &n);
	i = 2;
	while (1 < n) {
		if (n % i == 0) {
			printf("%d\t", i);
			n = n / i;
		}
		else {
			i++;
		}
	}
}
*/
//一个函数实现找出一个大于一个整数且紧随这个整数的素数
/*int fun(int n)
{
	int a, i;
	for (i = n;; i++)
	{
		for (a = 2; a < i; a++)
		{
			if (i % a == 0)
				break;
		}
		if (i == a)
		{
			printf("%d", i);		
			break;}

	}
}
void main()
{
	int n;
	scanf("%d",&n);
	fun(n);
}*/
//指向指针的指针
/*void main()
{
	int b[2][3] = { 1,3,5,7,9,11 };
	int* a[2][3];
	int i, j;
	int** p, m;
	for (i = 0; i < 2; i++)
		for (j = 0; j < 3; j++)
			a[i][j] = *(b + i) + j;
	p = a[0];
	for (m = 0; m < 6; m++)
	{
		printf("%4d", **p);
		p++;
	}
}*/
/*void main()
{
	int num[26] = { 0 };
	int i, j, k;
	char c;
	while ((c = getchar()) != '\n')
	{
		if (c >= 'A' && c <= 'Z')
		{
			num[c - 65]++;
		}
	}
	for (i = 0; i < 26; i++)
	{
		printf("%c:%d\n",i+65,num[i]);
	}
}*/
//错题
/*void main()//abc#ABC#xyz
{
	int i, k = 0;
	char a[80] = "abcABCxyz", b[80], * p;
	p = a;
	while (*p)
	{
		for (i = 1; i <= 3 && *p; p++, k++, i++)
			b[k] = *p;
		if (*p)
		{
			b[k] = '#';
			k++;
		}
	}
	b[k] = '\0';
	puts(b);
}*/
//计算2+2*2+2*2*2+。。。
/*void main()
{
	int num, i, n, item = 1, sum = 0;
	scanf("%d%d",&n,&num);
	{
		for (i = 1; i <= n; i++)
		{
			item = num*item;
			sum += item;
		}
	}
	printf("%d",sum);
}*/
//错题注意for()条件
/*void main()
{
	int a[10] = { 1,3,2,4,5,6,7,8,9,10 };
	int* p, * q, temp;
	for (p = a, q = a+9; p < q; p++,q--)
	{
		temp = *p;
		*p = *q;
		*q = temp;
	}
	for (int i = 0; i < 10; i++)
		printf("%d,",a[i]);
	printf("\n");
}*/
//找出min值
//易错点void 不能赋值给其他变量
//要用指针赋值
/*void  fun(int a[], int n, int* x)
{
	int i, j = 0;
	for (i = 1; i < n; i++)
		if (a[j] > a[i])
			j = i;
			*x=a[j];//本题采用的是赋值,易错
		//return a[i];//不能用a[i]易错
	
}
void main()
{
	int i, a[10], k;
	for (i = 0; i < 10; i++)
		scanf("%d",&a[i]);
	fun(a,10,&k) ;
	printf("%d",k);
}
*/
//求个数
/*void main()
{
	int x, n=0;
	scanf("%d", &x);
	while (x)
	{
		x = x / 10; n++;
	}
	printf("%d",n);
}*/
//字符串排序
/*void func(char** str);
int main(void)
{
	int i;
	char s[6][1024], * pStr[6];

	for (i = 0; i < 6; i++)
	{
		gets(s[i]);
		pStr[i] = s[i];
	}


	func(pStr);

	//输出排序后的结果
	for (i = 0; i < 6; i++)
	{

		puts(pStr[i]);

	}

	return 0;
}
void func(char** str)
{
	int i, j;
	char* temp;

	for (i = 0; i < 5; i++)
	{
		for (j = i + 1; j < 6; j++)
		{
			if (
				strcmp(str[i], str[j]) > 0
				)
			{
				temp = *(str + j);
				*(str + j) = *(str + i);
				*(str + i) = temp;
			}
		}
	}
}*/
#define _CRT_SECURE_NO_WARNINGS 
//tips t自动更新+2 ;
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<time.h>
//t1 鸡兔同笼,头35,脚94,鸡兔各多少
/*void main()
{
	int tou = 35, tui = 94, ji, tu;
	for (ji = 1; ji <= 35; ji++)
	{
		for (tu = 1; tu <= 35; tu++)
		{
			if ((ji + tu == 35) && (ji * 2 + tu * 4 == 94))
				printf("cock:%d，rabbit:%d",ji,tu);
		}
	}
}*/
/*void main()
{
	int rabbit, chicken;
	for (rabbit = 1; rabbit <= 23; rabbit++)
	{
		chicken = 35 - rabbit;
		if (rabbit * 4 + chicken * 2 == 94)
			printf("r=%d,c=%d\n", rabbit, chicken);
	}
}*/
//t2键盘输入一串字符,遇到#结束,到一维数组,统计大写和小写的字母的个数
/*void main()
{
	char a[100];
	int i,n=0;
	int da=0, xiao = 0;
	for (i = 0; i <100; i++)
	{
		n++;
		scanf("%c",&a[i]);
		if (a[i] == '#')
			break;
		
	}
	for (i = 0; i < n; i++)
	{
		if (a[i] >= 'a' && a[i] <= 'z')
			xiao++;
		if (a[i] >= 'A' && a[i] <= 'Z')
			da++;
	}
	printf("大写:%d，小写:%d",da,xiao);
}*/
/*void main()
{
	char c;
	int len = 0;
	while ((c = getchar()) != '#')
		if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') len++;
	printf("字母个数为%d", len);
}*/
//t3输入数字,判断是否是素数,是素数输出x是素数,反之输出x非素数
/*void main()
{
	int fun(int x);
	int x;
	printf("请输入n的值:\n");
	scanf("%d",&x);
	fun(x);
}
int fun(int x)
{
	int i;
	for(i=2;i<x;i++)
	{
		if (x % i == 0)
			
			break;
	}
	if (i == x)
		printf("%d是素数\n",x);
	else
		printf("%d非素数",x);
}*/
//t4计算,1,-2,3,-4,5,-6,....的n项和,主函数输入n的值
/*void main()
{
	int n;
	printf("请输入尾数:\n");
	scanf("%d",&n);
	printf("和为%d",fun(n));
}
int fun(int n)
{
	int sign = 1;
	int i,sum=0,t=1;
	for (i = 1; i <= n; i++)
	{
		t = i * sign;
		sum += t;
		sign = -1 * sign;
	}
	return sum;
}*/
//t51！+...+5!的和
/*void main()
{
	int n,sum=0;
	scanf("%d",&n);
	for (int i = 1; i <= n; i++)
	{
		sum += fun(i);
	}
	printf("%d",sum);
}
int fun(int x)//求阶乘
{
	int i,count=1;
	for (i = x; i >=1; i--)
	{
		count = i*count;
	}
	return count;
}*/
//t6pai/4=1-1/3+1/5-1/7+....求pai值,到绝对值小于10的-6次方为止
/*void main()
{
	float  fenmu = 1, term = 1,sum=0,sign=1;
	term = 1 / fenmu;
	while (fabs(term) >= 1e-5)
	{
		sum += term;
		sign = -sign;
		fenmu = fenmu + 2;
		term = 1 / fenmu*sign;
	}
	sum = 4 * sum;
	printf("%f",sum);
}*/
//t7求e^x的近似值,1+x/1!+x^2/2!+。。。。x^n/n!，到10的-6次方为止
/*void main()
{
	float x;
	scanf("%f",&x);
	float term, fz=x, fm=1,i=1,sum=0;
	term = fz / fm;
	while (fabs(fz / fm) >= 1e-6)
	{
		sum += term;
		fz = fz * x;
		i++;
		fm = fm * i;
		term = fz / fm;
	}
	printf("%f",sum);
}*/
//t8输入x,计算1-x+x*x/2!-x*x*x/3!的和,追后绝对值小于10的-6次方
/*void main()
{
	float sum = 1, item, sign = -1, fm, x, fz, i = 1;
	scanf("%f", &x);
	fz = x, fm = 1;
	item = fz / fm * sign;
	while (fabs(item) >= 1e-6)
	{
		sum += item;
		sign = -sign;
		fz = fz * x;
		i++, fm = fm * i;
		item = fz / fm * sign;
	}
	printf("%f", sum);
}*/
//t9计算1-？的累加正好大于5050
/*void main()
{
	int i,sum=0,k=0;
	for (i = 1;; i++)
	{
		sum += i;
		if(sum>5050)
		break;
		k++;
	}
	printf("%d",k);//100
}*/
//t10一维整形数组,大小为10，键盘输入数据,求max并输出
/*void main()
{
	int a[10],max;
	int i;
	for (i = 0; i < 10; i++)
	{
		scanf("%d",&a[i]);
	}
	max = a[0];
	for (i = 1; i <= 9; i++)
	{
		if (max < a[i])
			max = a[i];
	}
	printf("max:%d",max);
}*/
//t11一维数组,大小为10,通过键盘输入数据,求平均值输出
/*void  main()
{
	float a[10];
	int i;
	printf("请输入10个数:\n");
	for (i = 0; i < 10; i++)
	{
		scanf("%f",&a[i]);
	}
	float sum = 0;
	for (i = 0; i < 10; i++)
	{
		sum += a[i];
	}
	sum=1.0*sum / 10;
	printf("%.2f",sum);
}*/
//t12一维数组大小为10,键盘输入数据,升序后输出//1,2,3,4
/*void main()
{
	int a[10];
	int i;
	for (i = 0; i < 10; i++)
	{
		scanf("%d", &a[i]);
	}
	int j, t;
	//选择排序
	for (i = 0; i < 9; i++)
	{
		for (j = i + 1; j < 10; j++)
		{
			if (a[i] > a[j])
			{
				t = a[i];
				a[i] = a[j];
				a[j] = t;
			}
		}
	}
	for (i = 0; i < 10; i++)
		printf("%d",a[i]);
}
*/
//t13一维数组大小为10,键盘输入数据,逆序存放并输出
/*void main()
{
	int a[10],b[10];
	int i;
	for (i = 0; i < 10; i++)
	{
		scanf("%d", &a[i]);
	}
	for (i = 0; i <10; i++)
	{
		b[9 - i] = a[i];
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d",b[i]);
	}
}*/
//t14 键盘录入一串字符,求串长
/*void main()
{
	char a[100];
	int num = 0;
	gets(a);
	int i = 0;
	while (a[i++] != '\0')
	{
		num++;
	}
	printf("长度:%d",num);
}*/
//t15 在已有格式上要求加入flag标志位,冒泡排序;
/*void main()
{
	int a[10], i, j, t, flag = 1;
	for (i = 0; i < 10; i++)
		scanf("%d", a + i);
	for (i = 1; flag && i < 10; i++)
	{
		flag = 0;
		for (j = 0; j < 10 - i; j++)
			if (a[j] > a[j + 1])
			{
				t = a[j]; a[j] = a[j + 1]; a[j + 1] = t;
				flag = 1;
			}
	}
	for (i = 0; i < 10; i++)
		printf("%5d", a[i]);
	printf("\n");
}*/
//t16 编程求字符串的长度
/*void main()
{
	char ch;
	int num=0;
	while ((ch = getchar()) != '\n')
	{
		num++;
	}
	printf("%d",num);
}*/
//t17 编写程序,把字符串a赋值为字符串b,要求用数组完成
/*void main()//不接受键盘输入
{
	char a[40] = {"I love china"};
	char b[20] = {"china is wanshui"};
	//printf("请输入字符串a和字符串b\n");
	int i,j;
	for (i=0,j = 0; b[j] != '\0';i++, j++)
	{
		a[i] = b[j];
	}
	a[i] = '\0';
	puts(a);
}*/
/*void main()//允许键盘输入
{
	char a[40];
	char b[20];
	printf("请输入a和b\n");
	gets(a);
	gets(b);
	int i, j;
	for (i = 0, j = 0; b[j] != '\0'; i++, j++)
	{
		a[i] = b[j];
	}
	a[i] = '\0';
	puts(a);
}*/
//t18 编写字符串a复制为字符串b,要求用指针
/*void main()
{
	char a[40] ;
	char b[20] ;
	//printf("请输入字符串a和字符串b\n");
	gets(a);
	gets(b);
	char* p, * q;
	p = &a;
	q = &b;
	int i, j;
	for (i = 0, j = 0; *(q+j) != '\0'; i++, j++)
	{
		*(p+i) = *(q + j);
	}
	*(p+i) = '\0';
	puts(a);
}*/
//t19 函数调用实现字符串的复制,要求使用指针变量实现
/*void main()
{
	char fun(char* p, char* q);
	char a[40];
	char b[20];
	printf("请输入字符串a和字符串b\n");
	gets(a);
	gets(b);
	char* p, * q;
	p = &a, q = &b;
	fun(p, q);

}
char fun(char* p, char* q)
{
	int i, j;
	for (i = 0, j = 0; *(q + j) != '\0'; i++, j++)
	{
		*(p + i) = *(q + j);
	}
	*(p + i) = '\0';
	puts(p);
}*/
//t20 字符串连接用字符数组编程
/*void main()//接受键盘输入
{
	char a[40] = { "I love china" };
	char b[20] = { "china is wanshui" };
	//printf("请输入字符串a和字符串b\n");
	int i, j;
	for (i = 0; a[i] != '\0'; i++);
	for (j = 0; b[j] != '\0'; i++, j++)
	{
		a[i] = b[j];
	}
	a[i] = '\0';
	puts(a);
}
*/
/*void main()//接受键盘输入
{
	char a[40] ;
	char b[20] ;
	printf("请输入字符串a和字符串b\n");
	gets(a);
	gets(b);
	int i, j;
	for (i = 0; a[i] != '\0'; i++);
	for (j = 0; b[j] != '\0'; i++, j++)
	{
		a[i] = b[j];
	}
	a[i] = '\0';
	puts(a);
}
*/
//t21 字符串连接用指针编程
/*void main()
{
	char a[40] ;
	char b[20] ;
	gets(a);
	gets(b);
	int i, j;
	char* s, * p;
	s = a;
	p = b;
	for ( i = 0; *(s+i) != '\0'; i++);
	for ( j = 0; *(p+j) != '\0'; i++,j++)
	{
		*(s+i) = *(p + j);
	}
	*(s+i) = '\0';
	puts(s);
}*/
//t22指针方式编写函数mystrcmp(char *,char *)，实现字符串的比较
/*void main()
{
	int mystrcmp(char* s, char* f);
	char a[20] = { "ABCD" };
	char b[20] = { "ABCD" };
	char* s, * f;
	s = a; f = b;
	//mystrcmp(s, f);
	if (mystrcmp(s, f) > 0)
		printf("a>b");
	else if (mystrcmp(s, f) == 0)
		printf("a=b");
	else
		printf("a<b");

}
//char mystrcmp(char* s, char* f)
//{
//	if (strcmp(s, f) > 0)
//		printf("a>b\n");
//	else if (strcmp(s, f) == 0)
		//printf("a=b\n");
	//else printf("a<b\n");
//}
int  mystrcmp(char* s, char* f)
{
	while (*s == *f)
	{
		if (*s == '\0')
			return 0;
		s++; f++;
	}
	return (*s - *f);
}*/
//t23 fib求第n项的值,函数调用fib输出前20项的和,每5行显示,要求递归
/*void main()
{
	int fib(int a[20],int n);
	int a[20] = {1,1};
	for (int i = 0; i < 20; i++)
	{
		printf("%d,",fib(a,i));
	}

}
int fib(int a[],int n)
{
	
	if (n == 1 || n == 0)
		return ;
	else 
		return a[n]=a[n-1]+a[n-2];
}*/
//t24 输入100个学生的百分制成绩,输出相应的五分制成绩,90分A 80-89B 70-79C 60-69D 60以下E，要求if实现
/*void main()
{
	int i;
	char student[100];
	for (i = 0; i < 100; i++)
	{
		student[i] = rand() % 100 + 1;
	}
	for(i=0;i<100;i++)
	{
		printf("%d:",student[i]);
		if (student[i] >= 90)
			printf("A\n");
		else if (student[i] >= 80)
			printf("B\n");
		else if (student[i] >= 70)
			printf("C\n");
		else if (student[i] >= 60)
			printf("D\n");
		else
			printf("E\n");
	}
}*/
//t25 输入100个学生的百分制成绩,输出相应的五分制成绩,90分A 80-89B 70-79C 60-69D 60以下E，要求switch实现
/*void main()
{
	int i;
	char student[100];
	for (i = 0; i < 100; i++)
	{
		student[i] = rand() % 100 + 1;
	}
	for (i = 0; i < 100; i++)
	{
		printf("%2d:", student[i]);
		if(student[i] < 0 || student[i]>100) printf("输入成绩错误！\n");
		else 
		switch (student[i] / 10)
		{
		case 10:
		case 9:printf("A\n"); break;
		case 8:printf("B\n"); break;
		case 7:printf("C\n"); break;
		case 6:printf("D\n"); break;
		default:printf("E\n"); break;
		}
	}
}*/
//t26 键盘输入4名学生的4门课程成绩,求每个学生的平均成绩,分别统计不及格人数,输出格式 张三平均分 xx.xx，不及格门数：2
/*#define N 4
void main()
{
	struct student
	{
		char name[20];
		int yuwen;
		int shuxue;
		int yingyu;
		int computer;
	}a[N] = { {"louis",69,80,30,39},
	{"peter",10,90,23,78},{"stevive",90,78,78,90},{"motor",67,78,56,90}};
	//如果你想接受键盘输入多少人;就把N定义成多少人
	//输入语句
	int i,average,count=0;
	printf("请输入名字 语文 数学 英语 计算机的成绩:\n");
	for (i = 0; i < N; i++)
	{
		scanf("%s%d%d%d%d",a[i].name,&a[i].yuwen,&a[i].shuxue,&a[i].yingyu,&a[i].computer);
	}
	for (i = 0; i < N; i++)
	{
		count = 0;
		average = a[i].yuwen + a[i].shuxue + a[i].yingyu + a[i].computer;
		average = average / N;
		printf("%s的平均成绩%d   ",a[i].name,average);
		if (a[i].yingyu <= 60)
			count++;
		if (a[i].yuwen <= 60)
			count++;
		if (a[i].shuxue <= 60)
			count++;
		if (a[i].computer <= 60)
			count++;
		printf("不及格门数:%d\n",count);
	}
}*/
//t27 判断完数,数字等于它的因子之和
/*void main()
{
	int n;
	scanf("%d",&n);
	int i,sum=0;
	for (i = 1; i < n; i++)
	{
		if (n % i == 0)
			sum += i;
	}
	if (sum == n)
		printf("%d是完数", sum);
	else
		printf("%d不是完数",sum);
}*/
//t28 判断完全平方数
/*void main()
{
	int n,i,flag=0;
	scanf("%d",&n);
	for (i = 1; i <= n / 2; i++)
	{
		if (i * i == n)
			printf("%d=%d*%d", n, i, i);
		    
	}	
}*/
//t29 求两个正整数的最大公约数
/*void main()
{
	int n, m,t;
	scanf("%d%d",& n,& m);
	while (m != 0)
	{
		t = n % m;
		n = m;
		m = t;
	}
	printf("%d",n);
	//最小公倍是原本的n*m的乘积/最小公倍数
}*/
//t30 有一批图书,书信息包括书名name,作者author,价格price,三个数据① 完成数据查询,输入书名有书的话输出作者,没有的话输出"无此书";②按价格进行排序
/*void main()
{
	struct tushu
	{
		char name[20];
		char author[30];
		int price;
	}a[5] = { {"海的女儿","未知",35},{"算法导论","Yes",15},{"C语言","浩强",58},{"数据结构","演示",34},"雨爱","sda",56};//为方便出结果就不一一输入
	int i;
	//查询
	char s[20];
	printf("请输入书名:\n");
	scanf("%s",s);
	int flag = 0;
	for (i = 0; i < 5; i++)
	{
		if (strcmp(s, a[i].name) == 0)
		{
			flag = 1;
			break;
		}
		//printf("%s", a[i].author);
		else
			//printf("无此书");
			flag = 0;
	}
	if(flag)
		printf("%s的作者是%5s\n",s, a[i].author);
	else
		printf("  无此书\n");
	//排序升序
	int j;
	struct tushu temp;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4-i; j++)
		{
			if (a[j].price > a[j + 1].price)
			{
				temp = a[j];
				a[j] = a[j+1];
				a[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
		printf("作者:%5s 书名：%5s 价格：%5d\n",a[i].author,a[i].name,a[i].price);

}*/
//t31 打印两种直角三角形 1 2 3 4;1 3 5 7
/*void main()
{
	int i, j;
	for (i = 1; i <= 4; i++)
	{
		for(j=1;j<=i;j++)
		{
			printf("*");
		}
		printf("\n");
	}
}*/
/*void main()
{
	int i, j;
	for (i = 1; i <= 4; i++)
	{
		for (j = 1; j <= 2 * i - 1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
}*/
//t32 打印乘法表
/*void main()
{
	int i, j;
	for (i = 1; i < 9; i++)
	{
		for(j=1;j<=i;j++)
		{
			printf("%d*%d=%d  ",j,i,i*j);
		}
		printf("\n");
	}
}*/
//t33 编写strlength(),返回参数的长度;strlen函数不计算\0
/*void main()
{
	int strlrngth(char a[]);
	char c[50];
	gets(c);
	printf("%d",strlrngth(c));

}
int strlrngth(char a[])
{
	int i;
	int num = 0;
	for (i = 0;; i++)
	{
		if (a[i] == '\0')
		{
			break;
		}
		num++;
	}
	return num;
}*/
//t34 编写strlength(),返回参数的长度;strlen函数不计算\0;递归函数
/*int strlength(char* a)
{
	int b = 0;
	if (*a == '\0')
		b = 0;
	else b = 1 + strlength(a + 1);
	return b;
}
void main()
{
	char a[50];
	int k=0;
	gets(a);
	k = strlength(a);
	printf("%d",k);
}*/
//t35 第5个人多大
/*void main()
{
	int fun(int n);
	int i = 5;
	printf("第%d个年龄:%d",i,fun(i));
}
int fun(int n)
{
	int age = 0;
	if (n == 1)
		age = 10;
	else
		age = 2 + fun(n-1);
	return age;
}*/
//t36 两个数组a和b比较a大于b的个数多还是b大于a的数组多,
/*void main()
{
	int large(int x, int y);
	int a[10], b[10], i, n = 0, m = 0, k = 0;
	for (i = 0; i < 10; i++) scanf("%d", &a[i]);
	for (i = 0; i < 10; i++) scanf("%d", &b[i]);
	for (i = 0; i < 10; i++)
	{
		if (large(a[i], b[i]) == 1) n++;
		else if (large(a[i], b[i]) == 0) m++;
		else k++;
	}
	printf("a[i]>b[i] %d times\na[i]=b[i] %d times\na[i]<b[i] %d times\n", n, m, k);
	if (n > k) printf("array a is larger than array b\n");
	else if (n < k) printf("array a is smaller than array b\n");
	else printf("array a is equal to array b\n");
}
int large(int x, int y)
{
	int flag;
	if (x > y)flag = 1;
	else if (x < y)flag = -1;
	else flag = 0;
	return(flag);
}*/
//t37 有一个一维数组score,内放10个学生的成绩,求平均成绩要求平均值用子函数
/*void main()
{
	float fun(int score[]);
	int score[10];
	int i;
	for (i = 0; i < 10; i++)
	{
		scanf("%d",&score[i]);
	}
	fun(score);
	//printf("平均成绩是%f",fun(score));
}
float fun(int score[])
{
	float average = 0;
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		average = average + score[i];
	}
	average = 1.0*average / 10;
	printf("平均成绩是%f", average);
}*/
//t38 有3个字符串,要求找出其中的最大值
/*void main()
{
	char a[3][20];
	int i;
	for (i = 0; i < 3; i++)
	{
		gets(a[i]);
	}
	char b[20];
	if (strcmp(a[0], a[1]) > 0)
		strcpy(b, a[0]);
	else strcpy(b, a[1]);
	if (strcmp(b, a[2]) > 0)
		puts(b);
	else
	{
		strcpy(b, a[2]);
		puts(b);
	}
}*/
//39 若干字符串按字母顺序进行排放
/*char sort(char* name[], int n)
{
	//n=5
	int i, j;
	char* temp;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4 - i; j++)
		{
			if (strcmp(name[j], name[j + 1]) > 0)//第一项大于第二项，排序后升序
			{
				temp = name[j];//地址传递
				name[j] = name[j + 1];
				name[j + 1] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
	{
		printf("%s\n",name[i]);
	}
}
void main()
{
	char* name[] = { "Follow me","BASIC","Great Wall","FORTRAN","Computer design" };
	int i;
	sort(name, 5);
}*/
/*void main()
{
	char c[5][20] = {"Follow me","BASIC","Great Wall","FORTRAN","Computer design"};
	int i;
	char temp[20];
	for (int i = 0; i < 5 - 1; i++)//循环次数
	{
		for (int j = i + 1; j < 5; j++)//选择排序
		{
			if (strcmp(c[i], c[j]) > 0)//c[i]<c[j]时交换
			{
				strcpy(temp, c[i]);//字符串传递
				strcpy(c[i], c[j]);
				strcpy(c[j], temp);
			}
		}
	}
	for (int i = 0; i < 5; i++)
	{
		puts(c[i]);
	}
}*/
//t40 一步跨2阶,剩下1阶梯,一步跨3阶,剩下2阶,一步跨5阶梯,剩下4阶梯,一步跨6阶,剩5阶,一步跨7阶,无剩余,问有几阶梯 119节
/*void main()
{
	int i;
	for (i = 0;; i++)
	{
		if ((i % 2 == 1) && (i % 3 == 2) && (i % 5 == 4) && (i % 6 == 5) && (i % 7 == 0))
		{
			printf("阶梯:%d\n", i);
			break;
		}
	}
}*/
//t41 运输公司分段函数问题//f=p*w*s*(1-d)
/*void main()
{
	//路程s 货物重w,距离s,折扣d,总运费f,运费p 答案
	int c, s;
	float p, w, d, f;
	scanf("%f%f%d", &p, &w, &s);
	if(s >= 3000) c = 12;
else c = s / 250;
	switch (c) {
	case 0:d = 0; break;
	case 1:d = 2; break;
	case 2:case 3:d = 5; break;
	case 4:case 5:case 6:case 7:d = 8; break;
	case 8:case 9:case 10:
	case 11:d = 10; break;
	case 12:d = 15; break;
	}
f = p * w * s * (1 - d / 100.0);
printf("freight=%10.2f\n", f);
}*/
/*void main()
{
	//总运费count,运费fee 路程s 货物重w,;
	//f=p*w*s*(1-d)
	double s, count,fee,w;
	printf("请输入里程数，运费重量");
	scanf("%lf%lf%lf", &s,&fee,&w);
	if (s <250)
	{
		count = s*fee*w * (1 );
		printf("奖金为%.3lf\n", count);
	}
	else if (s >= 250 && s < 500)
	{
		count = s * fee * w * (1-0.02);
		printf("奖金为%.3lf\n", count);
	}
	else if (s >=500 && s <1000)
	{
		count = s * fee * w * (1-0.05);
		printf("奖金为%.3lf\n", count);
	}
	else if (s >= 10000 && s < 2000)
	{
		count = s * fee * w * (1-0.08);
		printf("奖金为%.3lf\n", count);
	}
	else if (s >=2000 && s <3000)
	{
		count = s * fee * w * (1-0.1);
		printf("奖金为%.3lf\n", count);
	}
	else if (s >= 3000)
	{
		count = s * fee * w * (1-0.15);
		printf("奖金为%.3lf\n", count);
	}
}*/
//t42 求a*x^2+bx+c=0
/*void main()
{
	
	int a, b, c;
	printf("请输入a,b,c的值:\n");
	scanf("%d%d%d",&a,&b,&c);
	//a=0;
	if (a == 0)
		printf("不是二次方程\n");
	else
	{
		int count1, count2;
		if ((b * b - 4 * a * c) == 0)
		{
			count1 = ( - b - sqrt(b * b - 4 * a * c)) / 2;
			printf("x:%d\n",count1);
		}
		else if ((b * b - 4 * a * c) > 0)
		{
			count1 = (-b - sqrt(b * b - 4 * a * c)) / 2;
			count2 = (-b + sqrt(b * b - 4 * a * c)) / 2;;
			printf("x1:%d,x2:%d\n", count1,count2);
		}

	}
}*/
#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<time.h>
//判断素数
/*void main()
{
	int a,b;
	for (a = 1; a <= 10; a++)
	{
		for (b = 2; b <= a - 1; b++)
		{
			if (a % b == 0)
				break;
		}
		if (b==a)
			printf("%3d",a);
	}
}*/
//关于数组的复制
/*void main()
{
	int  a[10], b[10] = {1,2,3,4,5,6,7,8,9,10};
	for (int i = 0; i <= 9; i++)
	{
		a[i] = b[i];
		printf("%d",a[i]);
	}
	//两端排序
	int i, a[10] = {1,2,3,4,5,6,7,8,9,10}, t;
	for (i = 0; i < 5; i++)
	{
		t = a[i];
		a[i] = a[9 - i];
		a[9 - i] = t;
	}
	for (i = 0; i < 10; i++)
		printf("%d\t",a[i]);
	//一维数组的最大值和下标
	int i, a[10] = {1,2,3,5,6,7,9,10,0};
	int max = a[0],t=0;
	for (i = 0; i <= 9; i++)
	{
		if (max <a[i])
		{
			max = a[i];
			t = i;
		}
	}
	printf("max:%d,下标:%d", max, t);
}*/
//比较数组大小
/*void main()
{
	int i, j, max, a[3][4], m, n;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			a[i][j] = rand() % 90 + 10;
			printf("%5d", a[i][j]);
		}
	printf("\n");
	}
	max = a[0][0];
	for(i=0;i<3;i++)
		for (j = 0; j < 4; j++)
		{
			if (a[i][j] > max)
			{
				max = a[i][j];
				m = i; 
				n = j;
			}
		}
	printf("max=%d,m=%d,n=%d",max,m,n);
}*/
//转置
/*void main()
{
	int i, j, a[3][4], b[4][3];
	srand(time(NULL));
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			a[i][j] = rand() % 90 + 10;
			printf("%3d",a[i][j]);
		}
		printf("\n");
	}
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
			b[j][i] = a[i][j];
	}
	printf("-------------------->\n");
	for (i = 0; i < 4; i++)
	{ 
		for (j = 0; j < 3; j++)
		{
			printf("%3d", b[i][j]);
		}
		printf("\n");
	}
}*/
//3x4矩阵第1行和第三行交换
/*void main()
{
	int a[3][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };
	int i, j,t;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d",a[i][j]);
		}
		printf("\n");
	}
	printf("--------------->\n");
	for (i = 0; i < 3; i++)
	{
		for (i = 0; i< 4; i++)
		{
			t = a[0][i];
			a[0][i] = a[2][i];
			a[2][i] = t;
			
		}
	}
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%3d", a[i][j]);
		}
		printf("\n");
	}
}*/
//调用函数add
/*void main()
{
	int add(int a, int b);
	int x = 1, y = 2;
	int z;
	z = add(x, y);
	printf("%d",z);
}
int add(int a, int b)
{
	int c;
	c = a + b;
	return c;
}*/
//分子多项相加减
/*void main()
{
	int fz = 1, fm = 1,n=1;
	double pi, sum=1,term=1;
	while (term >= 1e-6)
	{
		
		fz = fz*n;
		fm = fm * (2 * n + 1);
		term = (double)fz / (double)fm;
		sum = sum + term;
		n++;
	}
	pi = 2 * sum;
	printf("%lf",pi);
}*/
//求一个二维数组的最大值
/*void main()
{
	int i, j;
	int a[5][6], b[5];
	srand(time(0));
	for (i = 0; i < 5; i++)//输出模拟数组
	{
		for (j = 0; j < 6; j++)
		{
			a[i][j] = rand() % 100;
			printf("%d ", a[i][j]);
		}
		printf("\n");
	}
	for (i = 0; i < 5; i++)
	{
		b[i] = a[i][0];
		for (j = 0; j < 6; j++)
			if (a[i][j] > b[i])
				b[i] = a[i][j];
	}
	for (i = 0; i < 5; i++)
		printf("%d行最大值为:%d\n", i + 1,b[i]);
}*/
//关于函数的调用
/*void main()
{
	void star();
	void message();
	void star();
	star();
	message();
	star();
}
void star()
{
	printf("--------->\n");
}
void message()
{
	printf("How do you do!\n");
}*/
//函数调用求阶乘
/*void main()
{
	int fac(int n);
	int sum=0;
	for (int i = 5; i <= 7; i++)
	{
		sum=fac(i)+sum;
	}
	printf("%d",sum);
}
int fac(int n)//函数的定义
{
	int i, f = 1;
	for (i = 1; i <= n; i++)
	{
		f = f * i;
	}
	return f;
}*/
//函数调用求最大值
/*void main()
{
	int maxs(int a, int b);
	int a, b;
	scanf("%d",&a);
	scanf("%d", &b);
	printf("max:%d",maxs(a,b));
}
int maxs(int a, int b)//函数定义
{
	int m;
	if (a > b)
		m = a;
	else m = b;
	return m;
}*/
//函数调用求100-200素数
/*void main()
{
	int i,j;
	for (i = 100; i <= 200; i++)
	{
		for (j = 2; j <= i - 1; j++)
		{
			if (i % j == 0)
				break;
		}
		if (j == i)
			printf("%d\n", j);
	}
}*/
/*void main()
{
	int susu(int x, int y);
	printf("输入素数的取值范围:");
	int x, y;

	scanf("%d%d", &x, &y);
	printf("%d",susu(x,y));
}
int susu(int x, int y)
{
	int i, j;
	for (i = x; i <= y; i++)
	{
		for (j = 2; j <= i - 1; j++)
		{
			if (i % j == 0)
				break;
		}
		if (j == i)
			printf("%d\n", j);
	}
}*/
//编程打印乘法表
/*void main()
{
	for (int i = 1; i <= 9; i++)
	{
		for (int j = 1; j <= i; j++)
		{
			printf("%d*%d=%d ",j,i,i*j);
		}
		printf("\n");
	}
}*/
//菱形
/*void main()
{
	int i, j;
	for (i = 1; i <= 4; i++)
	{
		for (j=1;j<=4-i;j++)
		{
			printf(" ");
		}
		for(j=1;j<=2*i-1;j++)
		{
			printf("*");
		}
		printf("\n");
	}
	for (i = 3; i >= 1; i--)
	{
		for (j = 1; j <= 4 - i; j++)
			printf(" ");
		for (j = 1; j <= 2 * i - 1; j++)
			printf("*");
		printf("\n");
	}
}*/
//while循环
/*void main()
{
	int i = 1,sum=0;
	while (1)
	{sum =sum+ i;
		if (sum > 10000)
			break;
		
		i++;

	}
	printf("%d",sum);
}*/
//斐波那契数列
/*void main()
{
	/*int a[6] = {1,1};//数组
	int i;
	for (i = 2; i < 6; i++)
	{
		a[i] = a[i - 1] + a[i - 2];
		
	}
	for(i=0;i<6;i++)
		printf("%d,",a[i]);*/
/*int i, n, t1 = 1, t2 = 1, nextTerm;//一个main函数
	printf("输出几项: ");
	scanf("%d", &n);
	printf("斐波那契数列: ");
	for (i = 1; i <= n; ++i)
	{
		printf("%d, ", t1);
		nextTerm = t1 + t2;
		t1 = t2;
		t2 = nextTerm;
}*/
/*int F(int x);//递归法
	int n;
	scanf("%d", &n);
	printf("%d", fib(n));
	return 0;
 }*/
/*int fib(int m)//递归法
    {
	    if (m >= 3)
	{
		return fib(m - 1) + fib(m - 2);
	    }
	    else {
	    	return 1;
}*/
/* int Fib(int x);
	 printf("%d", Fib(6));
}*/
/*int Fib(int x)//迭代法
{
	if (x == 1 || x == 2)
		return 1;
	int a = 1, b = 1, sum = 0;
	while (x >= 2)
	{
		sum +=a;
		a = b;
		b = sum;
		x--;
	}
	return sum;
	printf("%d",sum);
}*/
/*int fun()
{
	static int x = 1;
	x *= 2;
	return x;
}
void main()
{
	int i, s = 1;
	for (i = 1; i <= 3; i++)
	{
		s *= fun();
		printf("%d\n", s);
	}
}*/
//模块化结构
/*void main()
{
	float add(float x, float y);
	float a, b, c;
	printf("Please enter a and b:");
	scanf("%f%f",&a,&b);
	c = add(a,b);
	printf("sum is %f\n",c);
}
float add(float x,float y)
{
	float z;
	z = x + y;
	return z;
}*/
//输入4个整数，找出其中最大的数，函数的嵌套调用来处理
/*void main()
{
	int max4(int a, int b, int c, int d);
	int a, b, c, d;
	printf("Please enter numbers:\n");
	scanf("%d%d%d%d",&a,&b,&c,&d);
	int max;
	max= max4(a,b,c,d);
	printf("max:%d",max);

}
int max4(int a,int b,int c,int d)
{
	int max2(int a, int b);
	int m;
	m = max2(a, b);
	m = max2(m, c);
	m = max2(m, d);
	return m;
}
int max2(int a, int b)
{
	if (a >= b)
		return  a;
	else return b;
}*/
//函数递归求年龄
/*void main()
{
	int age(int n);
	printf("%d",age(5));
}
int age(int n)
{
	int c;
	if (n == 1)
		c = 10;
	else
		c = age(n - 1) + 2;
	return c;
}*/
//汉诺塔
/*void main()
{
	void hanoi(char a1, char a2, char a3, int n);
	int m;
	scanf("%d",&m);
	hanoi('A', 'B', 'C', m);

}
void hanoi(char A, char B, char C, int n)
{
	void move(char a, char b);
	if (n == 1)
		move(A,C);
	else
	{
		hanoi(A, C, B, n - 1);
		move(A, C);
		hanoi(B, A, C, n - 1);
	}
}
void move(char a, char b)
{
	printf("%c-->%c\n",a,b);
}*/
//输入10个数要求输出其中值最大的元素和该数是第几个元素
/*void main()
{
	int a[10] = { 1,12,3,4,2,8,4,1,9,0 };
	int i, max = a[0],t;
	for (i = 0; i < 10; i++)
	{
		if (a[i] > max)
		{
			max = a[i];
			t = i;
		}
	}
	printf("max:%d,下标:%d",max,t);
}*/
/*void main()
{
	int a[10] = { 1,12,3,4,2,8,4,1,9,0 };
	int imax(int x, int y);
	int m, n, i;
	for (i = 1, m = a[0], n = 0; i < 10; i++)
	{
		if (imax(m, a[i]) > m)
		{
			m = imax(m, a[i]);
			n = i;
		}
	}
	
	printf("max:%d,下标:%d",m,n);
}
int imax(int x, int y)
{
	int max;
	return (x > y ? x : y);
}*/
//选择排序对10个数进行排序
/*void main()
{
	void sort(int array[], int n);
	int a[5] = { 5,2,8,3,2 };
	sort(a, 5);
}
void sort(int array[], int n)
{
	int i, j,t;
	for (i = 0; i < n - 1; i++)//循环n-1趟
	{
		for (j = i + 1; j < n; j++)//选择排序
		{
			if (array[i] > array[j])
			{
				t = array[i];
				array[i] = array[j];
				array[j] = t;
			}
		}
	}
	for (i = 0; i < n; i++)
	{
		printf("%d ",array[i]);
	}
}*/
//写两个函数,求最大公因数，最小公倍数,主函数调用输出结果
/*void main()
{
	void yin(int x, int y);
	void bei(int x, int y);
	int a, b;
	scanf("%d%d",&a,&b);
	yin(a, b);
	bei(a, b);
	
}
void yin(int x, int y)//辗转相除法
{
	int t;
	if (x < y)
	{
		t = x; x = y; y = t;
	}
	int e;
	if (x == 0)
		printf("公因数:%d\n", y);
	else if (y == 0)
		printf("公因数:%d\n", x);
	else {
		e = x % y;
		while (e != 0)
		{
			x = y;y = e;e = x % y;
		}
		printf("公因数:%d\n", y);
	}
}
void bei(int x, int y)//辗转相除法
{
	int t;
	if (x < y)
	{
		t = x;x = y;y = t;
	}
	int e;e = x % y;
	int f;f = x * y;
	while (e != 0)
	{
		x = y;y = e;e = x % y;
	}
	printf("公倍数:%d", f/y);
}
*/
/*void main()
{
	int a, b, i, j;
	int max = 0;
	scanf("%d%d", &a, &b);
	for (i = a;; i++)
	{
		if (i % a == 0 && i % b == 0)//求最小公倍数(方法同法一) 
			break;
	}
	for (j = a;; j--)//求最大公约数
	{
		if (a % j == 0 && b % j == 0)
			break;
	}
	printf("%d %d\n", i, j);
	return 0;
}*/
/*void main()
{
	int a, b;
	scanf("%d%d",&a,&b);
	int gon(int x, int y);
	int yin(int x, int y);
	printf("公因数:%d\n公倍数:%d\n",gon(a,b),yin(a,b));

}
int gon(int x, int y)
{
	int i;
	for (i = x;; i++)
	{
		if (i % x == 0 && i % y == 0)//求最小公倍数(方法同法一) 
			break;
	}
	return i;
}
int yin(int x, int y)
{
	int j;
	for (j = x;; j--)//求最大公约数
	{
		if (x % j == 0 && y % j == 0)
			break;
	}
	return j;
}*/
//求方程式的根，b方-4ac的3种情况
/*float x1, x2;
float a, b, c;
void main()	
{
	void fu();
	void zero();
	void dayu();
	printf("输入3个系数:");
	scanf("%f%f%f",&a,&b,&c);
	if ((b * b - 4 * a * c) < 0)
		fu();
	else if ((b * b - 4 * a * c) == 0)
		zero();
	else if ((b * b - 4 * a * c) > 0)
		dayu();
}
void fu()
{
	printf("该方程无实根\n");
}
void zero()
{
	x1 = (-b + sqrt(b * b - 4 * a * c)) / (2 * a);
	printf("该方程只有一个根:%.2f",x1);
}
void dayu()
{
	x1 = (-b + sqrt(b * b - 4 * a * c)) / (2 * a);
	x2 = (-b - sqrt(b * b - 4 * a * c)) / (2 * a);
	printf("该方程有2个实根 x1:%.2f,x2:%.2f\n",x1,x2);
}*/
//判断素数主函数输入,输出是否为素数的信息
/*void main()
{
	int flag ;int i;
	int susu(int x);
	int a;
	scanf("%d",&a);
	flag = susu(a);
	if (flag)
		printf("%d是素数\n", a);
	else
		printf("%d不是素数\n",a);

}
int susu(int x)
{
	int i;
	for (i = 2; i < x; i++)
	{
		if (x % i == 0)
			return 0;
	}
	if (i == x)
		return 1;
	
}*/
//写一个3x3的数组进行转置
/*void main()
{
	void zhuan(int c[3][3]);
	void yuan(int c[3][3]);
	int a[3][3] = { 1,2,3,4,5,6,7,8,9 };
	yuan(a[3][3]);
	zhuan(a[3][3]);

}
void zhuan(int c[3][3])
{
	int i, j;
	int a[3][3];
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			a[j][i] = c[i][j];
		}
	}
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
}
void yuan(int c[3][3])
{
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d ",c[i][j]);
		}
		printf("\n");
	}
	printf("------------>\n");
}
*/
//写一个函数,输入一个字符串按反序排放，主函数输入输出字符串
/*void main()
{
	char fan(char a[]);
	char str[100] = { 0 };
	printf("输入一个字符串:\n");
	gets(str); fan(str);
	printf("%s ",str);
	
}
char fan(char a[])
{
	int start = 0;
	int end = strlen(a) - 1;
	while (start < end)
	{
		char tmp = a[start];
		a[start] = a[end];
		a[end] = tmp;
		start++;
		end--;
	}
}*/
/*void main()
{
	void fan(char a[]);
	char a[100] = {0};
	printf("输入一个字符:\n");
	gets(a);
	fan(a);
	printf("%s",a);

}
void fan(char a[])
{
	int i, j;
	char t;
	for (i = 0, j = strlen(a) - 1; i < j; i++, j--)
	{
		t = a[i];
		a[i] = a[j];
		a[j] = t;
	}
}*/
//写一个函数,将两个字符串连接
/*void main()
{
	void connect(char a[40], char b[20]);
	void copy(char a[], char b[]);
	char a[40], b[20];
	gets(a);
	gets(b);
	connect(a, b);
//	copy(a, b);
	puts(a);
	printf("\n");
}
void connect(char a[], char b[])//连接
{
	int i, j;
	for (i = 0; a[i] != '\0'; i++);//求i++后的值
	for (j = 0; b[j] != '\0'; i++, j++)
	{
		a[i] = b[j];
	}
	a[i] = '\0';
}
//void copy(char a[], char b[])//复制
//
//{
//	int i;
//	for (i = 0; b[i] != '\0'; i++)
//	{
//		a[i] = b[i];
//	}
//	a[i] = '\0';
//}
*/
//指针实现字符串的连接
/*void main()
{
	char b[80];char a[40];
	char* p = b, * q = a;
	gets(p);
	gets(q);
	int i, j;
	for (i = 0; *(p+i) != '\0'; i++);
	for (j = 0; *(q+j) != '\0'; j++, i++)
		*(p+i) = *(q + j);
	*(p+i) = '\0';
	puts(p);
}*/
//输入5位同学的一组信息，包括学号姓名数学成绩和计算机成绩,求每位学生的平均分和总分，数学成绩的最高分计算机成绩的最低分
/*struct student
{
	int num;
	char name[10];
	double mathscore;
	double computerscore;
};
void main()
{
	struct student std[5];
	int i;
	double sum[5], aver[5], max, min;
	for (i = 0; i < 5; i++)
	{
		printf("输入%d学生的学号，姓名，数学成绩，技术按及成绩:\n",i+1);
		scanf("%d%s%lf%lf",&std[i].num,std[i].name,&std[i].mathscore,&std[i].computerscore);
	}
	printf("输入学生信息为:\n");
	for (i = 0; i < 5; i++)
	{
		printf("学号:%-5d姓名:%s数学成绩:%3.1lf，计算机成绩:%3.1lf\n",std[i].num,std[i].name,std[i].mathscore,std[i].computerscore);
	}
	for (i = 0; i < 5; i++)
	{
		sum[i] = std[i].computerscore + std[i].mathscore;
		aver[i] = sum[i] / 2;
	}
	printf("输出总分,平均分:\n");
	for (i = 0; i < 5; i++)
		printf("学号：%-5d姓名:%s数学成绩:%3.1lf计算机成绩：%3.1lf,总分：%3.1lf,平均成绩:%3.1lf\n",std[i].num,std[i].name,std[i].mathscore,std[i].computerscore,sum[i],aver[i]);
	max = std[0].mathscore;//循环输出的min
	for (i = 0; i < 5; i++)
	{
		if (std[i].mathscore > max)
			max = std[i].mathscore;
	}
	printf("输出数学成绩的最高分:%lf\n",max);
	min = std[0].computerscore;
	for (i = 0; i < 5; i++)
	{
		if (std[i].computerscore < min)
			min = std[i].computerscore;
		printf("输出计算机最低分为%lf\n",min);
	}
}*/
/*struct s
{
	int x;
	int y;
}data[2] = {10,100,20,200};
void main()
{
	struct s* p = data;
	printf("%d\n",p);//地址
	printf("%d\n", ++(p->x));//++p[x]11
	printf("%d\n",p);//地址
	printf("%d\n",p->x++);//11
	printf("%d\n",p->x);//12
	printf("%d\n", p);//地址
	printf("%d\n",++p);//地址
	printf("%d\n",p->x);//20
}*/
//关于结构体和共用体的异同
/*union data
{
	int i; char ch; float f;
};
struct data2
{
	int i; char ch; double f;
};
int main()
{
	union data ud ;
	struct data2 sd = {10};//初始化一个字节
	ud.i = 10; ud.ch = 'A'; ud.f = 20;
	sd.i = 10; sd.ch = 'A'; sd.f = 20;//最后一个为准
	printf("sizeof ud:%d sizeof sd:%d\n", sizeof ud, sizeof sd);
	printf("ud.i:%d  ud.ch:%c  ud.f=%f\n",ud.i,ud.ch,ud.f);
	printf("sd.i:%d  sd.ch:%c  sd.f=%f\n", sd.i, sd.ch, sd.f);
}*/
//大象题库的例题
/*void main()
{
	int a[6] = { 12,4,17,25,27,16 };
	int b[6] = { 27,13,4,25,23,16 };
	int i, j;
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 6; j++)
			if (a[i] == b[j])
				break;//break后直接跳出循环执行下一句
		if (j < 6) //break后跳到这满足条件输出
			printf("%d ", a[i]);
	}
	printf("\n");
}*/
/*void main()
{
	int fun(int n);
	int x = 4;
	fun(x);
	printf("\n");
}
int fun(int n)
{
	if (n > 0) fun(n - 1);
	printf("%d ",n);
}*/
/*int main()
{
	char ch[7] = { "65ab21" };
	int i, s = 0;
	for (i = 0; ch[i] >= '0' && ch[i] <= '9'; i += 2)//不满足条件结束循环
		s = 10 * s + ch[i] - '0';
	printf("%d\n",s);
}*/
//switch的易错点
/*int main()
{

	int i,j;
	printf("请输入星期几的第一个数字:");
	scanf("%d", &i);//✳:由于空格也算一个字符,所以底下必须吞掉一个空格字符
	//getchar();
	switch (i)
	{
	case 1:printf("monday\n");
		break;
	case 2:printf("请输入下一个字符:\n");
		scanf("%d", &j);
		if (j == 3) { printf("satursday\n"); break; }
		if (j == 4) { printf("sunday\n"); break; }
	default:printf("error\n");
		break;
	}
}
int main()
{

	char i,j;
	printf("请输入星期几的第一个字母:");
	scanf("%c", &i);//✳:由于空格也算一个字符,所以底下必须吞掉一个空格字符 i为字符+空格
	//getchar();
	switch (i)
	{
	case 'm':printf("monday\n");
		break;
	case 't':printf("tye\n");
		break;
	case 's':printf("请输入下一个字符:\n");
		scanf("%c", &j);
		if (j == 'a') { printf("satursday\n"); break; }
		if (j == 'u') { printf("sunday\n"); break; }
	default:printf("error\n");
		break;
	}
}*/
//看共用体的占用字节个数struct和union
/*void main()
{
	struct test
	{
		int ml; char m2; float m3;//12
		union uu { char ul[5]; int u2[2]; }ua;//8
	}myaa;
	printf("%d",sizeof(struct test));
}*/
/*void main()
{
	union node
	{
		double a[2];//共占用字节个数2*8=16
		char b[7];
		int c;
	}s;
	struct node
	{
		int c[2];//4*2//看占比最大的字符,共占用字节2*4+4+2*4=20
		char m2[2];//4
		float m3[2];//2*4
	}s;
	printf("%d",sizeof(s));
}
void main()
{
	struct student {
		char name[10];
		int score[50];
		float average;
	}std1;
	printf("%d",sizeof(std1));
}*/
//输出数字塔
/*void main()
{
	int i, j,k;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j < i; j++)
		{
			printf("%d",j);
		}
		for (k = i; k >= 1; k--)
		{
			printf("%d",k);
		}
		printf("\n");
	}
}*/
//求1!+2!+3!+..?!
/*int jie(int n)
{

	int sum = 1;
	for (int i = 1; i <= n; i++)
		sum = sum * i;
	return sum;
}
void  main()
{
	int jie(int n);
	int count=0;
	for (int i = 1; i <= 4; i++)
	{
		count = count + jie(i);
	}
	printf("%d",count);
}*/
//易错
/*void main()
{
	int a[10] = { 9,8,7,6,5,4,3,2,1,0 }, * p = a + 5;//*p=a[5]
	printf("%d",*--p);//*p=a[4]  *(--p)==*--p!=*p-1
}*/
//指针实现计算字符串
/*int f(char* s)
{
	char* p = s;
	while (*p != '\0') p++;
	return(p-s);
}
void main()
{
	printf("%d\n",f("goodbye!"));
}*/
//指针交换输入两个整数,交换后输出
/*void swap(int* x, int* y)
{
	int t;
	t = *x;
	*x = *y;
	*y = t;
}
void main()
{
	int a=9, b=2;
	int* x, * y;
	x = &a, y = &b;
	swap(&a, &b);
	printf("a=%d,b=%d\n",a,b);//2 9
	printf("*x=%d,*y=%d",*x,*y);//2 9
}*/
//编写函数fun的功能是：在形参S所指字符串中每个数字字符之后插入一个&
//例如，形参S所指字符串为：def35addh3kjsdf7.执行结果为：def3&5&addh3*kjsdf7&
/*void main()
{
	void fun(char s[50]);
	char s[] = { "def35addh3kjsdf7" };
	fun(s);
}
void fun(char s[50])
{
	int i, j = 0;
	char a[50];
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] >= '\0' && s[i] <= '9')
		{
			a[j++] = s[i];
			a[j++] = '&';
		}
		else a[j++] = s[i];
	}
	a[j] = '\0';
	for (j = 0; a[j] != '\0'; j++)
		printf("%c",a[j]);
}*/
//读一串字符统计0-9的出现的次数
/*void main()
{
	char a[] = { "I2m3jk221m23" };
	int count=0,i;
	int zero=0, one=0, two=0, three=0, four=0, five=0, six=0, seven=0, eight=0, nine=0, ten=0;
	for (i = 0; a[i] != '\0'; i++)
	{
		if (a[i] == '0') zero++;
		else if (a[i] == '1') one++;
		else if (a[i] == '2') two++;
		else if (a[i] == '3') three++;
		else if (a[i] == '4') four++;
		else if (a[i] == '5') five++;
		else if (a[i] == '6') six++;
		else if (a[i] == '7') seven++;
		else if (a[i] == '8') eight++;
		else if (a[i] == '9') nine++;
		else if (a[i] == '0') zero++;
	}
	printf("0:%d\n1:%d\n2:%d\n3:%d\n4:%d\n5:%d\n6:%d\n7:%d\n9:%d\n",zero,one,two,three,four,five,six,seven,eight,nine);
}*/
/*void main()
{
	char a[50], * p;
	int n = 0;
	gets(a);
	p = a;
	while (*p++)
	{
		if (*p >= '0' && *p <= '9')
			n++;
	}
	printf("n=%d",n);
}*/
//共用体要注意的是每个元素的头以最后一个为准,sg struct类型的只会改变第一个元素,其他元素不变,且第一个元素以同类型的最后一个为准
/*
union myum
{
	struct
	{
		int x, y, z,f;//赋 4 5 6 7 出 3 5 6 7 
	}u;
	int k;//赋3 出 3
}a;
union test
{
	struct
	{
		int f, g, h;//赋 3 5   出 10 5 0
	};
	int l;//赋 4 出10
	int o;//赋 10 出10
}m;
void main()
{
	a.u.x = 4; a.u.y = 5; a.u.z = 6,a.u.f=7;
	a.k = 3;
	m.f = 3; m.g = 5; 
	m.l = 4; m.o = 10;
	printf("%d,%d,%d\n",m.f,m.g,m.h);//10，5，0
	printf("%d,%d\n",m.l,m.o);//10，10

	printf("%d,%d,%d,%d\n",a.u.x,a.u.y,a.u.z,a.u.f);//共用体类型,值是最后一个//3,5,6,7
	printf("%d,%d\n", a.u.x, a.k);//3,3
}*/
//指针一维转二维的案例
/*void main()
{
	int a[12] = { 1,2,3, 4,5,6, 7,8,9, 10,11,12 }, * p[4], i;
	for (i = 0; i < 4; i++)
	{
		p[i] = &a[i * 3];
	}printf("%d\n",p[2][1]);
}*/
// 40名员工,员工有工号和姓名有电视机电冰箱空调洗衣机 计算销售额高到低排序,创建结构体及其变量
/*struct student
{
	int no;
	char name[20];
	float dianshiji, dianbingxiang, kongtiao, xiyiji, total;
};
int main()
{
	struct student arr[40], temp;
	int i, j, max;
	//输入信息
	for (i = 0; i < 40; i++)
	{
		scanf("%d%s%f%f%f%f",&arr[i].no,arr[i].name,&arr[i].dianshiji,&arr[i].dianbingxiang,&arr[i].kongtiao,&arr[i].xiyiji),
		//计算销售额
		arr[i].total = arr[i].dianbingxiang + arr[i].dianshiji + arr[i].kongtiao + arr[i].xiyiji;
	}
	//选择排序
	for (i = 0; i < 39; i++)
	{
		for (j = i + 1; j < 40; j++)
		{
			if (arr[i].total > arr[j].total)//比较可以加后缀,交换不可以用后缀
			{
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
	//输出结果
	for (i = 0; i < 40; i++)
	{
		printf("%-10d%-20s%6.2f%6.2f%6.2f%6.2f\n",arr[i].no,arr[i].name,arr[i].dianshiji,arr[i].dianbingxiang,arr[i].kongtiao,arr[i].xiyiji,arr[i].total);
	}
}*/
//读一串字符,分别统计0-9出现的次数
/*void main()
{
	int number[10], i;
	char c;
	for (i = 0; i < 10; i++)
		number[i] = 0;
	printf("请输入一串字符\n");
	while ((c = getchar()) != '\n')
	{
		if (c >= '0' && c <= '9')
			number[c - 48]++;
	}
	for (i = 0; i < 10; i++)
	{
		printf("%d:%d\n",i,number[i]);
	}
}*/
//输出%d
/*void main()
{
	printf("%d\n");//%是输出的意思,d是数值型，输出一个数字
	printf("%%d\n");//输出%d
	printf("\%d\n");//输出/加数字
	printf("%%%d\n");//输出%加数字
}*/
//定义范围和static的混合使用
/*int p = 2;
void main()
{
	int s, j;
	for (j = 0; j <=5; j++)
		s = sum(j);
	printf("s=%d\n",s);//61
}
int sum(int k)
{
	static int x = 1; int y = 1;
	p++; y++;//因为p的作用域是整个实验的区域,所以p的累加和static效果一样
	return (x += k + p + y);
}*/
//指针的调用 int(*p)(int,int)
/*int main()
{
	int fun(int x, int y, int(*p)(int, int));
	int amax(int x, int y);
	int amin(int x, int y);
	int a = 34, b = -21, n;
	printf("1 or 2\n");
	scanf("%d",&n);
	if (n == 1) fun(a, b, amax);
	else if (n == 2) fun(a, b, amin);

}
int fun(int x, int y, int(*p)(int, int))
{
	int result;
	result = (*p)(x, y);
	printf("%d\n",result);
}
int amax(int x, int y)//约等于int (*p)(int, int)
{
	int z;
	if (x > y) z = x;
	else z = y;
	printf("max=\n");
	return(z);
}
int amin(int x, int y)
{
	int z;
	if (x < y) z = x;
	else z = y;
	printf("min=\n");
	return(z);
}*/
//字符数组逆序输出
/*void main()
{
	char a[] = "abcdef" ;
	int end = strlen(a) - 1;
	//for (int i = end; i >= 0; i--)
	//{
	//	printf("%c",a[i]);
	//}
	int count = strlen(a) / 2;
	char c;
	for (int j = 0; j < count; j++,end--)
	{
		c = a[j];
		a[j] = a[end];
		a[end] = c;
	}
	for(int j=0;j<strlen(a);j++)
	printf("%c",a[j]);//puts(a);printf("%s",a);
}*/
//3个字符串,要求其中的最大字符串
/*void main()
{
	char str1[100];
	char str2[100];
	char str3[100];
	char amax[30];
	printf("请输入字符串\n");
	gets(str1);
	gets(str2);
	gets(str3);
	strcpy(amax,str1);
	if (strcmp(amax, str2) < 0) strcpy(amax,str2);
	if (strcmp(amax, str3) < 0) strcpy(amax, str3);
	printf("%s",amax);
}*/
//输入多个字符数组求最大字符串
/*void main()
{
	char a[3][20],max[10];
	int i;
	for (i = 0; i < 3; i++)
	{
		gets(a[i]);
	}
	strcpy(max, a[0]);
	for (i = 1; i < 3; i++)
		if (strcmp(max, a[i]) < 0)//strcmp<a[i]
			strcpy(max, a[i]);
	printf("the larget:\n%s\n",max);
}*/
//将n个国家按字母顺序排序后输出
/*int main()
{
	int n;
	scanf("%d", &n);
	char c[20][21];
	if (n == 0)//若国家数为0，无输出
	{
		return 0;
	}m
	if (n > 20 || n < 0)//若输入国家数n不合题意，则输出“Data Error”
	{
		printf("Data Error");
		return 0;
	}
	gets(c[0]);//gets用法,比如输入3后空格 按回车后会把回车作为字符放入c[0]中
	for (int i = 0; i < n; i++)                                                  
	{
		gets(c[i]);
	}
	char temp[20];
	for (int i = 0; i < n - 1; i++)//循环次数
	{
		for (int j = i + 1; j < n; j++)//选择排序
		{
			if (strcmp(c[i], c[j]) > 0)//c[i]<c[j]时交换
			{
				strcpy(temp, c[i]);
				strcpy(c[i], c[j]);
				strcpy(c[j], temp);
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		puts(c[i]);
	}
	return 0;
}*/
//函数调用求阶乘及1到n的阶乘之和
/*int fun(int x)//递归
{
	if (x == 0)
		return 1;
	else
		return x * fun(x - 1);
}
int func(int x)//普通
{
	int z = 1;
	if (x == 0)
	{
		z = 1;
		return z;
	}
	else
	{
		for (int i = 1; i <= x; i++)
		{
			z = i * z;
		}
		return z;
	}
}
void main()
{
	int a;
	int sum=0;
	int sumc = 0;
	//输入x的n次方
	scanf("%d",&a);
	for (int i = 0; i <= a; i++)//0!到a阶乘
	{
		sum+=fun(i);
		sumc += func(i);
	}
	printf("阶乘: %d\n",sum);
	printf("阶乘：%d\n",sumc);
}*/
//2+22+222+2222+....
/*int fun(int a, int n)
{
	int result = 0;
	for (int i = 1; i <= n; i++)
	{
		result = result * 10 + a;
	}
	return result;
}
void main()
{
	int a, n, i, sum=0;
	//输入基数和个数
	scanf("%d%d",&a,&n);
	for (i = 1; i <= n; i++)
	{
		sum += fun(a, i);
	}
	printf("%d", sum);
}*/
//年龄递归
/*int age(int i)
{
	
	if (i == 1)//终止条件
		return 20;
	else
		return age(i - 1) + 2;//关系式循环

}
void main()
{
	int n = 5;
	printf("%d",age(5));
}*/
//值的定义问题全局变量
/*void main()
{
	int b = 6, c = 7;
	fun(b, c);//输出5 11 -2
	printf("%d\t%d\t%d\n",a,b,c);//5 6 7 
	{
		int a = 9, b = 8;
		printf("%d\t%d\t%d\n",a,b,c);//9 8 7
		{
			int a = 10, b = 20;//a是这个函数的a
			c = 10;//c是上面的C int c 以下结果的改变
			printf("%d\t%d\t%d\n", a, b, c);//10 20 10
		}
		printf("%d\t%d\t%d\n", a, b, c);//9 8 10
	}
	printf("%d\t%d\t%d\n", a, b, c);//5 6 10
}*/
//阶乘实现的2种方式
/*int fun(int x)
{
	int p = 1, i = 1;
	for (i = 1; i <= x; i++)
		p = p * i;
	return p;
}
int func(int x)
{
	static int p = 1;
	p = p * x;
	return p;
}
void main()
{
	int i, n;
	//long result;
	printf("Input n:");
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		printf("fun:%d!=%d\n",i,fun(i));
		printf("func:%d!=%d\n", i, func(i));
	}
}*/
//函数法判断一个数是否是素数
/*int fun(int x)
{
	int i;
	for (i = 2; i < x; i++)
	{
		if (x % i == 0)
		{
			return 0;
			break;
		}
		if (i == x)
		{
			return 1;
		}
	}
}
void main()
{
	int x;
	scanf("%d",&x);
	if (fun(x))
		printf("%d是素数", x);
	else printf("%d不是素数",x);
}*/
//编函数,实现字符串的连接
/*char fun(char a[], char b[])
{
	int i = 0, k = 0;
	while (a[i] != '\0') i++;
	while (b[k] != '\0')
	{
		a[i] = b[k];
		i++;
		k++;
	}
	a[i] = '\0';
	puts(a);
}
char func(char a[], char b[])
{
	int i,j;
	for ( i = 0; a[i]!='\0'; i++);
	for ( j = 0; b[j]!='\0'; i++,j++)
	{
		a[i] = b[j];
	}
	a[i] = '\0';
	puts(a);
}
void main()
{
	char a[40];
	char b[20];
	gets(a);
	gets(b);
	func(a, b);
	//printf("%d", strlen(a));
}*/
//回文数
/*int hui(long n)//如12321;
{
	int g, s, q, w;
	w = n / 10000;//万
	q = n / 1000 % 10;//千
	s = n % 100 / 10;//十位
	g = n % 10;//个位
	if (g == w && s == q)
		return 1;
	else return 0;
}
void main()
{
	int a;
	scanf("%d",&a);
	if (hui(a))
		printf("回文");
	else printf("非回文");
}*/
//输出3-1000的完数
/*int fun(int x)
{
	int i,sum=0;
	for (i = 1; i < x; i++)
	{
		if (x % i == 0)
			sum += i;
	}
	if (sum == x)
		return 1;
	else return 0;
}
void main()
{
	int n,i,sum=0;
	for (i = 3; i <= 1000; i++)
		if (fun(i))
			printf("%5d\n",i);
}*/
//指针交换大全
/*
void swap1(int* p1,int* p2)//能用
{
	int temp;//*p和a都交换
	temp = *p1;
	*p1 = *p2;
	*p2 = temp;
}
void swap2(int* p1,int* p2)
{
	int *temp;//*p和a都不交换，交换a和b的地址
	temp = p1;
	p1 = p2;
	p2 = temp;
}
void swap3(int* p1, int* p2)
{
	int* temp;//报错,temp野指针
	//temp = NULL;不输出任何结果
	*temp = *p1;
	*p1 = *p2;
	*p2 = *temp;
}
void main()
{
	int a=3, b=5, * p1, * p2;
	p1 = &a, p2 = &b;
	swap1(p1, p2);//更改swap进行调试 或者写swap(&a,&b)
	printf("%d,%d\n",a,b);
	printf("%d,%d",*p1,*p2);
}*/
/*void main()
{
	int* p1, * p2, a = 8, b = 9, * p;//同级
	p1 = &a;
	p2 = &b;
	if (a < b)
	{
		p = p1;
		p1 = p2;
		p2 = p;
	}
	printf("%d,%d\n", *p1, *p2);//9 8
	printf("%d,%d", a, b);//8,9
}*/
//指针易错
/*char sun(char* p1, char* p2)
{
	while (*p1 != '\0')
	{
		*p2 = *p1;
		p1++;
		p2++;
	}
	*p2 = '\0';
	return p2;//返回p2的地址
}
void main()
{
	//int a[3][4] = { 1,3,5,7,9,11,13,15,17,19,21,23 };
	//int(*p)[4], i, j;
	//p = a;
	//for (i = 0; i < 2; p++,i++)//p++
	//	printf("%d\t",*(p[i]+1));//3,19
	//指针赋值
	char a[20] = "I am student",b[20];
	sun(a, b);
	printf("%s",b);
	
}*/
//斐波那契数列
/*void main()
{
	int f1 = 1, f2 = 1,next,i;
	//方法一
	for ( i = 1; i <= 10; i++)//循环120次
	{printf("%d,%d,",f1,f2);
		f1 = f1 + f2;
		f2 = f1 + f2;
	}
	//方法二
	//for (i = 1; i <= 20; i++)//20天
	//{
	//	printf("%d,",f1);
	//	next = f1 + f2;
	//	f1 = f2;
	//	f2 = next;
	//}
	//
}*/
//乘法输入表
/*void main()
{
	int i = 1;
	int j,k;
	for ( i = 1; i <= 9; i++)
	{
		for (k = 0; k <= i - 1; k++)
			printf("       ");//空格个数与下列输出空格匹配
		for (j = i; j <= 9; j++)
		{
			printf("%d*%d=%2d ",i,j,i*j);
		}
		printf("\n");
	}
}*/
//指针连接
/*char fun(char* s1, char* s2)
{
	int i = 0, j = 0;
	while (s1[i] != '\0')
		i++;
	while (s2[j] != '\0')
		s1[i++] = s2[j++];
	s1[i] = '\0';
}
void main()
{
	char s1[80], s2[40];
	scanf("%s",s1);
	scanf("%s",s2);
	fun(s1, s2);
	printf("%s",s1);
}*/
//结构体的案例
/*struct data
{
	int year;
	int month;
	int day;
};
struct student
{
	int id;
	struct data birth;
	char name[100];
	char sex[20];
	int age;
}std[2] = { {101,{1099,9,23},"张胜男","男",18 },{102,{1078,10,23},"里斯","女",19} };
int main()
{
	int t;
	struct student std,* p;//*p和std需要是一个类型定义
	p = &std;
	std.age = 12;
	std.birth.day = 20;
	std.birth.month = 9;
	std.birth.year = 1987;
	std.id = 103;
	strcpy(std.name, "若琳");//要用字符串
	strcpy(std.sex, "女");
	printf("%d,%d,%d,%d,%s,%s,%d\n",std[0].id,std[0].birth.year, std[0].birth.month, std[0].birth.day, std[0].name,std[0].sex,std[0].age);
	printf("%d,%d,%d,%d,%s,%s,%d\n", std[1].id,std[1].birth.year, std[1].birth.month, std[1].birth.day, std[1].name, std[1].sex, std[1].age);
	printf("%d,%d,%d,%d,%s,%s,%d\n", std.id, std.birth.year, std.birth.month, std.birth.day, std.name, std.sex, std.age);
	printf("%d,%d,%d,%d,%s,%s,%d\n", (*p).id, (*p).birth.year, (*p).birth.month, (*p).birth.day, (*p).name, (*p).sex, (*p).age);
	printf("%d,%d,%d,%d,%s,%s,%d\n", p->id, p->birth.year, p->birth.month, p->birth.day, p->name, p->sex, p->age);
}*/
//结构体的选票
/*struct student
{
	char name[20];
	int count;
}std[3] = {"Li",0,"zhang",0,"wang",0};
void main()
{
	int i,j;
	char stds[20];
	for (i = 0; i <= 10; i++)
	{
		scanf("%s",stds);//输出名字
		for (j = 0; j < 3; j++)//比较
		{
			if (strcmp(stds,std[j].name)==0)//比较字符串 结构体应该直接采用strcmp 和 strcpy
			{
				std[j].count++;
			}
		}
	}
	for (i = 0; i < 3; i++)
	{
		printf("姓名:%s,选票:%d\n",std[i].name,std[i].count);
	}
	printf("\n");
}*/
//结构体学生的信息进行排名并计算平均成绩
/*struct student//学号姓名分数
{
	int num;
	char name[20];
	float score;
};
int main()
{
	struct student stu[5] = { {10101,"wang",78 },
	{10102,"zhang",98},{10103,"li",99},{10104,"yuan",87},{10105,"jia",97} };
	struct student  temp;
	int i;
	for (i = 0; i < 5; i++)
	{
		printf("学号:%d,姓名:%s,分数:%.2f\n", stu[i].num, stu[i].name, stu[i].score);
	}
	printf("-------------->\n");
	int j;
	for (i = 0; i < 4; i++)
	{
		for (j = i + 1; j < 5; j++)
		{
			if (stu[i].score<stu[j].score )
			{
				temp = stu[i];
				stu[i] = stu[j];
				stu[j] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
	{
		printf("学号:%d,姓名:%s,分数:%.2f\n", stu[i].num, stu[i].name, stu[i].score);
	}
	float average=0;
	for (i = 0; i < 5; i++)
	{
		average += stu[i].score;
	}
	average = 1.0 * average / 5;
	printf("平均数%.2f",average);

}*/
//结构体的赋值
/*typedef struct
{
	char name[9];
	char sex;
	float score[2];
}STU;
void f(STU a)
{
	STU b = { "zhao",'m',85.0,90.0 };
	int i;
	strcpy(a.name, b.name);
	a.sex = b.sex;
	for (i = 0; i < 2; i++)
	{
		a.score[i] = b.score[i];
	}
	printf("%s,%c,%2.0f,%2.0f\n", a.name, a.sex, a.score[0], a.score[1]);
}
void main()
{
	STU c = { "qian",'f',95.0,92.0 };
	f(c);
	printf("%s,%c,%2.0f,%2.0f",c.name,c.sex,c.score[0],c.score[1]);
}*/
//结构体类型数组计算C不及格的信息和人数
/*struct student
{
	int num;
	char name[20];
	float score[3];
	float total;
	float average;
}std[5] = {
	{10101,"亦",78.0,89.0,56.0},
	{10102,"章",59.7,80.7,60.5},
	{10103,"以",80.5,67.8,89.9},
	{10104,"苏",49.7,89.7,90.0},
	{10105,"李",90.7,98.9,99.7}
};
void main()
{
	int i;
	//*struct student std[5];
	//for (i = 0; i < 5; i++)
	//{
	//	scanf("%d %s %f %f %f",&std[i].num,std[i].name,&std[i].score[0],&std[i].score[1],&std[i].score[2]);
	//}
	for (i = 0; i < 5; i++)
	{
		printf("%d,%s,%.2f,%.2f,%.2f\n", std[i].num, std[i].name,std[i].score[0], std[i].score[1], std[i].score[2]);
	}
	//计算平均成绩和总成绩
	for (i = 0; i < 5; i++)
	{
		std[i].total = std[i].score[0] + std[i].score[1] + std[i].score[3];
		std[i].average = std[i].total / 5;
		printf("%s的平均成绩%.2f，总成绩%.2f\n",std[i].name,std[i].average,std[i].total);
	}
	//统计C不及格的人数
	struct student asd;
	int t = 0;
	printf("不及格的人数为:\n");
	for (i = 0; i < 5; i++)
	{
		
		if (std[i].score[0] < 60)
		{
			printf("%d,%s,%.2f,%.2f,%.2f\n", std[i].num, std[i].name, std[i].score[0], std[i].score[1], std[i].score[2]);
			t++;
		}
	}printf("不及格的人数有%d人\n",t);
	//对C语言的成绩进行排序
	int j;
	//float temp;//若用temp只能改变分数不改变原来的值
	struct student temp;
	for (i = 0; i < 4; i++)
	{
		for (j = i + 1; j < 5; j++)
		{
			if (std[i].score[0] > std[j].score[0])
			{
				temp = std[i];
				std[i] = std[j];
				std[j] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
	{
		printf("%d,%s,%.2f,%.2f,%.2f\n", std[i].num, std[i].name, std[i].score[0], std[i].score[1], std[i].score[2]);
	}
}*/
//鞍点
/*void main()
{
	int i, j, k, a[3][4], max, maxj, flag;
	int find = 0;
	srand(time(0));
	for (i = 0; i < 3; i++)//输出数组
	{
		for (j = 0; j < 4; j++)
		{
			a[i][j] = rand() % 80 + 10;
			printf("%3d", a[i][j]);
		}
		printf("\n");
	}
	for (i = 0; i < 3; i++)//求每一行的最大值
	{
		max = a[i][0];
		maxj = 0;
		for (j = 0; j < 4; j++)
		{
			if (a[i][j] > max)//列的最大值
			{
				max = a[i][j];
				maxj = j;//复制最大值的j(列)
			}
		}
		flag = 1;
		for (k = 0; k < 3; k++)//比较列
			if (max > a[k][maxj])//判断行是不是最大
				flag = 0;
		if (flag)
		{
			find = 1;
			printf("鞍点是a[%d][%d]=%d\n", i, maxj, max);
			break;
		}
	}
	if (find == 0)
		printf("无鞍点\n");
}*/
//1+...+N<100时把n送num单元,同时把1+...n的和送sum单元
/*void main()
{
	int num=1, i = 0, sum = 0;
	for (i=1; i<100;i++)
	{
		sum += i;
		if (sum > 100)
			break;
	}
	printf("num:%d,sum:%d",i-1,sum-i);
}*/
//统计各个字母的次数
/*void main()
{
	int a[26] = {0};
	char c;
	while ((c = getchar()) != '\n')
	{
		if (c >= 'A' && c <= 'Z')
		{
			a[c - 'A']++;
		}
	}
	for (int i = 0; i < 26; i++)
	{
		printf("%c:%d\n",'A'+i,a[i]);
	}
}*/
//1的1次方+2的2次方+3的3次方+...5的5次方
/*void main()
{
	int i,sum=0;
	int fun(int n);
	for (i = 1; i <= 5; i++)
	{
		sum += fun(i);
	}
	printf("%d",sum);
}
int fun(int n)
{
	int j = 1;
	for (int k = 1; k <= n; k++)
	{
		j = j * n;
	}
	return j;
}*/
/*void main()//break的使用 分析结果题4 25 27 16
{
	int i,j,a[6] = { 12,4,17,25,27,16 }, b[6] = { 27,13,4,25,23,16 };
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 6; j++)
			if (a[i] == b[j]) break;
		if (j < 6) printf("%d ",a[i]);
	}
	printf("\n");
}*/
//递归阶乘
/*void main()
{
	int fun(int x);
	printf("%d",fun(4));
}
int fun(int n)//阶乘
{
	int a;
	if (n == 0)//终止条件
		return 1;
	else
		return n*fun(n - 1);//只有x-1才有可能达到x==1;
	//分析,0的阶乘是1
	//规律是fun(n-1)*n==n*(n-1)!;
}*/
//递归斐波那契
/*void main()
{
	int fun(int x);
	int n;
	scanf("%d",&n);
	printf("%d",fun(n));
}
int fun(int x)
{
	if (x == 0 || x == 1)
		return 1;
	else return fun(x - 1) + fun(x - 2);
}*/
//递归函数逆序输出
/*void main()
{
	int reverse(int n);
	int n;
	scanf("%d",&n);
	reverse(n);
}
int reverse(int n)
{
	if (n <= 9)
		printf("%d ", n);
	else
	{
		printf("%d", n % 10);//出个位
		reverse(n / 10);//去个位
	}
	//终止最后一位小于9, sg:123459
	//先取余,在去掉个位
}
*/
//switch不懂可以用这个调试
/*int main()
{
	int day = 0;				  //定义一个整型变量day，并对其赋值为0
	printf("请输入一个数字\n");   //让用户输入一个数字
	scanf("%d", &day);				//接收用户输入的数字
	switch (day)
	{
	case 4:printf("星期四\n");
	case 1:printf("星期一\n");    //如果day的值为1，则输出星期一
	case 2:printf("星期二\n");	//以下同上
	case 3:printf("星期三\n");
	case 5:printf("星期五\n");
	case 6:printf("星期六\n");
	case 7:printf("星期天\n");
	default:
		break;
	}
}*/
//递归数组的天花板
/*int f(int a[], int n)
{
	if (n > 1) return a[0] + f(&a[1], n - 1);
	else return a[0];
}
void main()
{
	int a[3] = { 1,5,4 },s;
	s = f( & a[0], 3 );
	printf("%d",s);//10
	//思路,调用的是地址不是值
	f(&a[0],3)
	=a[0]+f(&a[1],2)
	=a[0]+a[1]+f(&a[2],1)
	=a[0]+a[1]+a[2];
}*/
//指针交换的易错题
/*void main()
{
	char s[] = "morning", * p1, * p2, c;
	p1 = p2 = s;
	while (*p2) p2++;
	p2--;
	while (p2 > p1)
	{
		c = *p1;
		*p1++ = *p2--;
		*p2 = c;
	}
	printf("%s",s);
}*/
//将后面的指定数字队列放前边
/*void main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int m, i, k, t;
	printf("back：\n");
	scanf("%d",&m);
	for (k = 1; k <= m; k++)//调换次数
	{
		t = a[9];//末项
		for (i = 8; i >= 0; i--)
			a[i + 1] = a[i];
		a[0] = t;//首项
	}
	for (int i = 0;i < 10; i++)
		printf("%d,",a[i]);
}*/
//数字金字塔
/*void main()
{
	int i, j, k;
	for (i = 1; i <= 9; i++)
	{
		for (j = 1; j <= i; j++)
			printf("%d",j);
		for (k = i - 1; k > 0; k--)
			printf("%d",k);
		printf("\n");
	}
}*/
//易错题
/*void main()
{
	int i, b, k = 0;
	for (i = 6; i > 1; i--)
	{
		b = i % 3;
		while (b-- >= 0) k++;
	}
	printf("%d,%d",k,b++);
}*/
/*
void main()
{
	int n, i, j;
	scanf("%d",&n);
	for (i = 1; i <= n; i++)
	{
		//打空格
		for (j = 1; j <= n - i; j++)
			printf(" ");
		//正序打
		for (j = 1; j <= i; j++)
			printf("%d",j);
		//倒序打
		for (j = i - 1; j >= i; j--)
			printf("%d",j);
		//换行
		printf("\n");
	}
}*/
#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<time.h>
#define N 10
#define P 3.14
#define S 6
// tips:快速折叠代码 先ctrl+m后ctrl+o; 快速展开代码ctrl+m ctrl+l
/*void main()
{
int a,b;
printf("输入a,b");
scanf("%d%d",&a,&b);
int c;
c=a+b;
printf("%d\n",c);
}*/
/*void main()
{
int y=9;
for(;y>0;y--)
if(y%3==0)
{
printf("%d",--y);
}
}*/
//小于10000的数字进行累加判断n的取值范围
/*void main()
{
int i,sum=0;
i=1;
while(sum<=10000)
{
sum+=i;
i+=1;

}
printf("%d",i-1);
}*/
//随机输出大小数并进行大小的比较
/*void main()
{
int i,max,min,a;
srand(time(0));//随机输出数
a=rand()%100;//0-99
printf("%d\n",a);
max=a;
min=a;
for(int i=1;i<=100;i++)
{
a=rand()%100;
printf("%d\t",a);
if(a>max)max=a;
if(a<min)min=a;
}
printf("max=%d\t min=%d",max,min);
}*/
//一段分数相加减
/*void main()
{
int sign=1;
double pi=0,n=1,term=1;
while(fabs(term)>=1e-6)
{
pi=pi+term;
n=n+2;
sign=-sign;
term=sign/n;
}
pi=pi*4;
printf("%10.8f\n",pi);
}*/
//斐波那契数列
/*void main()
{
int a=1,b=1,c=0;
for(int i=1;i<=38;i++)
{
printf("%12d %12d",a,b);
if(i%2==0)
printf("\n");
a=a+b;
b=b+a;
}
}*/
//给定一段字符判断各字符的数量
/*void main()
{
int a,s,x,c;
int ch ;
a=s=x=c=0;
while((ch =getchar()) !='\n')
{
if(a>='0'&&a<='9')
a++;
else if(ch ==' ')
s++;
else if(ch>='a'&&ch<='z'||ch>='A'&&ch<='Z')
x++;
else
c++;
//ch=getchar();
}
printf("数字:%d\n,空格:%d\n,字母:%d\n,其他:%d\n",a,s,x,c);
}*/
//个十百都不相同的数
/*void main()
{
int g,s,b;
int count=0;
for( g=1;g<5;g++){
for( s=1;s<5;s++){
for( b=1;b<5;b++){
if(g!=s&&g!=b&&b!=s)
{printf("%d,%d,%d\n",g,s,b);
count++;}
}
}
}
printf("总数:%d\n",count);
}*/
//利润分配
/*void main()
{
int i,count;//i利润;count总金额
printf("请输入金钱万数:\n");
scanf("%d",&i);
if(i<=100000){
count=i*0.1;
}else if(i>100000&&i<=200000){
count=100000*0.1+(i-100000)*0.075;
}else if(i>200000&&i<=400000){
count=100000*0.1+100000*0.075+(i-200000)*0.05;
}else if(i>400000&&i<=600000){
count=100000*0.1+100000*0.075+200000*0.05+(i-400000)*0.03;
}else if(i>600000&&i<=1000000){
count=100000*0.1+100000*0.075+200000*0.5+200000*0.03+(i-600000)*0.015;
}else if(i>1000000)
{ count=100000*0.1+100000*0.075+200000*0.5+200000*0.03+400000*0.015+(i-1000000)*0.01;}
printf("count:%d\n",count);
}*/
/*void main()
{
int i,j;
int m,n,x;
for(i=2;i<=168/2;i++)
{
if(168%i==0){
j=168/i;}
//printf("%d,%d\n",i,j);
n=(i-j)/2;
x=n*n-100;
printf("%d\n",x);
}
}*/
//给定时间判断天数
/*void main()
{
int day,month,year;
int sum=0;
int leap=0;
printf("请输入年月日");
scanf("%d%d%d",&year,&month,&day);

printf("year:%d,month:%d,day:%d\n",year,month,day);
switch(month){
case 1:printf("1月份\n");sum=0;break;
case 2:printf("2月份\n");sum=31;break;
case 3:printf("3月份\n");sum=59;break;
case 4:printf("4月份\n");sum=90;break;
case 5:printf("5月份\n");sum=121;break;
case 6:printf("6月份\n");sum=152;break;
case 7:printf("7月份\n");sum=183;break;
case 8:printf("8月份\n");sum=214;break;
case 9:printf("9月份\n");sum=245;break;
case 10:printf("10月份\n");sum=276;break;
case 11:printf("11月份\n");sum=307;break;
case 12:printf("12月份\n");sum=338;break;

}
if(year%4==0&&year/100!=0||year%400==0)
{leap=1;}
else
{leap=0;}
if(leap=1&&month>=2)
{sum++;}
sum=sum+day;
printf("天数:%d\n",sum);
}*/
//编译Com函数;求一个4位数各部分的立方和
/*int com(int m)
{
int ge,shi,bai,qian;
int he;
qian=m/1000;
bai=(m/100)%10;
shi=(m/10)%10;
ge=m%10;
he=qian*qian*qian+bai*bai*bai+shi*shi*shi+ge*ge*ge;
return he;
}
void main()
{
int a,h;
scanf("%d",&a);
h=com(a);//调用函数:
printf("he=%d\n",h);
}*/
//两个2位数进行合成个十百千换位
/*int com(int a,int b)
{

int ag,as,bg,bs;
int c;
as=a/10;
ag=a%10;
bg=b%10;
bs=b/10;
c=as+bs*10+ag*100+bg*1000;
return c;
}
void main()
{
int a,b;
int c;
scanf("%d%d",&a,&b);
c=com(a,b);
printf("c=%d\n",c);
}*/
//大写转小写
/*char com( char a)
{
char b;
b=a+32;
return b;
}
void main()
{
char s,b;
scanf("%c",&s);
b=com(s);
printf("%c\n",b);
}*/
//求ASCll值
/*int asc(char ch)
{
int a;
if((ch>='A'&&ch<='Z')||(ch>='a'&&ch<='z'))
a=ch;
else if(ch>='0'&&ch<='9')
a=ch-'0';

return a;
}
void main()
{
char a;
int c;
scanf("%c",&a);
c=asc(a);
printf("%d\n",c);
}
void main()//简洁版求Ascii的值
{
char i;
int a;
scanf("%c",&i);
a=(int)i;//强制转换
printf("%d\n",a);
}*/
//24小时进制转换12进制
/*int time(int a)
{
int c;
//①c=a%12;
if(a>0&&a<=12)
{
c=a;
//printf("%d\n",a);
}
if(a>12&&a<=24)
{
c=a-12;
//printf("%d\n",a);
}
return c;
}
void main()
{
int a,c;
scanf("%d",&a);
c= time(a);
printf("time:%d\n点",c);
}*/
//个百进行调换
/*int f(int i)
{
int ge,shi,bai;
int n;
bai=i/100;
shi=i/10%10;
ge=i%10;
n=ge*100+shi*10+bai;
return n;
}
void main()
{
int i;
int m;
scanf("%d",&i);
m=f(i);
printf("%d\n",m);
}*/
/*float com(int x)
{
float y;
float z;
if(x>=1 && x<3)
y = 2*x+4;
else if(x>=3&&x<5){
z=x*x-+4;
y= sqrt(z);}
else if(x>=5&&x<9)
y=x*x+3*x-6;
return y;
}
void main()
{
int x;
float y;
scanf("%d",&x);
y=com(x);
printf("y=%f\n",y);
}*/
//3位数由大到小排序
/*int com(int i)
{
int ge,shi,bai;
int t,n;
ge=i%10;
shi=i/10%10;
bai=i/100;
if(bai<shi)
{
t=bai;
bai=shi;
shi=t;
}
if(bai<ge)
{
t=bai;
bai=ge;
ge=t;
}
if(shi<ge)
{
t=shi;
shi=ge;
ge=t;
}
n=bai*100+shi*10+ge;
return n;
}
void main()
{
int x;
int z;
scanf("%d",&x);

z=com(x);
printf("%d\n",z);
}*/
//4位数对称
/*int com(int x)
{
int ge,shi,bai,qian;
int f;
ge=x%10;
shi=x/10%10;
bai=x/100%10;
qian=x/1000;
if(ge==qian&&bai==shi)
f=1;
else
f=0;
return f;
}
void main()
{
int x;
scanf("%d",&x);
if(com(x)==1)
printf("yes\n");
else
printf("no\n");
}*/
//判断三角成立条件
/*int pan(int a,int b,int c)
{
int f;
if(a+b>c&&a+c>b&&b+c>a)
f=1;
else
f=0;
return f;

}
void main()
{
int a,b,c;
scanf("%d%d%d",&a,&b,&c);
if(pan(a,b,c)==1)
printf("yes");
else
printf("no");
}*/
//留整数后的小数后两位，第3位4舍5入.PS 123.456=123.46
/*float com(float x)
{
int m;
float news;
m=(int)(x*1000);
if(m%10>=5)
m=m/10+1;//个位提出
else
m=m/10;
news=m*1.0/100;
return news;

}
void main()
{
float x,news;
scanf("%f",&x);
news = com(x);
printf("%.2f\n",news);

}*/
/*void main()
{
int n,n1,n2,i;
printf("输入一个偶数\n");
scanf("%d",&n);
for(int n1=2;n1<=n/2;n1++){
n2=n-n1;
for(int i=2;i<n1;i++)
{
if(n1%i==0)
{
break;}
if(i<n1){continue;}

}

for(i=2;i<n2;i++)
{
if(n2%i==0){
break;}
if(i>=n2)
{break;}
}

}
printf("%d%d",n1,n2);
}*/
//数字金字塔
/*void main()
{
int i,j,k;
for(int i=1;i<10;i++)
{
for(int j=10;j>i;j--)//输9-1个空
printf("*");
for(k=1;k<=i;k++)//左半部分的数
printf("%c",48+k);//49的ascii值为1；
for(k=i;k>1;k--)//右半部分的数
printf("%c",48+k-1);
printf("\n");
}
}*/
//逆序输出
/*void main()
{
int m,n;
scanf("%d",&n);
m=0;
while(n)
{
m=m*10+n%10;
n=n/10;//踢出个位；
}
printf("%d/n",m);
}*/
/*void main()
{
	char c;
	while((c=getchar())!='\n')
	{
		if(c>='A'&&c<='Z')
			c=(c-'A'+4)%26+'A';
		else if(c>='a'&&c<='z')
			c=(c-'a'+4)%26+'a';
		printf("%c",c);
	}
}*/
//数组累加和
/*void main()
{
int a[100],i,sum=0,n=0;
double aver;
for(int i=0;i<100;i++)
{
scanf("%d",&a[i]);//100个数组
sum=sum+i;//累加和
}
printf("sum=%d\n",sum);
aver=sum/100.0;
printf("aver=%3.2f\n",aver);
for(int i=0;i<100;i++)
{ if
(a[i]>aver){
n=n+1;
printf("%d\n",a[i]);
}
printf("%d\n",n);
}
}*/
//10个数交换
/*void main()
{
int a[10],i,t;
for(int i=0;i<10;i++)
a[i]=i;
for(int i=0;i<10/2;i++)//循环5次交换
{
t=a[i];
a[i]=a[9-i];
a[9-i]=t;
printf("%d\n",a[i]);//检查交换是否有误
}
for(int i=0;i<10;i++)//先交换5次，再输出
printf("%d\t",a[i]);

}*/
//数组求最大值
/*void main()
{
int i,a[N]={12,34,56,25,37},max,m=0;//切记将m赋初值
max=a[0];
for(i=0;i<N;i++){
if(a[i]>max){
max=a[i];
m=i;}

}printf("max=%d,m=%d\n",max,m);
}*/
/*void main()
{
int a[40],m=0;
a[0]=a[1]=1;
for(int i=2;i<40;i++)
{
a[i]=a[i-1]+a[i-2];
m=i;
printf("%d\n",m);
printf("%d\n",a[i]);

}
}*/
//求圆的面积及周长
/*void main()
{
float r,a,s;
scanf("%f",&r);
a=2*P*r;
s=P*r*r;
printf("a=%.4f",a);
printf("s=%.4f",s);
}*/
//求i的k次幂(0<=k<=5)
/*float power(int i,int k)
{
float power=1;
int j;
for(j=1;j<=k;j++)
power*=i;
return power;

}
float f(int n,int k)//求1到n的k次方之和
{
float sum=0;
int i;
for(i=1;i<=n;i++)
sum+=power(i,k);
return sum;

}
void main()
{
int n,k;
printf("输入n,k");
scanf("%d %d",&n,&k);
printf("%f/n",f(n,k));

}*/
//产生若干个10以内的自然数，删除重复的数
/*int main()
{
	int a[N];
	int i, j;
	srand(time(0));
	for (i = 0; i < N; i++)
	{
		a[i] = rand() % 10;
		printf("%d", a[i]);
	}
	printf("\n");//产生自然数
	for (int i = 0; i < N; i++)
	{
		for (int j = i + 1; j < N; j++)
		{
			if (a[j] == a[i])//将a[0]与剩下的进行对比
			{
				a[j] = -1;
			}

		}
		if (a[i] != -1)
		{
			printf("%d", a[i]);
		}
	}
	return 0;
}*/
//评委打分
/*void main()
{
int a[13],sum=0,high,low;
for(int i=0;i<13;i++)
{
scanf("%d",&a[i]);
sum+=a[i];
}
high=a[0];
low=a[0];
for(int i=0;i<13;i++)
{
if(high<a[i])
{
high=a[i];
}
if(low>a[i])
{
low=a[i];
}
}
sum=(sum-high-low)/11;
printf("平均:%d\n",sum);

}*/
//掷骰子
/*int main()
{
int num[100],times[6]={0};
srand(time(0));
for(int i=0;i<100;i++)
{
num[i]=rand()%6+1;//1-6
times[num[i]-1]++;//输出次数
printf("%d",num[i]);
}
printf("\n");
for(int i=0;i<6;i++)
{
printf("%d出现了%d次\n",i+1,times[i]);
}
return 0;
}*/
//100个数查大小判断数组的行与列
/*void main()
{
int i,j,max,a[10][10],m,n;
srand(time(0));
for(int i=0;i<10;i++)
{
for(j=0;j<10;j++)
{
a[i][j]=rand()%90+10;
printf("%3d",a[i][j]);
}
}
printf("\n");
max=a[0][0];
n=0;
m=0;
for(int i=0;i<10;i++)
for(int j=0;j<10;j++)
if(a[i][j]>max)
{
max=a[i][j];
m=i;
n=j;
}
for(int i=0;i<10;i++)
for(int j=0;j<10;j++)
if(a[i][j]==max)
{

printf("max:%d,m=%d,n=%d\n",max,m,n);
}

}*/
//逆矩阵
/*int main()
{
int a[2][3]={{1,2,3},{4,5,6}};
int b[3][2],i,j;
printf("array a:\n");
for(i=0;i<2;i++)
{
for(j=0;j<=2;j++)
{
printf("%3d",a[i][j]);
b[j][i]=a[i][j];
}
printf("\n");
}
printf("array b:\n");
for(i=0;i<3;i++)
{
for(j=0;j<2;j++)
printf("%5d",b[i][j]);
printf("\n");
}
return 0;//返回int值,若为void就不必返回
}*/
//交换数组的第一行和第二行
/*void main()
{
int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};
int i,j,t;
printf("array a:\n");
for(int i=0;i<3;i++)//输出数组
{
for(int j=0;j<4;j++)
{
printf("%5d",a[i][j]);
}
printf("\n");
}
for(int i=0;i<4;i++)//一行和二行交换
{
t=a[0][i];
a[0][i]=a[2][i];
a[2][i]=t;
}
printf("交换后:\n");
for(int i=0;i<3;i++)
{
for(int j=0;j<4;j++)
printf("%5d",a[i][j]);
printf("\n");
}

}*/
//对角线为1
/*void main()
{
int i,j;
int a[10][10];
for( i=0;i<10;i++)
{
for( j=0;j<10;j++)
{
if(i+j==9||i==j)
a[i][j]= 1;
else
a[i][j]=0;
printf("%4d",a[i][j]);
}
printf("\n");
}
}*/
//求对角线的和
/*void main()
{
int i;
int sum,sum1=0,sum2=0;
int a[4][4]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};

for(int i=0;i<4;i++)
{
for(int j=0;j<4;j++)
{
printf("%3d",a[i][j]);
}

printf("\n");
}
for(int i=0;i<4;i++)
{
sum1+=a[i][i];
}
for(int i=0;i<4;i++)
{
sum2+=a[i][3-i];
}
sum=sum1+sum2;
printf("sum:%3d\n",sum);
printf("sum1:%3d\n",sum1);
printf("sum2:%3d\n",sum2);

}*/
//杨辉三角，看上下的变化
/*void main()
{
int a[10][10];
for(int i=0;i<10;i++)
{
for(int j=0;j<=i;j++)
{
if(i==j||j==0)//j=0是第1列,i==j是最后一行
a[i][j]=1;
else
a[i][j]=a[i-1][j-1]+a[i-1][j];//(关键)
printf("%5d",a[i][j]);
}
printf("\n");
}
}*/
//测试
/*void main()
{
int i,j;
char b[5]={'A','B','C','D','E'};
char c[]={"Hello World !"};
char a[10]={97,98,99,100,101};
for(int i=0;i<5;i++)
{
//printf("%4c",b[i]);

}printf("%s",&c);

}*/
//n的阶乘
/*void main()
{
int sum=0,a=1;
int c;
scanf("%d",&c);
for(int i=1;i<=c;i++)
{
a=a*i;
sum=sum+a;

}
printf("阶乘:%d",a);
printf("阶乘和:%d",sum);
}*/
//被三整除的
/*void main()
{
int a[20];
int i,j=0;
srand(time(0));
for(i=0;i<20;i++)
{
a[i]=rand()%90;
printf("%d\t",a[i]);
}
for(int i=0;i<20;i++)
if(a[i]%3==0)
a[j++]=a[i];
printf("\n");
printf("数组元素\n");
for(int i=0;i<j;i++)
printf("%d\n",a[i]);
}*/
//计算成绩平均值
/*int main(void)
{
int i,j;
double sum,s[5][3] = {{82.5,73,78.5},{75,88,92.5},{95,65.5,70},{81,72.5,86.5},{89,98,66}};
for(int i=0;i<5;i++){
sum=0;
for(int j=0;j<3;j++)
sum+=s[i][j];
printf("avg%d=%1.f\n",i+1,sum/3);
}
return 0;
}*/
//4*4的表格
/*void main()
{
int a[4][4],i,j,sum=0;
printf("4*4的表格\n");
for(int i=0;i<4;i++)
{
for(int j=0;j<4;j++)
{
scanf("%d",&a[i][j]);
printf("%d\t",a[i][j]);//输入表格
}
printf("\n");
}
for(int i=0;i<4;i++)
{
for(int j=0;j<=i;j++)
sum+=a[i][j];//计算左下角的元素
printf("sum=%d\n",sum);
}
}*/
//练习
/*void main()
{
	//int i;
	//char c[]="China\07abcdef";//需仔细看\0？
	//char d[]={'a','b','c','d','\0','e'};
	//char a[20],b[20]="china\0ABCDE";//\0后存在但不输出
	//scanf("%s",&a);
	////printf("%s\n",a);
	//printf("%d\n",c[4]);
	//printf("%d\n",c[5]);
	//printf("%c\n",c[6]);
	//printf("%c\n",c[7]);
	//printf("strlen(d)=%d\n",strlen(c));//计算\0之前的字符个数
	//printf("strlen(d)=%d\n",sizeof(c));
	//puts(c);
	//puts(d);//没有\0会出乱码
	//puts(b);//输出b【20】\0以后不输出
	//char str[] = {"china\nbeijing"};//---1
	//char a[20],b[20]="china\0ABCD";
	//gets(a);
	//scanf("%s%s",a,b);
	//printf("%s\n%s\n",a,b);//---2
	//char st[30];
	//char s;
	//int i,count=0;
	//printf("输入名字\n");
	//gets(st);
	//for(int i=0;(s=st[i])!='\0';i++)
	//{
	//	if(st[i]>='0'&&st[i]<='9')
	//		count++;
	//
	//}
	//printf("%d\n",count);//---3
	//char st1[100];
	//int i,word=0,num=0;
	//char c;
	//for(i=0;(c=st1[i])!='\0';i++)
	//{
	//	if(c==' ')
	//		word=0;
	//	else if(word=0)
	//	{
	//		num++;
	//		word=1;
	//	}
	//}
	//printf("%d",num);//---4
	//char st[12]="ABCD EF0";
	//char st[]="ABCD EF0";
	//char  d[]={'a','b','c','d','\0','e'};
	//printf("strlen(d)=%d\n",strlen(st));
	//printf("strlen(d)=%d\n",sizeof(st));
	//printf("strlen(d)=%d\n",strlen(d));
	//printf("strlen(d)=%d\n",sizeof(d));//strlen字符串和sizeof数组长度的区别
	//char st[30]="abcDe";
	//char bt[30]="abcd";//因为d>D，所以bt>st;结果《0；
	//int k;
	//k=strcmp(st,bt);
	//printf("%d\n",k);

}*/
//一个二维数组的每一列的最大值并输出
/*void main()
{
   int a[5][6];
   int b[6];
   int i,j,max;
   srand(time(0));
   for(i=0;i<5;i++)
   {
	   for(j=0;j<6;j++)
	   {
		   a[i][j]=rand()%90;
		   printf("%3d",a[i][j]);
	   }
	   printf("\n");//输出数列
   }

   for(j=0;j<6;j++)
   {
	   b[j]=a[0][j];
	   for(i=0;i<5;i++)
		   if(a[i][j]>b[j])
			   b[j]=a[i][j];
   }
   for(i=0;i<6;i++)
	   printf("第%d列的最大值为%d\n",i+1,b[i]);
}*/
//输出一串字符的数字
/*void main()
{
	char a[40]="aaa sss 123456 55";
	char b[40];
	int i,j=0;
	for(i=0;a[i]!='\0';i++)
	{
		if(a[i]>='0'&&a[i]<='9')
			b[j++]=a[i];
	}
	b[j]='\0';
	puts(b);
}*/
//写什么输出什么
/*void main()
{
	char str1[100],str2[100];
	int i,j=0;
	gets(str2);
	for(int i=0;str2[i]!='\0';i++)
		str1[j++]=str2[i];
	str1[j]='\0';
	puts(str1);
}*/
//选择排序(选最小的往前排)
/*void main()
{
	int a[S]={8,6,9,3,2,7};
	int i,j,t,min;
	for(i=0;i<S-1;i++)//比较趟数
	{
		min=i;
		for(j=i+1;j<S;j++)//最小值的下标

			if(a[j]<a[min])
				min=j;
			t=a[i];
			a[i]=a[min];
			a[min]=t;

	}
	for(i=0;i<S;i++)
		printf("%2d",a[i]);
}*/
//冒泡排序(大数沉底)
/*void main()
{
	int a[S]={8,6,1,3,2,7};
	int i,j,t,min;
	for(i=0;i<S-1;i++)//比较的次数
		for(j=0;j<S-1;j++)//每一趟比较的次数
			if (a[j]>a[j+1])
			{
				t=a[j];
				a[j]=a[j+1];
				a[j+1]=t;
			}
			for(i=0;i<S;i++)
				printf("%2d",a[i]);

}*/
/*void main()//插入一个数
{
	int a[11]={1,3,5,15,36,37,58,80,79,95},i,t1,t2;
	int j;//新定义一个变量来控制数组元素的后移
	printf("原来的数组:\n");
	for(i=0;i<10;i++)
		printf("%5d",a[i]);
	printf("\n输入插入值:");
	scanf("%d",&t1);
	for(i=0;i<10;i++)//插入的位置
		if(a[i]>t1)
			break;
	for(j=9;j>=i;j--)//元素后移
		a[j+1]=a[j];
	a[i]=t1;//插入位置
	printf("插入后的元素\n");
	for(i=0;i<11;i++)
		printf("%5d",a[i]);
	printf("\n");
}*/
//删除一个数
/*void main()
{
	int a[10]={1,2,3,4,5,6},i;
	int t1;
	printf("原来的数组\n");
	for(int i=0;i<10;i++)
	{
		printf("%5d",a[i]);
	}
	printf("\n输入插入值");
	scanf("%d",&t1);
	for(i=0;i<10;i++)
		if(a[i]==t1)
			break;
	for(int j=i;j<10;j++)
		a[j]=a[j+1];
	printf("插入后的元素\n");
	for(i=0;i<9;i++)
		printf("%5d",a[i]);
	printf("\n");
}*/
//顺序查找（可无序）
/*void main()
{
	int a[10]={1,2,3,4,8,6,7,8,9},t1;
	int flag=0;
	printf("原来的数组:\n");
	for(int i=0;i<10;i++)
		printf("%5d",a[i]);
	printf("\n输入想要的值：");
	scanf("%d",&t1);
	for(int i=0;i<10;i++)
		if(a[i]==t1)
		{
			flag=1;//真就不执行flag=0语句
			printf("发现%d,下标%d",t1,i);
		}
	if(flag==0)
		printf("未发现%d",t1);
}*/
//顺序查找（二分法有序查找）
/*void main()
{
	int a[N]={1,2,3,4,8,6,7,8,9},t1;
	int flag=0;
	int top=0,bot=N-1,mid;
	printf("原来的数组:\n");
	for(int i=0;i<10;i++)
		printf("%5d",a[i]);
	printf("\n输入想要的值：");
	scanf("%d",&t1);

	do
	{
		mid=(top+bot)/2;
		if(t1=a[mid])
			flag=1;
		if(t1<a[mid])
			bot=mid-1;
		if(t1>a[mid])
			top=mid+1;
	}while(top<=bot&&flag==0);
	if(flag==1)
		printf("发现%d\n",t1);
	else
		printf("没有发现%d\n",t1);

}*/
/*void main()//待修理
{
	char i,j;
	printf("输入第一个字母:");
	scanf("%c",&i);
	switch(i)
	{
		case 'm':
			printf("Monday\n");
			break;
		case 'w':
			printf("Wennesday\n");
			break;
		case 'f':
			printf("Friday\n");
			break;
		case 't':
			printf("输入下一个字母");
			scanf("%c",&j);
			if('u'==j)
			{printf("tuesday\n");
			break;}
			if('h'==j)
			{printf("thursday\n");}
			break;
		case 't':
			printf("输入下一个字母");
			scanf("%c",&j);
			if('u'==j)
			{printf("tuesday\n");
			break;}
			if('h'==j)
			{printf("thursday\n");}
			break;



	}
}*/
//测试I++
/*void main()
{
	int i=1;
	int a=1;
	int b=1;
	int c=1;
	int y=1;
	int u;
	u=(++y)+(++y);
	c=(++c)+c;
	b=b+(++b);
	i=i+++i;
	a=(a++)+a;
	printf("i+++i=%d\n",i);
	printf("(a++)+a=%d\n",a);
	printf("b+(++b)=%d\n",b);
	printf("(++c)+c=%d\n",c);
	printf("u=%d",u);
}*/
//-------------------------------------------------------》
//求二维数组每一行的最大值或最小值
/*void main()
{
	int i, j;
	int a[5][6];
	int b[5];
	srand(time(0));
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 6; j++)
		{
			a[i][j] = rand() % 90 + 10;
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
	for (i = 0; i < 5; i++)
	{
		b[i] = a[i][0];
		for (j = 0; j < 6; j++)
		{
			if (a[i][j] > b[i])//求max(if任选一)
			{
				b[i] = a[i][j];
			}
			if (a[i][j] < b[i])//求min
				b[i] = a[i][j];
		}
	}
	for(i=0;i<5;i++)
	printf("%d的max: %d\n",i+1,b[i]);
}*/
//字符串连接
/*void main()
{
	char a[100], b[100];
	int i = 0, j = 0;
	printf("Please input 2 strings:\n");
	gets(a);     //输入字符串啊，a，b
	gets(b);
	while (a[i] != '\0')
		i++;       //  i 表示字符串a的'\0'所在的位置
	while (b[j] != '\0')   //将b中字符一个个赋值给'\0'以及其后面的位置，i++,j++控制一一对应
		a[i++] = b[j++];
	a[i] = '\0';    //给一个结束标志
		puts(a);    //输出
}*/
//字符串的数字组成新的数组
/*void main()
{
	char a[40] = "aaa 1234567890bbb 500";
	char b[40];
	int i, j=0;
	for (i = 0; a[i] != '\0'; i++)
	{
		if (a[i] >= '0' && a[i] <= '9')
		{
			b[j] = a[i];
			j++;
		}
	}
	b[j] = '\0';//执行j++后j是最后一位，给结束符
	puts(b);
}*/
//字符串长度,复制,连接
/*void main()
{
	char str[100];//长度
	int i, count=0;
	gets(str);
	for (i = 0; str[i] != '\0'; i++)
		count++;
	printf("length：%d",count);
	printf("-------------->")
	char str1[100], str2[100];//复制
	int i;
	gets(str2);
	for (i = 0; str2[i] != '\0'; i++)
	{
		str1[i] = str2[i];//核心
	}
	str1[i] = '\0';
	puts(str1);
	printf("--------------->");
	char str1[100], str2[100];
	int i=0, j=0;
	gets(str1);
	gets(str2);
	while (str1[i] != 0)
		i++;
	while (str2[j] != 0)
		str1[i++] = str2[j++];
	str1[i] = '\0';
	puts(str1);
	puts(str2);
}*/
//选择排序
/*void main()
{
	int a[6] = { 8,6,9,3,2,7 };
	int i, j, t, min;
	for (i = 0; i < 5; i++)
	{
		for (j = i + 1; j < 6; j++)
		{
			if (a[i] > a[j])
			{
				t = a[i];
				a[i] = a[j];
				a[j] = t;
			}
		}

	}
	for (i = 0; i < 6; i++)
	{
		printf("%d\n", a[i]);
	}
}*/
//冒泡排序
/*void main()
{
	int a[6] = { 8,6,9,3,2,7 };
	int i, j, t;
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 6 - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
	}
	for(i=0;i<6;i++)
	printf("%d",a[i]);
}*/
//数组元素的插入和删除和查找
/*void main()//插入 
{
	int a[10] = { 0,1,2,3,4,5,7,8,9};
	int i, j, t1;
	scanf("%d",&t1);
	for (i = 0; i < 9; i++)//比较趟数 
	{
		if (a[i] > t1)
			break;
	}
	for (j = 8; j >= i; j--)
		a[j + 1] = a[j];
	a[i] = t1;
	for (i = 0; i < 10; i++)
		printf("%d\t",a[i]);
}*/
/*void main()//自建
{
	int a[5] = { 0,2,3,4 };
	int i, j, k1;
	scanf("%d",&k1);
	for (i = 0; i < 4; i++)
	{
		if (a[i] > k1)
			break;
	}
	for (j = 3; j >= i; j--)
		a[j + 1] = a[j];
	a[i] = k1;
	for (i = 0; i < 5; i++)
	{
		printf("%d\t",a[i]);
	}
}*/
/*void main()//删除
{
	int a[5] = { 1,2,3,4,5 };
	int i,j, k1;
	for(i=0;i<5;i++)
	{
		printf("%3d",a[i]);
	}
	printf("\n");
	scanf("%d",&k1);
	for (i = 0; i < 5; i++)
		if (a[i] == k1)
			break;
	for (j = i; j < 4; j++)
		a[j] = a[j + 1];
	for (i = 0; i < 4; i++)
		printf("%3d",a[i]);
}*/
/*void main()//顺序查找
{
	int a[10] = { 0,1,2,6,4,5,6,7,6,9 };
	int i, j=0, t1;
	scanf("%d",&t1);
	for (i = 0; i < 10; i++)
	{ 
		if (a[i] == t1)
		{
			j = 1;
			printf("元素下标：%d\n",i);}
	}
	if (j == 0)
		printf("没有");
}*/
/*void main()//二分法查找
{
	int a[] = { 1,2,3,4,5,6,7,8,9,10 };
	int bot = 9, top = 0, mid, sign = 0, x;
	scanf("%d", &x);
	do
	{
		mid = (top + bot) / 2;
		if (x == a[mid]) sign = 1;
		if (x < a[mid]) bot = mid - 1;
		if (x > a[mid]) top = mid + 1;
	} while (top <= bot && sign == 0);
	if (sign == 1)
		printf("y");
	else  printf("n");
}*/
//二维数组的鞍点行最大列最小
/*void main()
{
	int i, j, k, a[3][4], max, maxj, flag;
	int find = 0;
	srand(time(0));
	for (i = 0; i < 3; i++)//输出数组
	{
		for (j = 0; j < 4; j++)
		{
			a[i][j] = rand() % 80 + 10;
			printf("%3d", a[i][j]);
		}
		printf("\n");
	}
	for (i = 0; i < 3; i++)//求每一行的最大值
	{
		max = a[i][0];
		maxj = 0;
		for (j = 0; j < 4; j++)
		{
			if (a[i][j]> max)
			{
				max = a[i][j];
				maxj = j;//复制最大值的j(列)
			 }
		}
		flag = 1;
		for (k = 0; k < 3; k++)//比较列
			if (max > a[k][maxj])
				flag = 0;
		if (flag)
		{
			find = 1;
			printf("鞍点是a[%d][%d]=%d\n", i, maxj, max);
			break;
		}
	}
	if ( find == 0)
		printf("无鞍点\n");
}*/
/*void main()
{
	int a[3][4];
	int i, j,y, max,maxj=0;
	srand(time(0));
	//输出数组 
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			a[i][j] = rand() % 99;
			printf("%3d",a[i][j]);
		}
		printf("\n");
	}
	for (i = 0; i < 3; i++)
	{
		max = a[i][0];
		for (j = 0; j < 4; j++)
		{
			if (a[i][j] > max)
			{
				max = a[i][j];
				maxj = j;
			}
		}
	}
	for (y = 0; y < 3; y++)
	{
		printf("%d\n",max);
	}
}*/
//求一元二次方程的解
/*void main()
{
	float a, b, c,x1,x2;
	scanf("%f%f%f",&a,&b,&c);
	if ((b * b - 4 * a * c < 0) || a == 0)
	{
		printf("无实根\n");
	}
	else
	{
		x1 = (-b + sqrt(b * b - 4 * a * c)) / (2 * a);
		x2= (-b - sqrt(b * b - 4 * a * c)) / (2 * a);
		printf("x1:%.2f,x2:%.2f\n",x1,x2);
	}
}*/
//求阶乘及阶乘的和
/*void main()
{
	int n, k = 1;
	int i, sum = 0;;
	scanf("%d", &n);
	for (i = 1; i <= n; i++)
	{
		k = k * i;
		sum += k;
	}
	printf("%d!=%d\n", n, k);
	printf("阶乘和:%d\n", sum);
}*/
//计算整数所含数字的位数
/*void main()
{
	int x,count=0;
	scanf("%d",&x);
	do
	{
		x = x / 10;
		count++;
	} while (x != 0);
	printf("%d",count);
}*/
//数字逆序输出
 /*void main()
{
	int x,a;
	scanf("%d",&x);
	do
	{
		a=x % 10;
		x = x / 10;
		printf("%d ",a);
	} while (x != 0);
}*/
//递归n的阶乘
/*void main()
{
	int fac(int n);
	printf("%d",fac(3));
}
int fac(int n)
{
	int f;
	if (n == 1 || n == 0)
	{
		f = 1;
	}
	else f = n * fac(n - 1);
	return f;
}*/
//递归妙用类似逆序
/*void main()
{
	int fun(int x);
	int n = 4;
	fun(n);

}
int fun(int x)
{
	if (x > 0)
		fun(x - 1);
	printf("%d", x);//01234
}
*/
//递归调用桃子
/*void main()
{
	int day,x1=0,x2;
	day=9;
	x2=1;
	while(day>0)
	{
		x1=(x2+1)*2;
		x2=x1;
		day--;
	}
	printf("%d",x1);
}*/
//递归汉诺塔
/*void main()
{
	int n;
	scanf("%d",&n);
	void hanoi(int n, char A, char B, char C);
	hanoi(n, 'A', 'B', 'C');
}
void hanoi(int n, char A, char B, char C)
{
	if (n == 1)
	{
		printf("%c---->%c\n",A,C);
	}
	else
	{
		hanoi(n - 1, A, C, B);
		printf("%c---->%c\n",A,C);
		hanoi(n - 1, B, A, C);
	}
}*/
//求完数
/*void main()
{
	for (int data = 2; data < 1000; data++)
	{
		int sum = 0;
		for (int factor = 1; factor <= data / 2; factor++)
		{
			if (data % factor == 0)
			{
				sum += factor;
			}
		}
		if (sum == data)
		{
			printf("%d its factors are",data);
			for (int factor = 1; factor <= data / 2; factor++)
			{
				if (data % factor == 0)
				{
					printf("%d ",factor);
				}
				
			}printf("\n");
		}
	}
}*/
//指针实现2个数字由小到大比较看是否会影响原值
/*void main()
{
	void bijiao(int a, int b);
	void bijiaos(int a, int b);
	int a, b;
	printf("Please input a,b\n");
	a = 6, b = 3;
	bijiao(a, b);
	//bijiaos(a, b);
	printf("---->\n");
	
	printf("%d,%d\n", a, b);//6 3 

}
void bijiao(int a, int b)//影响原ab的值寄存器temp为实际内容与ab挂钩
{
	int* n1, * n2, temp;
	n1 = &a; n2 = &b;
	if (a > b)
	{
		temp = *n1;//值交换
		*n1 = *n2;
		*n2 = temp;
	}
	printf("%d,%d\n",a,b);//36
	printf("%d,%d\n", *n1, *n2);//36
}
void bijiaos(int a, int b)//不影响原ab值寄存器temp为指针变量与n1n2挂钩不与ab挂钩
{
	int* n1, * n2, *temp;
	n1 = &a; n2 = &b;
	if (a > b)
	{
		temp = n1;//地址交换
		n1 = n2;
		n2 = temp;
		//不可以写成*temp=*p1;因为temp是野指针
	}
	printf("%d,%d\n", a, b);//63
	printf("%d,%d\n", *n1, *n2);//36
}*/





